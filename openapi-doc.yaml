components:
  parameters:
    Accept:
      allowEmptyValue: false
      description: Media type(s) that is/are acceptable for the response.
      example: application/json
      in: header
      name: Accept
      required: false
      schema:
        type: string
  schemas:
    AcknowledgeHostGroupProblem:
      properties:
        acknowledge_type:
          description: The acknowledge host selection type.
          enum: &id001
          - host
          - hostgroup
          - host_by_query
          example: host
          type: string
        sticky:
          default: true
          description: If set, only a state-change of the host to an UP state will
            discard the acknowledgement. Otherwise it will be discarded on any state-change.
            Defaults to False.
          example: false
          type: boolean
        persistent:
          default: false
          description: If set, the comment will persist a restart. Defaults to False.
          example: false
          type: boolean
        notify:
          default: true
          description: If set, notifications will be sent out to the configured contacts.
            Defaults to False.
          example: false
          type: boolean
        comment:
          description: If set, this comment will be stored alongside the acknowledgement.
          example: This was expected.
          type: string
        hostgroup_name:
          description: The name of the host group.
          example: Servers
          type: string
      required:
      - acknowledge_type
      - comment
      - hostgroup_name
      type: object
    AcknowledgeHostProblem:
      properties:
        acknowledge_type:
          description: The acknowledge host selection type.
          enum: *id001
          example: host
          type: string
        sticky:
          default: true
          description: If set, only a state-change of the host to an UP state will
            discard the acknowledgement. Otherwise it will be discarded on any state-change.
            Defaults to False.
          example: false
          type: boolean
        persistent:
          default: false
          description: If set, the comment will persist a restart. Defaults to False.
          example: false
          type: boolean
        notify:
          default: true
          description: If set, notifications will be sent out to the configured contacts.
            Defaults to False.
          example: false
          type: boolean
        comment:
          description: If set, this comment will be stored alongside the acknowledgement.
          example: This was expected.
          type: string
        host_name:
          description: The name of the host.
          example: example.com
          pattern: '[-0-9a-zA-Z_.]+'
          type: string
      required:
      - acknowledge_type
      - comment
      - host_name
      type: object
    AcknowledgeHostQueryProblem:
      properties:
        acknowledge_type:
          description: The acknowledge host selection type.
          enum: *id001
          example: host
          type: string
        sticky:
          default: true
          description: If set, only a state-change of the host to an UP state will
            discard the acknowledgement. Otherwise it will be discarded on any state-change.
            Defaults to False.
          example: false
          type: boolean
        persistent:
          default: false
          description: If set, the comment will persist a restart. Defaults to False.
          example: false
          type: boolean
        notify:
          default: true
          description: If set, notifications will be sent out to the configured contacts.
            Defaults to False.
          example: false
          type: boolean
        comment:
          description: If set, this comment will be stored alongside the acknowledgement.
          example: This was expected.
          type: string
        query:
          allOf:
          - $ref: '#/components/schemas/Expr'
          description: An query expression of the Livestatus 'hosts' table in nested
            dictionary form. If you want to use multiple expressions, nest them with
            the AND/OR operators.
          example: '{"op": "and", "expr": [{"op": "=", "left": "name", "right": "example.com"},
            {"op": "!=", "left": "state", "right": "0"}]}'
      required:
      - acknowledge_type
      - comment
      - query
      type: object
    AcknowledgeHostRelatedProblem:
      discriminator:
        mapping:
          host: '#/components/schemas/AcknowledgeHostProblem'
          host_by_query: '#/components/schemas/AcknowledgeHostQueryProblem'
          hostgroup: '#/components/schemas/AcknowledgeHostGroupProblem'
        propertyName: acknowledge_type
      oneOf:
      - $ref: '#/components/schemas/AcknowledgeHostProblem'
      - $ref: '#/components/schemas/AcknowledgeHostGroupProblem'
      - $ref: '#/components/schemas/AcknowledgeHostQueryProblem'
      properties: {}
      type: object
    AcknowledgeServiceGroupProblem:
      properties:
        acknowledge_type:
          description: The acknowledge service selection type.
          enum: &id002
          - service
          - servicegroup
          - service_by_query
          example: service
          type: string
        sticky:
          default: true
          description: If set, only a state-change of the service to an OK state will
            discard the acknowledgement. Otherwise, it will be discarded on any state-change.
            Defaults to False.
          example: false
          type: boolean
        persistent:
          default: false
          description: If set, the comment will persist a restart. Defaults to False.
          example: false
          type: boolean
        notify:
          default: true
          description: If set, notifications will be sent out to the configured contacts.
            Defaults to False.
          example: false
          type: boolean
        comment:
          description: If set, this comment will be stored alongside the acknowledgement.
          example: This was expected.
          type: string
        servicegroup_name:
          description: The name of the service group. Any host having a service in
            this group will be A downtime will be scheduled for all hosts in this
            group.
          example: windows
          type: string
      required:
      - acknowledge_type
      - comment
      - servicegroup_name
      type: object
    AcknowledgeServiceQueryProblem:
      properties:
        acknowledge_type:
          description: The acknowledge service selection type.
          enum: *id002
          example: service
          type: string
        sticky:
          default: true
          description: If set, only a state-change of the service to an OK state will
            discard the acknowledgement. Otherwise, it will be discarded on any state-change.
            Defaults to False.
          example: false
          type: boolean
        persistent:
          default: false
          description: If set, the comment will persist a restart. Defaults to False.
          example: false
          type: boolean
        notify:
          default: true
          description: If set, notifications will be sent out to the configured contacts.
            Defaults to False.
          example: false
          type: boolean
        comment:
          description: If set, this comment will be stored alongside the acknowledgement.
          example: This was expected.
          type: string
        query:
          allOf:
          - $ref: '#/components/schemas/Expr'
          description: An query expression of the Livestatus 'services' table in nested
            dictionary form. If you want to use multiple expressions, nest them with
            the AND/OR operators.
          example: '{"op": "and", "expr": [{"op": "=", "left": "name", "right": "example.com"},
            {"op": "!=", "left": "state", "right": "0"}]}'
      required:
      - acknowledge_type
      - comment
      - query
      type: object
    AcknowledgeServiceRelatedProblem:
      discriminator:
        mapping:
          service: '#/components/schemas/AcknowledgeSpecificServiceProblem'
          service_by_query: '#/components/schemas/AcknowledgeServiceQueryProblem'
          servicegroup: '#/components/schemas/AcknowledgeServiceGroupProblem'
        propertyName: acknowledge_type
      oneOf:
      - $ref: '#/components/schemas/AcknowledgeSpecificServiceProblem'
      - $ref: '#/components/schemas/AcknowledgeServiceGroupProblem'
      - $ref: '#/components/schemas/AcknowledgeServiceQueryProblem'
      properties: {}
      type: object
    AcknowledgeSpecificServiceProblem:
      properties:
        acknowledge_type:
          description: The acknowledge service selection type.
          enum: *id002
          example: service
          type: string
        sticky:
          default: true
          description: If set, only a state-change of the service to an OK state will
            discard the acknowledgement. Otherwise, it will be discarded on any state-change.
            Defaults to False.
          example: false
          type: boolean
        persistent:
          default: false
          description: If set, the comment will persist a restart. Defaults to False.
          example: false
          type: boolean
        notify:
          default: true
          description: If set, notifications will be sent out to the configured contacts.
            Defaults to False.
          example: false
          type: boolean
        comment:
          description: If set, this comment will be stored alongside the acknowledgement.
          example: This was expected.
          type: string
        host_name:
          example: example.com
          pattern: '[-0-9a-zA-Z_.]+'
          type: string
        service_description:
          description: The acknowledgement process will be applied to all matching
            service descriptions
          example: CPU load
          type: string
      required:
      - acknowledge_type
      - comment
      - host_name
      - service_description
      type: object
    ActivateChanges:
      properties:
        redirect:
          default: false
          description: After starting the activation, redirect immediately to the
            'Wait for completion' endpoint instead of waiting for the completion.
          example: false
          type: boolean
        sites:
          description: The names of the sites on which the configuration shall be
            activated. An empty list means all sites which have pending changes.
          example:
          - production
          items:
            type: string
          type: array
        force_foreign_changes:
          default: false
          description: Will activate changes even if the user who made those changes
            is not the currently logged in user.
          example: false
          type: boolean
      type: object
    ApiError:
      properties:
        status:
          description: The HTTP status code.
          example: 404
          type: integer
        detail:
          description: Detailed information on what exactly went wrong.
          example: The resource could not be found.
          type: string
        title:
          description: A summary of the problem.
          example: Not found
          type: string
        fields:
          description: Detailed error messages on all fields failing validation.
          type: object
        ext:
          description: Additional information about the error.
          type: object
      required:
      - detail
      - status
      - title
      type: object
    AuthOption:
      discriminator:
        mapping:
          automation: '#/components/schemas/AuthSecret'
          password: '#/components/schemas/AuthPassword'
        propertyName: auth_type
      oneOf:
      - $ref: '#/components/schemas/AuthPassword'
      - $ref: '#/components/schemas/AuthSecret'
      properties: {}
      type: object
    AuthPassword:
      properties:
        password:
          description: The password for login
          example: password
          type: string
        auth_type:
          description: The authentication type
          enum: &id003
          - automation
          - password
          example: password
          type: string
        enforce_password_change:
          default: false
          description: If set to True, the user will be forced to change his password
            on the next login or access. Defaults to False
          example: false
          type: boolean
      type: object
    AuthSecret:
      properties:
        secret:
          description: For accounts used by automation processes (such as fetching
            data from views for further procession). This is the automation secret
          example: DEYQEQQPYCFFBYH@AVMC
          type: string
        auth_type:
          description: The authentication type
          enum: *id003
          example: password
          type: string
      type: object
    AuthUpdateOption:
      discriminator:
        mapping:
          automation: '#/components/schemas/AuthUpdateSecret'
          password: '#/components/schemas/AuthUpdatePassword'
          remove: '#/components/schemas/AuthUpdateRemove'
        propertyName: auth_type
      oneOf:
      - $ref: '#/components/schemas/AuthUpdatePassword'
      - $ref: '#/components/schemas/AuthUpdateSecret'
      - $ref: '#/components/schemas/AuthUpdateRemove'
      properties: {}
      type: object
    AuthUpdatePassword:
      properties:
        password:
          description: The password for login
          example: password
          type: string
        auth_type:
          description: The authentication type
          enum: &id004
          - automation
          - password
          - remove
          example: password
          type: string
        enforce_password_change:
          description: If set to True, the user will be forced to change his password
            on the next login or access
          example: false
          type: boolean
      required:
      - auth_type
      type: object
    AuthUpdateRemove:
      properties:
        auth_type:
          description: The authentication type
          enum: *id004
          example: password
          type: string
      required:
      - auth_type
      type: object
    AuthUpdateSecret:
      properties:
        secret:
          description: For accounts used by automation processes (such as fetching
            data from views for further procession). This is the automation secret
          example: DEYQEQQPYCFFBYH@AVMC
          type: string
        auth_type:
          description: The authentication type
          enum: *id004
          example: password
          type: string
      required:
      - auth_type
      type: object
    BIAction:
      discriminator:
        mapping:
          call_a_rule: '#/components/schemas/BICallARuleAction'
          state_of_host: '#/components/schemas/BIStateOfHostAction'
          state_of_remaining_services: '#/components/schemas/BIStateOfRemainingServicesAction'
          state_of_service: '#/components/schemas/BIStateOfServiceAction'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/BICallARuleAction'
      - $ref: '#/components/schemas/BIStateOfHostAction'
      - $ref: '#/components/schemas/BIStateOfServiceAction'
      - $ref: '#/components/schemas/BIStateOfRemainingServicesAction'
      properties: {}
      type: object
    BIAggregationComputationOptions:
      properties:
        disabled:
          example: false
          type: boolean
        use_hard_states:
          example: false
          type: boolean
        escalate_downtimes_as_warn:
          example: false
          type: boolean
      required:
      - disabled
      - escalate_downtimes_as_warn
      - use_hard_states
      type: object
    BIAggregationEndpoint:
      properties:
        id:
          description: "TODO: Hier mu\xDF Andreas noch etwas reinschreiben!"
          example: aggr1
          type: string
        comment:
          description: An optional comment that may be used to explain the purpose
            of this object.
          example: Rule comment
          nullable: true
          type: string
        customer:
          description: 'CME Edition only: The customer id for this aggregation.'
          example: customer1
          nullable: true
          type: string
        groups:
          allOf:
          - $ref: '#/components/schemas/BIAggregationGroups'
          description: "TODO: Hier mu\xDF Andreas noch etwas reinschreiben!"
          example:
            names:
            - groupA
            - groupB
            paths:
            - - path
              - group
              - a
            - - path
              - group
              - b
        node:
          allOf:
          - $ref: '#/components/schemas/BINodeGenerator'
          description: "TODO: Hier mu\xDF Andreas noch etwas reinschreiben!"
          example:
            action:
              host_regex: ''
              type: state_of_host
            search:
              type: empty
        aggregation_visualization:
          allOf:
          - $ref: '#/components/schemas/BIAggregationVisualization'
          description: "TODO: Hier mu\xDF Andreas noch etwas reinschreiben!"
          example:
            ignore_rule_styles: false
            layout_id: builtin_default
            line_style: round
        computation_options:
          allOf:
          - $ref: '#/components/schemas/BIAggregationComputationOptions'
          description: "TODO: Hier mu\xDF Andreas noch etwas reinschreiben!"
          example:
            disabled: false
            escalate_downtimes_as_warn: false
            use_hard_states: false
        pack_id:
          description: "TODO: Hier mu\xDF Andreas noch etwas reinschreiben!"
          example: pack1
          type: string
      required:
      - aggregation_visualization
      - computation_options
      - groups
      - id
      - node
      - pack_id
      type: object
    BIAggregationFunction:
      discriminator:
        mapping:
          best: '#/components/schemas/BIAggregationFunctionBest'
          count_ok: '#/components/schemas/BIAggregationFunctionCountOK'
          worst: '#/components/schemas/BIAggregationFunctionWorst'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/BIAggregationFunctionBest'
      - $ref: '#/components/schemas/BIAggregationFunctionWorst'
      - $ref: '#/components/schemas/BIAggregationFunctionCountOK'
      properties: {}
      type: object
    BIAggregationFunctionBest:
      properties:
        type:
          default: best
        count:
          type: integer
        restrict_state:
          enum:
          - 0
          - 1
          - 2
          type: integer
      required:
      - count
      - restrict_state
      - type
      type: object
    BIAggregationFunctionCountOK:
      properties:
        type:
          default: count_ok
        levels_ok:
          $ref: '#/components/schemas/BIAggregationFunctionCountSettings'
        levels_warn:
          $ref: '#/components/schemas/BIAggregationFunctionCountSettings'
      required:
      - levels_ok
      - levels_warn
      - type
      type: object
    BIAggregationFunctionCountSettings:
      properties:
        type:
          enum:
          - count
          - percentage
          type: string
        value:
          type: integer
      required:
      - type
      - value
      type: object
    BIAggregationFunctionWorst:
      properties:
        type:
          default: worst
        count:
          example: 2
          type: integer
        restrict_state:
          enum:
          - 0
          - 1
          - 2
          type: integer
      required:
      - count
      - restrict_state
      - type
      type: object
    BIAggregationGroups:
      properties:
        names:
          example:
          - group1
          - group2
          items:
            type: string
          type: array
        paths:
          example:
          - - path
            - of
            - group1
          items:
            items:
              type: string
            type: array
          type: array
      type: object
    BIAggregationStateRequest:
      properties:
        filter_names:
          description: Filter by names
          example:
          - Host foo
          items:
            type: string
          type: array
        filter_groups:
          description: Filter by group
          example:
          - My Group
          items:
            type: string
          type: array
      type: object
    BIAggregationStateResponse:
      properties:
        aggregations:
          description: The Aggregation state
          example: {}
          type: object
        missing_sites:
          description: The missing sites
          example:
          - beta
          - heute
          items:
            type: string
          type: array
        missing_aggr:
          description: the missing aggregations
          example:
          - Host heute
          items:
            type: string
          type: array
      type: object
    BIAggregationVisualization:
      properties:
        ignore_rule_styles:
          example: false
          type: boolean
        layout_id:
          example: radial_layout2
          type: string
        line_style:
          example: round
          type: string
      required:
      - ignore_rule_styles
      - layout_id
      - line_style
      type: object
    BIAllHostsChoice:
      properties:
        type:
          default: all_hosts
      required:
      - type
      type: object
    BICallARuleAction:
      properties:
        type:
          default: call_a_rule
        rule_id:
          example: test_rule_1
          type: string
        params:
          allOf:
          - $ref: '#/components/schemas/BIParams'
          example:
            arguments: []
      required:
      - params
      - rule_id
      - type
      type: object
    BIEmptySearch:
      properties:
        type:
          default: empty
      required:
      - type
      type: object
    BIFixedArgumentsSearch:
      properties:
        type:
          default: fixed_arguments
        arguments:
          items:
            $ref: '#/components/schemas/BIFixedArgumentsSearchToken'
          type: array
      required:
      - arguments
      - type
      type: object
    BIFixedArgumentsSearchToken:
      properties:
        key:
          type: string
        values:
          items:
            type: string
          type: array
      required:
      - key
      - values
      type: object
    BIHostAliasRegexChoice:
      properties:
        type:
          default: host_alias_regex
        pattern:
          example: testali.*
          type: string
      required:
      - pattern
      - type
      type: object
    BIHostChoice:
      discriminator:
        mapping:
          all_hosts: '#/components/schemas/BIAllHostsChoice'
          host_alias_regex: '#/components/schemas/BIHostAliasRegexChoice'
          host_name_regex: '#/components/schemas/BIHostNameRegexChoice'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/BIAllHostsChoice'
      - $ref: '#/components/schemas/BIHostNameRegexChoice'
      - $ref: '#/components/schemas/BIHostAliasRegexChoice'
      properties: {}
      type: object
    BIHostNameRegexChoice:
      properties:
        type:
          default: host_name_regex
        pattern:
          example: testhostn.*
          type: string
      required:
      - pattern
      - type
      type: object
    BIHostSearch:
      properties:
        type:
          default: host_search
        conditions:
          $ref: '#/components/schemas/HostConditions'
        refer_to:
          $ref: '#/components/schemas/ReferTo'
      required:
      - conditions
      - refer_to
      - type
      type: object
    BINodeGenerator:
      properties:
        search:
          allOf:
          - $ref: '#/components/schemas/BISearch'
          description: "TODO: Hier mu\xDF Andreas noch etwas reinschreiben!"
          example:
            type: empty
        action:
          allOf:
          - $ref: '#/components/schemas/BIAction'
          description: "TODO: Hier mu\xDF Andreas noch etwas reinschreiben!"
          example:
            host_regex: ''
            type: state_of_host
      required:
      - action
      - search
      type: object
    BINodeVisBlockStyle:
      properties:
        type:
          default: block
        style_config:
          default: &id005 {}
      required:
      - style_config
      - type
      type: object
    BINodeVisForceStyle:
      properties:
        type:
          default: force
        style_config:
          default: {}
      required:
      - style_config
      - type
      type: object
    BINodeVisHierarchyStyle:
      properties:
        type:
          default: hierarchy
        style_config:
          $ref: '#/components/schemas/BINodeVisHierarchyStyleConfig'
      required:
      - style_config
      - type
      type: object
    BINodeVisHierarchyStyleConfig:
      properties:
        layer_height:
          example: 85
          type: integer
        node_size:
          example: 40
          type: integer
        rotation:
          example: 180
          type: integer
      required:
      - layer_height
      - node_size
      - rotation
      type: object
    BINodeVisLayoutStyle:
      discriminator:
        mapping:
          block: '#/components/schemas/BINodeVisBlockStyle'
          force: '#/components/schemas/BINodeVisForceStyle'
          hierarchy: '#/components/schemas/BINodeVisHierarchyStyle'
          none: '#/components/schemas/BINodeVisNoneStyle'
          radial: '#/components/schemas/BINodeVisRadialStyle'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/BINodeVisNoneStyle'
      - $ref: '#/components/schemas/BINodeVisBlockStyle'
      - $ref: '#/components/schemas/BINodeVisHierarchyStyle'
      - $ref: '#/components/schemas/BINodeVisRadialStyle'
      - $ref: '#/components/schemas/BINodeVisForceStyle'
      properties: {}
      type: object
    BINodeVisNoneStyle:
      properties:
        type:
          default: none
        style_config:
          default: {}
      required:
      - style_config
      - type
      type: object
    BINodeVisRadialStyle:
      properties:
        type:
          default: radial
        style_config:
          $ref: '#/components/schemas/BINodeVisRadialStyleConfig'
      required:
      - style_config
      - type
      type: object
    BINodeVisRadialStyleConfig:
      properties:
        degree:
          type: integer
        radius:
          type: integer
        rotation:
          type: integer
      required:
      - degree
      - radius
      - rotation
      type: object
    BIPackEndpoint:
      properties:
        title:
          description: "TODO: Hier mu\xDF Andreas noch etwas reinschreiben!"
          example: BI Title
          type: string
        contact_groups:
          description: "TODO: Hier mu\xDF Andreas noch etwas reinschreiben!"
          example:
          - contact
          - contactgroup_b
          items:
            example: important_persons
            type: string
          type: array
        public:
          description: "TODO: Hier mu\xDF Andreas noch etwas reinschreiben!"
          example: 'false'
          type: boolean
      required:
      - contact_groups
      - public
      - title
      type: object
    BIParams:
      properties:
        arguments:
          example:
          - testhostParams
          items:
            type: string
          type: array
      required:
      - arguments
      type: object
    BIRuleComputationOptions:
      properties:
        disabled:
          example: false
          type: boolean
      required:
      - disabled
      type: object
    BIRuleEndpoint:
      properties:
        id:
          description: "TODO: Hier mu\xDF Andreas noch etwas reinschreiben!"
          example: rule1
          type: string
        nodes:
          description: "TODO: Hier mu\xDF Andreas noch etwas reinschreiben!"
          example: []
          items:
            $ref: '#/components/schemas/BINodeGenerator'
          type: array
        params:
          allOf:
          - $ref: '#/components/schemas/BIParams'
          description: "TODO: Hier mu\xDF Andreas noch etwas reinschreiben!"
          example:
            arguments:
            - foo
            - bar
        node_visualization:
          allOf:
          - $ref: '#/components/schemas/BINodeVisLayoutStyle'
          description: "TODO: Hier mu\xDF Andreas noch etwas reinschreiben!"
          example:
            style_config: *id005
            type: block
        properties:
          allOf:
          - $ref: '#/components/schemas/BIRuleProperties'
          description: "TODO: Hier mu\xDF Andreas noch etwas reinschreiben!"
          example:
            comment: ''
            docu_url: ''
            icon: ''
            state_messages: {}
            title: ''
        aggregation_function:
          allOf:
          - $ref: '#/components/schemas/BIAggregationFunction'
          description: "TODO: Hier mu\xDF Andreas noch etwas reinschreiben!"
          example:
            count: 1
            restrict_state: 2
            type: best
        computation_options:
          allOf:
          - $ref: '#/components/schemas/BIRuleComputationOptions'
          description: "TODO: Hier mu\xDF Andreas noch etwas reinschreiben!"
          example:
            disabled: false
        pack_id:
          description: "TODO: Hier mu\xDF Andreas noch etwas reinschreiben!"
          example: pack1
          type: string
      required:
      - aggregation_function
      - computation_options
      - id
      - node_visualization
      - nodes
      - pack_id
      - params
      - properties
      type: object
    BIRuleProperties:
      properties:
        title:
          example: Rule title
          type: string
        comment:
          example: Rule comment
          type: string
        docu_url:
          example: Rule documentation
          type: string
        icon:
          example: icon1.png
          type: string
        state_messages:
          example: {}
          type: object
      required:
      - comment
      - docu_url
      - icon
      - state_messages
      - title
      type: object
    BISearch:
      discriminator:
        mapping:
          empty: '#/components/schemas/BIEmptySearch'
          fixed_arguments: '#/components/schemas/BIFixedArgumentsSearch'
          host_search: '#/components/schemas/BIHostSearch'
          service_search: '#/components/schemas/BIServiceSearch'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/BIEmptySearch'
      - $ref: '#/components/schemas/BIHostSearch'
      - $ref: '#/components/schemas/BIServiceSearch'
      - $ref: '#/components/schemas/BIFixedArgumentsSearch'
      properties: {}
      type: object
    BIServiceSearch:
      properties:
        type:
          default: service_search
        conditions:
          $ref: '#/components/schemas/ServiceConditions'
      required:
      - conditions
      - type
      type: object
    BIStateOfHostAction:
      properties:
        type:
          default: state_of_host
        host_regex:
          example: testhost
          type: string
      required:
      - host_regex
      - type
      type: object
    BIStateOfRemainingServicesAction:
      properties:
        type:
          default: state_of_remaining_services
        host_regex:
          example: testhost
          type: string
      required:
      - host_regex
      - type
      type: object
    BIStateOfServiceAction:
      properties:
        type:
          default: state_of_service
        host_regex:
          example: testhost
          type: string
        service_regex:
          example: testservice
          type: string
      required:
      - host_regex
      - service_regex
      - type
      type: object
    BackgroundJobStatus:
      properties:
        active:
          description: This field indicates if the background job is active or not.
          example: true
          type: boolean
        state:
          description: This field indicates the current state of the background job.
          enum:
          - initialized
          - running
          - finished
          - stopped
          - exception
          example: initialized
          type: string
        logs:
          allOf:
          - $ref: '#/components/schemas/JobLogs'
          description: Logs related to the background job.
          example:
            progress:
            - progress1
            result:
            - result1
      required:
      - active
      - logs
      - state
      type: object
    BaseUserAttributes:
      properties:
        fullname:
          description: The alias or full name of the user.
          type: string
        disable_login:
          description: This field indicates if the user is allowed to login to the
            monitoring.
          type: boolean
        contact_options:
          allOf:
          - $ref: '#/components/schemas/ConcreteUserContactOption'
          description: Contact settings for the user
        idle_timeout:
          allOf:
          - $ref: '#/components/schemas/UserIdleOption'
          description: Idle timeout for the user. Per default, the global configuration
            is used.
          example:
            option: global
        roles:
          description: The list of assigned roles to the user
          items:
            type: string
          type: array
        authorized_sites:
          description: The names of the sites that this user is authorized to handle
          items:
            type: string
          type: array
        contactgroups:
          description: The contact groups that this user is a member of
          items:
            type: string
          type: array
        pager_address:
          description: ''
          type: string
        disable_notifications:
          $ref: '#/components/schemas/ConcreteDisabledNotifications'
        language:
          description: The language used by the user in the user interface
          type: string
        enforce_password_change:
          description: This field indicates if the user is forced to change the password
            on the next login or access.
          type: boolean
        interface_options:
          $ref: '#/components/schemas/ConcreteUserInterfaceAttributes'
      required:
      - fullname
      type: object
    BinaryExpr:
      properties:
        op:
          description: The operator.
          type: string
        left:
          description: The LiveStatus column name.
          example: name
          pattern: ([a-z]+\.)?[_a-z]+
          type: string
        right:
          description: The value to compare the column to.
          type: string
      type: object
    BulkCreateHost:
      properties:
        entries:
          description: A list of host entries.
          example:
          - attributes: {}
            folder: /
            host_name: example.com
          items:
            $ref: '#/components/schemas/CreateHost'
          type: array
          uniqueItems: true
      type: object
    BulkDeleteContactGroup:
      properties:
        entries:
          description: A list of contract group names.
          example:
          - windows
          - panels
          items:
            description: The name of the contact group config
            example: windows
            type: string
          type: array
      required:
      - entries
      type: object
    BulkDeleteHost:
      properties:
        entries:
          description: A list of host names.
          example:
          - example
          - sample
          items:
            description: The hostname or IP address itself.
            example: example.com
            pattern: '[-0-9a-zA-Z_.]+'
            type: string
          type: array
      required:
      - entries
      type: object
    BulkDeleteHostGroup:
      properties:
        entries:
          description: A list of host group names.
          example:
          - windows
          - panels
          items:
            description: The name of the host group config
            example: windows
            type: string
          type: array
      required:
      - entries
      type: object
    BulkDeleteServiceGroup:
      properties:
        entries:
          description: A list of service group names.
          example:
          - windows
          - panels
          items:
            description: The name of the service group config
            example: windows
            type: string
          type: array
      required:
      - entries
      type: object
    BulkDiscovery:
      properties:
        hostnames:
          description: A list of host names
          example:
          - example
          - sample
          items:
            description: The hostname or IP address itself.
            example: example.com
            pattern: '[-0-9a-zA-Z_.]+'
            type: string
          type: array
        mode:
          default: new
          description: "The mode of the discovery action. Can be one of:\n\n     *\
            \ `new` - Add undecided services to monitoring\n     * `remove` - Remove\
            \ vanished services\n     * `fix_all` - Add undecided services and new\
            \ host labels, remove vanished services\n     * `refresh` - Update inforomation\
            \ from host, then remove all existing and add all just found services\
            \ and host labels\n     * `only_host_labels` - Update host labels\n  \
            \  "
          enum:
          - new
          - remove
          - fix_all
          - refresh
          - only_host_labels
          example: refresh
          type: string
        do_full_scan:
          default: true
          description: The option whether to perform a full scan or not.
          example: true
          type: boolean
        bulk_size:
          default: 10
          description: The number of hosts to be handled at once.
          example: 10
          type: integer
        ignore_errors:
          default: true
          description: The option whether to ignore errors in single check plugins.
          example: true
          type: boolean
      required:
      - hostnames
      type: object
    BulkHostActionWithFailedHosts:
      properties:
        status:
          description: The HTTP status code.
          example: 404
          type: integer
        detail:
          description: Detailed information on what exactly went wrong.
          example: The resource could not be found.
          type: string
        title:
          description: A summary of the problem.
          example: Not found
          type: string
        fields:
          description: Detailed error messages on all fields failing validation.
          type: object
        ext:
          allOf:
          - $ref: '#/components/schemas/FailedHosts'
          description: Details for which hosts have failed
      required:
      - detail
      - status
      - title
      type: object
    BulkInputContactGroup:
      properties:
        entries:
          description: A collection of contact group entries.
          example:
          - alias: Not on Sundays
            name: OnCall
          items:
            $ref: '#/components/schemas/InputContactGroup'
          type: array
          uniqueItems: true
      type: object
    BulkInputHostGroup:
      properties:
        entries:
          description: A list of host group entries.
          example:
          - alias: Windows Servers
            name: windows
          items:
            $ref: '#/components/schemas/InputHostGroup'
          type: array
          uniqueItems: true
      type: object
    BulkInputServiceGroup:
      properties:
        entries:
          description: A list of service group entries.
          example:
          - alias: Environment Sensors
            name: environment
          items:
            $ref: '#/components/schemas/InputServiceGroup'
          type: array
          uniqueItems: true
      type: object
    BulkUpdateContactGroup:
      properties:
        entries:
          description: A list of contact group entries.
          example:
          - attributes:
              alias: Not on Sundays
            name: OnCall
          items:
            $ref: '#/components/schemas/UpdateContactGroup'
          type: array
      type: object
    BulkUpdateFolder:
      properties:
        entries:
          description: A list of folder entries.
          example:
          - remove_attributes:
            - tag_foobar
          items:
            $ref: '#/components/schemas/UpdateFolderEntry'
          type: array
      type: object
    BulkUpdateHost:
      properties:
        entries:
          description: A list of host entries.
          example:
          - attributes: {}
            host_name: example.com
          items:
            $ref: '#/components/schemas/UpdateHostEntry'
          type: array
      type: object
    BulkUpdateHostGroup:
      properties:
        entries:
          description: A list of host group entries.
          example:
          - attributes:
              alias: Windows Servers
            name: windows
          items:
            $ref: '#/components/schemas/UpdateHostGroup'
          type: array
      type: object
    BulkUpdateServiceGroup:
      properties:
        entries:
          description: A list of service group entries.
          example:
          - attributes:
              alias: Windows Servers
            name: windows
          items:
            $ref: '#/components/schemas/UpdateServiceGroup'
          type: array
      type: object
    Child:
      properties:
        type:
          default: child
      required:
      - type
      type: object
    ChildWith:
      properties:
        conditions:
          $ref: '#/components/schemas/HostConditions'
        host_choice:
          allOf:
          - $ref: '#/components/schemas/BIHostChoice'
          example:
            type: all_hosts
      required:
      - conditions
      - host_choice
      type: object
    ClusterCreateAttribute:
      properties:
        alias:
          description: A comment or description of this host
          type: string
        site:
          description: The site that should monitor this host.
          type: string
        contactgroups:
          allOf:
          - $ref: '#/components/schemas/HostContactGroup'
          description: Only members of the contact groups listed here have WATO permission
            to the host / folder. If you want, you can make those contact groups automatically
            also <b>monitoring contacts</b>. This is completely optional. Assignment
            of host to contact groups can be done by <a href='wato.py?mode=edit_ruleset&varname=host_contactgroups'>rules</a>
            as well.
        parents:
          description: A list of parents of this host.
          items:
            example: example.com
            pattern: '[-0-9a-zA-Z_.]+'
            type: string
          type: array
        ipaddress:
          description: An IPv4 address.
          type: string
        ipv6address:
          description: An IPv6 address.
          type: string
        additional_ipv4addresses:
          description: A list of IPv4 addresses.
          items:
            type: string
          type: array
        additional_ipv6addresses:
          description: A list of IPv6 addresses.
          items:
            type: string
          type: array
        snmp_community:
          allOf:
          - $ref: '#/components/schemas/SNMPCredentials'
          description: The SNMP access configuration. A configured SNMP v1/v2 community
            here will have precedence over any configured SNMP community rule. For
            this attribute to take effect, the attribute `tag_snmp_ds` needs to be
            set first.
        labels:
          additionalProperties:
            description: The host label value
            type: string
          description: With the help of labels you can flexibly group your hosts in
            order to refer to them later at other places in Check_MK, e.g. in rule
            chains. A label always consists of a combination of key and value in the
            format "key:value". A host can only have one value per key. Check_MK will
            not perform any validation on the labels you use.
          type: object
        network_scan:
          allOf:
          - $ref: '#/components/schemas/NetworkScan'
          description: Configuration for automatic network scan. Pings will besent
            to each IP address in the configured ranges to checkif a host is up or
            down. Each found host will be added tothe folder by it's hostname (if
            possible) or IP address.
        management_protocol:
          description: "The protocol used to connect to the management board.\n\n\
            Valid options are:\n\n * `none` - No management board\n * `snmp` - Connect\
            \ using SNMP\n * `ipmi` - Connect using IPMI\n"
          enum:
          - none
          - snmp
          - ipmi
          type: string
        management_address:
          description: Address (IPv4, IPv6 or hostname) under which the management
            board can be reached.
          type: string
        management_snmp_community:
          allOf:
          - $ref: '#/components/schemas/SNMPCredentials'
          description: SNMP credentials
          nullable: true
        management_ipmi_credentials:
          allOf:
          - $ref: '#/components/schemas/IPMIParameters'
          description: IPMI credentials
        locked_by:
          allOf:
          - $ref: '#/components/schemas/LockedBy'
          description: Identity of the entity which locked the locked_attributes.
            The identity is built out of the Site ID, the program name and the connection
            ID.
        locked_attributes:
          description: Name of host attributes which are locked in the UI.
          items:
            type: string
          type: array
        inventory_failed:
          description: Whether or not the last bulk discovery failed. It is set to
            True once it fails and unset in case a later discovery succeeds.
          example: false
          type: boolean
        tag_criticality:
          description: "Choices:\n\n * `\"prod\"`: Productive system\n\n * `\"critical\"\
            `: Business critical\n\n * `\"test\"`: Test system\n\n * `\"offline\"\
            `: Do not monitor this host"
          enum:
          - prod
          - critical
          - test
          - offline
          type: string
        tag_networking:
          description: "Choices:\n\n * `\"lan\"`: Local network (low latency)\n\n\
            \ * `\"wan\"`: WAN (high latency)\n\n * `\"dmz\"`: DMZ (low latency, secure\
            \ access)"
          enum:
          - lan
          - wan
          - dmz
          type: string
        tag_agent:
          description: "Choices:\n\n * `\"cmk-agent\"`: API integrations if configured,\
            \ else Checkmk agent\n\n * `\"all-agents\"`: Configured API integrations\
            \ and Checkmk agent\n\n * `\"special-agents\"`: Configured API integrations,\
            \ no Checkmk agent\n\n * `\"no-agent\"`: No API integrations, no Checkmk\
            \ agent"
          enum:
          - cmk-agent
          - all-agents
          - special-agents
          - no-agent
          type: string
        tag_piggyback:
          description: "By default every host has the piggyback data source <b>Use\
            \ piggyback data from other hosts if present</b>. In this case the <tt>Check_MK</tt>\
            \ service of this host processes the piggyback data but does not warn\
            \ if no piggyback data is available. The related discovered services would\
            \ become stale. If a host has configured <b>Always use and expect piggyback\
            \ data</b> for the piggyback data source then this host expects piggyback\
            \ data and the <tt>Check_MK</tt> service of this host warns if no piggyback\
            \ data is available. In the last case, ie. <b>Never use piggyback data</b>,\
            \ the <tt>Check_MK</tt> service does not process piggyback data at all\
            \ and ignores it if available.\n\nChoices:\n\n * `\"auto-piggyback\"`:\
            \ Use piggyback data from other hosts if present\n\n * `\"piggyback\"\
            `: Always use and expect piggyback data\n\n * `\"no-piggyback\"`: Never\
            \ use piggyback data"
          enum:
          - auto-piggyback
          - piggyback
          - no-piggyback
          type: string
        tag_snmp_ds:
          description: "Choices:\n\n * `\"no-snmp\"`: No SNMP\n\n * `\"snmp-v2\"`:\
            \ SNMP v2 or v3\n\n * `\"snmp-v1\"`: SNMP v1"
          enum:
          - no-snmp
          - snmp-v2
          - snmp-v1
          type: string
        tag_address_family:
          description: "Choices:\n\n * `\"ip-v4-only\"`: IPv4 only\n\n * `\"ip-v6-only\"\
            `: IPv6 only\n\n * `\"ip-v4v6\"`: IPv4/IPv6 dual-stack\n\n * `\"no-ip\"\
            `: No IP"
          enum:
          - ip-v4-only
          - ip-v6-only
          - ip-v4v6
          - no-ip
          type: string
      type: object
    CollectionItem:
      discriminator:
        mapping:
          link: '#/components/schemas/Link'
        propertyName: domainType
      oneOf:
      - $ref: '#/components/schemas/Link'
      properties: {}
      type: object
    ConcreteDisabledNotifications:
      properties:
        disable:
          description: Option if all notifications should be temporarily disabled
          type: boolean
        timerange:
          allOf:
          - $ref: '#/components/schemas/DateTimeRange'
          description: A custom timerange during which notifications are disabled
      type: object
    ConcreteHostTagGroup:
      properties:
        links:
          description: list of links to other resources.
          example: null
          items:
            $ref: '#/components/schemas/Link'
          type: array
        domainType:
          default: host_tag_group
          description: The domain type of the object.
        id:
          description: The unique identifier for this domain-object type.
          type: string
        title:
          description: A human readable title of this object. Can be used for user
            interfaces.
          type: string
        members:
          description: The container for external resources, like linked foreign objects
            or actions.
          type: object
        extensions:
          allOf:
          - $ref: '#/components/schemas/HostTagExtensions'
          description: Additional fields for objects of this type.
      required:
      - domainType
      - links
      type: object
    ConcreteTimePeriod:
      properties:
        alias:
          description: The alias of the time period
          example: alias
          type: string
        active_time_ranges:
          description: The days for which time ranges were specified
          example:
            day: all
            time_ranges:
            - end: '14:00'
              start: '12:00'
          items:
            $ref: '#/components/schemas/ConcreteTimeRangeActive'
          type: array
        exceptions:
          description: Specific day exclusions with their list of time ranges
          example:
          - date: '2020-01-01'
            time_ranges:
            - end: '18:00'
              start: '14:00'
          items:
            $ref: '#/components/schemas/ConcreteTimePeriodException'
          type: array
        exclude:
          description: The collection of time period aliases whose periods are excluded
          items:
            description: Name of excluding time period
            example: holidays
            type: string
          type: array
      type: object
    ConcreteTimePeriodException:
      properties:
        date:
          description: The date of the time period exception.8601 profile
          example: '2020-01-01'
          format: date
          type: string
        time_ranges:
          example: '[{''start'': ''14:00'', ''end'': ''18:00''}]'
          items:
            $ref: '#/components/schemas/ConcreteTimeRange'
          type: array
      type: object
    ConcreteTimeRange:
      properties:
        start:
          description: The hour of the time period.
          example: '14:00'
          format: time
          type: string
        end:
          description: The hour of the time period.
          example: '14:00'
          format: time
          type: string
      type: object
    ConcreteTimeRangeActive:
      properties:
        day:
          description: The day for which the time ranges are specified
          pattern: monday|tuesday|wednesday|thursday|friday|saturday|sunday
          type: string
        time_ranges:
          items:
            $ref: '#/components/schemas/ConcreteTimeRange'
          type: array
      type: object
    ConcreteUserContactOption:
      properties:
        email:
          description: The mail address of the user.
          example: user@example.com
          type: string
        fallback_contact:
          description: In case none of the notification rules handle a certain event
            a notification will be sent to the specified email
          type: boolean
      required:
      - email
      type: object
    ConcreteUserInterfaceAttributes:
      properties:
        interface_theme:
          description: The theme of the interface
          enum:
          - default
          - dark
          - light
          example: default
          type: string
        sidebar_position:
          description: The position of the sidebar
          enum:
          - left
          - right
          example: right
          type: string
        navigation_bar_icons:
          description: This option decides if icons in the navigation bar should show/hide
            the respective titles
          enum:
          - hide
          - show
          example: hide
          type: string
        mega_menu_icons:
          description: This option decides if colored icon should be shown foe every
            entry in the mega menus or alternatively only for the headlines (the 'topics')
          enum:
          - topic
          - entry
          example: topic
          type: string
        show_mode:
          description: This option decides what show mode should be used for unvisited
            menus. Alternatively, this option can also be used to enforce show more
            removing the three dots for all menus.
          enum:
          - default
          - default_show_less
          - default_show_more
          - enforce_show_more
          example: default
          type: string
      type: object
    ContactGroup:
      properties:
        links:
          description: list of links to other resources.
          example: null
          items:
            $ref: '#/components/schemas/Link'
          type: array
        domainType:
          default: contact_group
          description: The domain type of the object.
        id:
          description: The unique identifier for this domain-object type.
          type: string
        title:
          description: A human readable title of this object. Can be used for user
            interfaces.
          type: string
        members:
          description: The container for external resources, like linked foreign objects
            or actions.
          type: object
        extensions:
          description: All the attributes of the domain object.
          type: object
      required:
      - domainType
      - links
      type: object
    CreateClusterHost:
      properties:
        folder:
          description: 'The path name of the folder.


            Path delimiters can be either `~`, `/` or `\`. Please use the one most
            appropriate for your quoting/escaping needs. A good default choice is
            `~`.'
          example: /
          pattern: (?:(?:[~\\\/]|(?:[~\\\/][-_ a-zA-Z0-9.]+)+[~\\\/]?)|[0-9a-fA-F]{32})
          type: string
        host_name:
          description: The hostname of the cluster host.
          example: example.com
          pattern: '[-0-9a-zA-Z_.]+'
          type: string
        attributes:
          anyOf:
          - $ref: '#/components/schemas/ClusterCreateAttribute'
          - $ref: '#/components/schemas/CustomAttributes'
          - $ref: '#/components/schemas/TagGroupAttributes'
          description: Attributes to set on the newly created host.
          example:
            ipaddress: 192.168.0.123
        nodes:
          description: Nodes where the newly created host should be the cluster-container
            of.
          example:
          - host1
          - host2
          - host3
          items:
            description: The hostname or IP address itself.
            example: example.com
            pattern: '[-0-9a-zA-Z_.]+'
            type: string
          type: array
      required:
      - folder
      - host_name
      - nodes
      type: object
    CreateFolder:
      properties:
        name:
          description: The filesystem directory name (not path!) of the folder. No
            slashes are allowed.
          example: production
          pattern: '[^/]+'
          type: string
        title:
          description: The folder title as displayed in the user interface.
          example: Production Hosts
          type: string
        parent:
          description: 'The folder in which the new folder shall be placed in. The
            root-folder is specified by ''/''.


            Path delimiters can be either `~`, `/` or `\`. Please use the one most
            appropriate for your quoting/escaping needs. A good default choice is
            `~`.'
          example: /
          pattern: (?:(?:[~\\\/]|(?:[~\\\/][-_ a-zA-Z0-9.]+)+[~\\\/]?)|[0-9a-fA-F]{32})
          type: string
        attributes:
          anyOf:
          - $ref: '#/components/schemas/FolderCreateAttribute'
          - $ref: '#/components/schemas/CustomAttributes'
          - $ref: '#/components/schemas/TagGroupAttributes'
          description: Specific attributes to apply for all hosts in this folder (among
            other things).
          example:
            tag_criticality: prod
      required:
      - name
      - parent
      - title
      type: object
    CreateHost:
      properties:
        folder:
          description: 'The path name of the folder.


            Path delimiters can be either `~`, `/` or `\`. Please use the one most
            appropriate for your quoting/escaping needs. A good default choice is
            `~`.'
          example: /
          pattern: (?:(?:[~\\\/]|(?:[~\\\/][-_ a-zA-Z0-9.]+)+[~\\\/]?)|[0-9a-fA-F]{32})
          type: string
        host_name:
          description: The hostname or IP address of the host to be created.
          example: example.com
          pattern: '[-0-9a-zA-Z_.]+'
          type: string
        attributes:
          anyOf:
          - $ref: '#/components/schemas/HostCreateAttribute'
          - $ref: '#/components/schemas/CustomAttributes'
          - $ref: '#/components/schemas/TagGroupAttributes'
          description: Attributes to set on the newly created host.
          example:
            ipaddress: 192.168.0.123
      required:
      - folder
      - host_name
      type: object
    CreateHostDowntime:
      properties:
        start_time:
          description: The start datetime of the new downtime. The format has to conform
            to the ISO 8601 profile
          example: '2017-07-21T17:32:28Z'
          format: iso8601
          type: string
        end_time:
          description: The end datetime of the new downtime. The format has to conform
            to the ISO 8601 profile
          example: '2017-07-21T17:32:28Z'
          format: iso8601
          type: string
        recur:
          default: fixed
          description: 'The recurring mode of the new downtime. Available modes are:     *
            fixed     * hour     * day     * week     * second_week     * fourth_week     *
            weekday_start     * weekday_end     * day_of_month  This only works when
            using the Enterprise Editions. Defaults to ''fixed''.'
          enum: &id006
          - fixed
          - hour
          - day
          - week
          - second_week
          - fourth_week
          - weekday_start
          - weekday_end
          - day_of_month
          example: hour
          type: string
        duration:
          default: 0
          description: Duration in seconds. When set, the downtime does not begin
            automatically at a nominated time, but when a real problem status appears
            for the host. Consequencely, the start_time/end_time is only the time
            window in which the scheduled downtime can begin.
          example: 3600
          type: integer
        comment:
          example: Security updates
          type: string
        downtime_type:
          description: The type of downtime to create.
          enum: &id007
          - host
          - hostgroup
          - host_by_query
          example: host
          type: string
        host_name:
          description: The hostname or IP address itself.
          example: example.com
          pattern: '[-0-9a-zA-Z_.]+'
          type: string
      required:
      - downtime_type
      - end_time
      - host_name
      - start_time
      type: object
    CreateHostGroupDowntime:
      properties:
        start_time:
          description: The start datetime of the new downtime. The format has to conform
            to the ISO 8601 profile
          example: '2017-07-21T17:32:28Z'
          format: iso8601
          type: string
        end_time:
          description: The end datetime of the new downtime. The format has to conform
            to the ISO 8601 profile
          example: '2017-07-21T17:32:28Z'
          format: iso8601
          type: string
        recur:
          default: fixed
          description: 'The recurring mode of the new downtime. Available modes are:     *
            fixed     * hour     * day     * week     * second_week     * fourth_week     *
            weekday_start     * weekday_end     * day_of_month  This only works when
            using the Enterprise Editions. Defaults to ''fixed''.'
          enum: *id006
          example: hour
          type: string
        duration:
          default: 0
          description: Duration in seconds. When set, the downtime does not begin
            automatically at a nominated time, but when a real problem status appears
            for the host. Consequencely, the start_time/end_time is only the time
            window in which the scheduled downtime can begin.
          example: 3600
          type: integer
        comment:
          example: Security updates
          type: string
        downtime_type:
          description: The type of downtime to create.
          enum: *id007
          example: host
          type: string
        hostgroup_name:
          description: The name of the host group. A downtime will be scheduled for
            all hosts in this host group.
          example: windows
          type: string
      required:
      - downtime_type
      - end_time
      - hostgroup_name
      - start_time
      type: object
    CreateHostQueryDowntime:
      properties:
        start_time:
          description: The start datetime of the new downtime. The format has to conform
            to the ISO 8601 profile
          example: '2017-07-21T17:32:28Z'
          format: iso8601
          type: string
        end_time:
          description: The end datetime of the new downtime. The format has to conform
            to the ISO 8601 profile
          example: '2017-07-21T17:32:28Z'
          format: iso8601
          type: string
        recur:
          default: fixed
          description: 'The recurring mode of the new downtime. Available modes are:     *
            fixed     * hour     * day     * week     * second_week     * fourth_week     *
            weekday_start     * weekday_end     * day_of_month  This only works when
            using the Enterprise Editions. Defaults to ''fixed''.'
          enum: *id006
          example: hour
          type: string
        duration:
          default: 0
          description: Duration in seconds. When set, the downtime does not begin
            automatically at a nominated time, but when a real problem status appears
            for the host. Consequencely, the start_time/end_time is only the time
            window in which the scheduled downtime can begin.
          example: 3600
          type: integer
        comment:
          example: Security updates
          type: string
        downtime_type:
          description: The type of downtime to create.
          enum: *id007
          example: host
          type: string
        query:
          allOf:
          - $ref: '#/components/schemas/Expr'
          description: An query expression of the Livestatus 'hosts' table in nested
            dictionary form. If you want to use multiple expressions, nest them with
            the AND/OR operators.
          example: '{"op": "and", "expr": [{"op": "=", "left": "name", "right": "example.com"},
            {"op": "!=", "left": "state", "right": "0"}]}'
      required:
      - downtime_type
      - end_time
      - query
      - start_time
      type: object
    CreateHostRelatedDowntime:
      discriminator:
        mapping:
          host: '#/components/schemas/CreateHostDowntime'
          host_by_query: '#/components/schemas/CreateHostQueryDowntime'
          hostgroup: '#/components/schemas/CreateHostGroupDowntime'
        propertyName: downtime_type
      oneOf:
      - $ref: '#/components/schemas/CreateHostDowntime'
      - $ref: '#/components/schemas/CreateHostGroupDowntime'
      - $ref: '#/components/schemas/CreateHostQueryDowntime'
      properties: {}
      type: object
    CreateServiceDowntime:
      properties:
        start_time:
          description: The start datetime of the new downtime. The format has to conform
            to the ISO 8601 profile
          example: '2017-07-21T17:32:28Z'
          format: iso8601
          type: string
        end_time:
          description: The end datetime of the new downtime. The format has to conform
            to the ISO 8601 profile
          example: '2017-07-21T17:32:28Z'
          format: iso8601
          type: string
        recur:
          default: fixed
          description: 'The recurring mode of the new downtime. Available modes are:     *
            fixed     * hour     * day     * week     * second_week     * fourth_week     *
            weekday_start     * weekday_end     * day_of_month  This only works when
            using the Enterprise Editions. Defaults to ''fixed''.'
          enum: *id006
          example: hour
          type: string
        duration:
          default: 0
          description: Duration in seconds. When set, the downtime does not begin
            automatically at a nominated time, but when a real problem status appears
            for the service. Consequencely, the start_time/end_time is only the time
            window in which the scheduled downtime can begin.
          example: 3600
          type: integer
        comment:
          example: Security updates
          type: string
        downtime_type:
          description: The type of downtime to create.
          enum: &id008
          - service
          - servicegroup
          - service_by_query
          example: service
          type: string
        host_name:
          description: The hostname or IP address itself.
          example: example.com
          pattern: '[-0-9a-zA-Z_.]+'
          type: string
        service_descriptions:
          description: The service description of the service, whose problems shall
            be acknowledged.
          example:
          - CPU utilization
          - Memory
          items:
            type: string
          type: array
          uniqueItems: true
      required:
      - downtime_type
      - end_time
      - host_name
      - service_descriptions
      - start_time
      type: object
    CreateServiceGroupDowntime:
      properties:
        start_time:
          description: The start datetime of the new downtime. The format has to conform
            to the ISO 8601 profile
          example: '2017-07-21T17:32:28Z'
          format: iso8601
          type: string
        end_time:
          description: The end datetime of the new downtime. The format has to conform
            to the ISO 8601 profile
          example: '2017-07-21T17:32:28Z'
          format: iso8601
          type: string
        recur:
          default: fixed
          description: 'The recurring mode of the new downtime. Available modes are:     *
            fixed     * hour     * day     * week     * second_week     * fourth_week     *
            weekday_start     * weekday_end     * day_of_month  This only works when
            using the Enterprise Editions. Defaults to ''fixed''.'
          enum: *id006
          example: hour
          type: string
        duration:
          default: 0
          description: Duration in seconds. When set, the downtime does not begin
            automatically at a nominated time, but when a real problem status appears
            for the host. Consequencely, the start_time/end_time is only the time
            window in which the scheduled downtime can begin.
          example: 3600
          type: integer
        comment:
          example: Security updates
          type: string
        downtime_type:
          description: The type of downtime to create.
          enum: *id008
          example: service
          type: string
        servicegroup_name:
          description: The name of the service group. Any host having a service in
            this group will be A downtime will be scheduled for all hosts in this
            group.
          example: windows
          type: string
      required:
      - downtime_type
      - end_time
      - servicegroup_name
      - start_time
      type: object
    CreateServiceQueryDowntime:
      properties:
        start_time:
          description: The start datetime of the new downtime. The format has to conform
            to the ISO 8601 profile
          example: '2017-07-21T17:32:28Z'
          format: iso8601
          type: string
        end_time:
          description: The end datetime of the new downtime. The format has to conform
            to the ISO 8601 profile
          example: '2017-07-21T17:32:28Z'
          format: iso8601
          type: string
        recur:
          default: fixed
          description: 'The recurring mode of the new downtime. Available modes are:     *
            fixed     * hour     * day     * week     * second_week     * fourth_week     *
            weekday_start     * weekday_end     * day_of_month  This only works when
            using the Enterprise Editions. Defaults to ''fixed''.'
          enum: *id006
          example: hour
          type: string
        duration:
          default: 0
          description: Duration in seconds. When set, the downtime does not begin
            automatically at a nominated time, but when a real problem status appears
            for the service. Consequencely, the start_time/end_time is only the time
            window in which the scheduled downtime can begin.
          example: 3600
          type: integer
        comment:
          example: Security updates
          type: string
        downtime_type:
          description: The type of downtime to create.
          enum: *id008
          example: service
          type: string
        query:
          allOf:
          - $ref: '#/components/schemas/Expr'
          description: An query expression of the Livestatus 'services' table in nested
            dictionary form. If you want to use multiple expressions, nest them with
            the AND/OR operators.
          example: '{"op": "and", "expr": [{"op": "=", "left": "name", "right": "example.com"},
            {"op": "!=", "left": "state", "right": "0"}]}'
      required:
      - downtime_type
      - end_time
      - query
      - start_time
      type: object
    CreateServiceRelatedDowntime:
      discriminator:
        mapping:
          service: '#/components/schemas/CreateServiceDowntime'
          service_by_query: '#/components/schemas/CreateServiceQueryDowntime'
          servicegroup: '#/components/schemas/CreateServiceGroupDowntime'
        propertyName: downtime_type
      oneOf:
      - $ref: '#/components/schemas/CreateServiceDowntime'
      - $ref: '#/components/schemas/CreateServiceGroupDowntime'
      - $ref: '#/components/schemas/CreateServiceQueryDowntime'
      properties: {}
      type: object
    CreateUser:
      additionalProperties: true
      properties:
        username:
          description: An unique username for the user
          example: cmkuser
          type: string
        fullname:
          description: The alias or full name of the user
          example: Mathias Kettner
          type: string
        auth_option:
          allOf:
          - $ref: '#/components/schemas/AuthOption'
          description: Authentication option for the user
          example:
            auth_type: password
            password: password
        disable_login:
          default: false
          description: The user can be blocked from login but will remain part of
            the site. The disabling does not affect notification and alerts.
          example: false
          type: boolean
        contact_options:
          allOf:
          - $ref: '#/components/schemas/UserContactOption'
          description: Contact settings for the user
          example:
            email: user@example.com
        pager_address:
          default: ''
          description: ''
          example: ''
          type: string
        idle_timeout:
          allOf:
          - $ref: '#/components/schemas/IdleOption'
          description: Idle timeout for the user. Per default, the global configuration
            is used.
          example:
            option: global
        roles:
          description: The list of assigned roles to the user
          example:
          - user
          items:
            description: A user role
            example: user
            type: string
          type: array
        authorized_sites:
          description: The names of the sites the user is authorized to handle
          example:
          - heute
          items:
            type: string
          type: array
        contactgroups:
          description: Assign the user to one or multiple contact groups. If no contact
            group is specified then no monitoring contact will be created for the
            user.
          example:
          - all
          items:
            description: Assign the user to one or multiple contact groups
            example: all
            type: string
          type: array
        disable_notifications:
          allOf:
          - $ref: '#/components/schemas/DisabledNotifications'
          description: ''
          example:
            disable: false
        language:
          description: Configure the language to be used by the user in the user interface.
            Omitting this will configure the default language.
          enum:
          - de
          - en
          - ro
          example: en
          type: string
        interface_options:
          allOf:
          - $ref: '#/components/schemas/UserInterfaceAttributes'
          default:
            interface_theme: default
            sidebar_position: right
            navigation_bar_icons: hide
            mega_menu_icons: topic
            show_mode: default
          description: ''
          example:
            interface_theme: dark
      required:
      - fullname
      - username
      type: object
    CustomAttributes:
      additionalProperties:
        description: Each tag is a mapping of string to string
        type: string
      properties: {}
      type: object
    CustomTimeRange:
      properties:
        start_time:
          description: The start datetime of the time period. The format has to conform
            to the ISO 8601 profile
          example: '2017-07-21T17:32:28Z'
          format: iso8601
          type: string
        end_time:
          description: The end datetime of the time period. The format has to conform
            to the ISO 8601 profile
          example: '2017-07-21T17:32:28Z'
          format: iso8601
          type: string
      required:
      - end_time
      - start_time
      type: object
    CustomUserAttributes:
      additionalProperties:
        description: Each tag is a mapping of string to string
        type: string
      properties: {}
      type: object
    DateTimeRange:
      properties:
        start_time:
          description: The start datetime of the time period. The format conforms
            to the ISO 8601 profile
          example: '2017-07-21T17:32:28+00:00'
          format: date-time
          type: string
        end_time:
          description: The end datetime of the time period. The format conforms to
            the ISO 8601 profile
          example: '2017-07-21T17:32:28+00:00'
          format: iso8601
          type: string
      required:
      - start_time
      type: object
    DeleteDowntime:
      discriminator:
        mapping:
          by_id: '#/components/schemas/DeleteDowntimeById'
          params: '#/components/schemas/DeleteDowntimeByName'
          query: '#/components/schemas/DeleteDowntimeByQuery'
        propertyName: delete_type
      oneOf:
      - $ref: '#/components/schemas/DeleteDowntimeById'
      - $ref: '#/components/schemas/DeleteDowntimeByName'
      - $ref: '#/components/schemas/DeleteDowntimeByQuery'
      properties: {}
      type: object
    DeleteDowntimeById:
      properties:
        delete_type:
          description: The option how to delete a downtime.
          enum: &id009
          - params
          - query
          - by_id
          example: params
          type: string
        downtime_id:
          description: The id of the downtime
          example: '54'
          type: string
      required:
      - delete_type
      - downtime_id
      type: object
    DeleteDowntimeByName:
      properties:
        delete_type:
          description: The option how to delete a downtime.
          enum: *id009
          example: params
          type: string
        host_name:
          description: If set alone, then all downtimes of the host will be removed.
          example: example.com
          pattern: '[-0-9a-zA-Z_.]+'
          type: string
        service_descriptions:
          description: If set, the downtimes of the listed services of the specified
            host will be removed. If a service has multiple downtimes then all will
            be removed
          example:
          - CPU load
          - Memory
          items:
            example: CPU utilization
            type: string
          type: array
      required:
      - delete_type
      - host_name
      type: object
    DeleteDowntimeByQuery:
      properties:
        delete_type:
          description: The option how to delete a downtime.
          enum: *id009
          example: params
          type: string
        query:
          allOf:
          - $ref: '#/components/schemas/Expr'
          description: An query expression of the Livestatus 'downtimes' table in
            nested dictionary form. If you want to use multiple expressions, nest
            them with the AND/OR operators.
          example: '{"op": "and", "expr": [{"op": "=", "left": "name", "right": "example.com"},
            {"op": "!=", "left": "state", "right": "0"}]}'
      required:
      - delete_type
      - query
      type: object
    DirectMapping:
      properties:
        hostname:
          description: The hostname to be replaced.
          type: string
        replace_with:
          description: The replacement string.
          type: string
      required:
      - hostname
      - replace_with
      type: object
    DisabledNotifications:
      properties:
        disable:
          description: Option if all notifications should be temporarily disabled
          example: false
          type: boolean
        timerange:
          allOf:
          - $ref: '#/components/schemas/CustomTimeRange'
          description: A custom timerange during which notifications are disabled
          example:
            end_time: '2017-07-21T18:32:28Z'
            start_time: '2017-07-21T17:32:28Z'
      type: object
    DiscoverServices:
      properties:
        host_name:
          description: The host of the service which shall be updated.
          example: example.com
          pattern: '[-0-9a-zA-Z_.]+'
          type: string
        mode:
          default: fix_all
          description: "The mode of the discovery action. Can be one of:\n\n     *\
            \ `new` - Add undecided services to monitoring\n     * `remove` - Remove\
            \ vanished services\n     * `fix_all` - Add undecided services and new\
            \ host labels, remove vanished services\n     * `refresh` - Update inforomation\
            \ from host, then remove all existing and add all just found services\
            \ and host labels\n     * `only_host_labels` - Update host labels\n  \
            \  "
          enum:
          - new
          - remove
          - fix_all
          - refresh
          - only_host_labels
          example: refresh
          type: string
      required:
      - host_name
      type: object
    DiscoverServicesDeprecated:
      properties:
        mode:
          default: fix_all
          description: "The mode of the discovery action. Can be one of:\n\n     *\
            \ `new` - Add undecided services to monitoring\n     * `remove` - Remove\
            \ vanished services\n     * `fix_all` - Add undecided services and new\
            \ host labels, remove vanished services\n     * `refresh` - Update inforomation\
            \ from host, then remove all existing and add all just found services\
            \ and host labels\n     * `only_host_labels` - Update host labels\n  \
            \  "
          enum:
          - new
          - remove
          - fix_all
          - refresh
          - only_host_labels
          example: refresh
          type: string
      type: object
    DiscoveryBackgroundJobStatusObject:
      properties:
        links:
          description: list of links to other resources.
          example: null
          items:
            $ref: '#/components/schemas/Link'
          type: array
        domainType:
          default: discovery_run
          description: The domain type of the object
        id:
          description: The unique identifier for this domain-object type.
          type: string
        title:
          description: A human readable title of this object. Can be used for user
            interfaces.
          type: string
        members:
          description: The container for external resources, like linked foreign objects
            or actions.
          type: object
        extensions:
          allOf:
          - $ref: '#/components/schemas/BackgroundJobStatus'
          description: The attributes of the background job
      required:
      - links
      type: object
    DomainObject:
      properties:
        links:
          description: list of links to other resources.
          example: null
          items:
            $ref: '#/components/schemas/Link'
          type: array
        domainType:
          description: The "domain-type" of the object.
          type: string
        id:
          description: The unique identifier for this domain-object type.
          type: string
        title:
          description: A human readable title of this object. Can be used for user
            interfaces.
          type: string
        members:
          description: The container for external resources, like linked foreign objects
            or actions.
          type: object
        extensions:
          description: All the attributes of the domain object.
          type: object
      required:
      - domainType
      - links
      type: object
    DomainObjectCollection:
      properties:
        links:
          description: list of links to other resources.
          example: null
          items:
            $ref: '#/components/schemas/Link'
          type: array
        id:
          default: all
          description: The name of this collection.
          type: string
        domainType:
          description: The domain type of the objects in the collection.
          type: string
        title:
          description: A human readable title of this object. Can be used for user
            interfaces.
          type: string
        value:
          description: The collection itself. Each entry in here is part of the collection.
          items:
            $ref: '#/components/schemas/CollectionItem'
          type: array
        extensions:
          description: Additional attributes alongside the collection.
          type: object
      required:
      - links
      type: object
    Expr:
      discriminator:
        mapping:
          '!<': '#/components/schemas/BinaryExpr'
          '!<=': '#/components/schemas/BinaryExpr'
          '!=': '#/components/schemas/BinaryExpr'
          '!>': '#/components/schemas/BinaryExpr'
          '!>=': '#/components/schemas/BinaryExpr'
          '!~': '#/components/schemas/BinaryExpr'
          '!~~': '#/components/schemas/BinaryExpr'
          <: '#/components/schemas/BinaryExpr'
          <=: '#/components/schemas/BinaryExpr'
          '=': '#/components/schemas/BinaryExpr'
          '>': '#/components/schemas/BinaryExpr'
          '>=': '#/components/schemas/BinaryExpr'
          and: '#/components/schemas/LogicalExpr'
          not: '#/components/schemas/NotExpr'
          or: '#/components/schemas/LogicalExpr'
          '~': '#/components/schemas/BinaryExpr'
          ~~: '#/components/schemas/BinaryExpr'
        propertyName: op
      oneOf:
      - $ref: '#/components/schemas/LogicalExpr'
      - $ref: '#/components/schemas/LogicalExpr'
      - $ref: '#/components/schemas/NotExpr'
      - $ref: '#/components/schemas/BinaryExpr'
      - $ref: '#/components/schemas/BinaryExpr'
      - $ref: '#/components/schemas/BinaryExpr'
      - $ref: '#/components/schemas/BinaryExpr'
      - $ref: '#/components/schemas/BinaryExpr'
      - $ref: '#/components/schemas/BinaryExpr'
      - $ref: '#/components/schemas/BinaryExpr'
      - $ref: '#/components/schemas/BinaryExpr'
      - $ref: '#/components/schemas/BinaryExpr'
      - $ref: '#/components/schemas/BinaryExpr'
      - $ref: '#/components/schemas/BinaryExpr'
      - $ref: '#/components/schemas/BinaryExpr'
      - $ref: '#/components/schemas/BinaryExpr'
      - $ref: '#/components/schemas/BinaryExpr'
      properties: {}
      type: object
    FailedHosts:
      properties:
        succeeded_hosts:
          allOf:
          - $ref: '#/components/schemas/HostConfigCollection'
          description: The list of succeeded host objects
        failed_hosts:
          additionalProperties:
            items:
              description: The error messages
              type: string
            type: array
          description: Detailed error messages on hosts failing the action
          type: object
      type: object
    Folder:
      properties:
        links:
          description: list of links to other resources.
          example: null
          items:
            $ref: '#/components/schemas/Link'
          type: array
        domainType:
          default: folder_config
          description: The domain type of the object.
        id:
          description: The full path of the folder, tilde-separated.
          type: string
        title:
          description: The human readable title for this folder.
          type: string
        members:
          allOf:
          - $ref: '#/components/schemas/FolderMembers'
          description: Specific collections or actions applicable to this object.
        extensions:
          allOf:
          - $ref: '#/components/schemas/FolderExtensions'
          description: Data and Meta-Data of this object.
      required:
      - links
      type: object
    FolderCollection:
      properties:
        links:
          description: list of links to other resources.
          example: null
          items:
            $ref: '#/components/schemas/Link'
          type: array
        id:
          default: all
          description: The name of this collection.
          type: string
        domainType:
          default: folder_config
          description: The domain type of the objects in the collection.
        title:
          description: A human readable title of this object. Can be used for user
            interfaces.
          type: string
        value:
          description: A list of folder objects.
          items:
            $ref: '#/components/schemas/Folder'
          type: array
        extensions:
          description: Additional attributes alongside the collection.
          type: object
      required:
      - links
      type: object
    FolderCreateAttribute:
      properties:
        site:
          description: The site that should monitor this host.
          type: string
        contactgroups:
          allOf:
          - $ref: '#/components/schemas/HostContactGroup'
          description: Only members of the contact groups listed here have WATO permission
            to the host / folder. If you want, you can make those contact groups automatically
            also <b>monitoring contacts</b>. This is completely optional. Assignment
            of host to contact groups can be done by <a href='wato.py?mode=edit_ruleset&varname=host_contactgroups'>rules</a>
            as well.
        parents:
          description: A list of parents of this host.
          items:
            example: example.com
            pattern: '[-0-9a-zA-Z_.]+'
            type: string
          type: array
        snmp_community:
          allOf:
          - $ref: '#/components/schemas/SNMPCredentials'
          description: The SNMP access configuration. A configured SNMP v1/v2 community
            here will have precedence over any configured SNMP community rule. For
            this attribute to take effect, the attribute `tag_snmp_ds` needs to be
            set first.
        labels:
          additionalProperties:
            description: The host label value
            type: string
          description: With the help of labels you can flexibly group your hosts in
            order to refer to them later at other places in Check_MK, e.g. in rule
            chains. A label always consists of a combination of key and value in the
            format "key:value". A host can only have one value per key. Check_MK will
            not perform any validation on the labels you use.
          type: object
        network_scan:
          allOf:
          - $ref: '#/components/schemas/NetworkScan'
          description: Configuration for automatic network scan. Pings will besent
            to each IP address in the configured ranges to checkif a host is up or
            down. Each found host will be added tothe folder by it's hostname (if
            possible) or IP address.
        management_protocol:
          description: "The protocol used to connect to the management board.\n\n\
            Valid options are:\n\n * `none` - No management board\n * `snmp` - Connect\
            \ using SNMP\n * `ipmi` - Connect using IPMI\n"
          enum:
          - none
          - snmp
          - ipmi
          type: string
        management_snmp_community:
          allOf:
          - $ref: '#/components/schemas/SNMPCredentials'
          description: SNMP credentials
          nullable: true
        management_ipmi_credentials:
          allOf:
          - $ref: '#/components/schemas/IPMIParameters'
          description: IPMI credentials
        tag_criticality:
          description: "Choices:\n\n * `\"prod\"`: Productive system\n\n * `\"critical\"\
            `: Business critical\n\n * `\"test\"`: Test system\n\n * `\"offline\"\
            `: Do not monitor this host"
          enum:
          - prod
          - critical
          - test
          - offline
          type: string
        tag_networking:
          description: "Choices:\n\n * `\"lan\"`: Local network (low latency)\n\n\
            \ * `\"wan\"`: WAN (high latency)\n\n * `\"dmz\"`: DMZ (low latency, secure\
            \ access)"
          enum:
          - lan
          - wan
          - dmz
          type: string
        tag_agent:
          description: "Choices:\n\n * `\"cmk-agent\"`: API integrations if configured,\
            \ else Checkmk agent\n\n * `\"all-agents\"`: Configured API integrations\
            \ and Checkmk agent\n\n * `\"special-agents\"`: Configured API integrations,\
            \ no Checkmk agent\n\n * `\"no-agent\"`: No API integrations, no Checkmk\
            \ agent"
          enum:
          - cmk-agent
          - all-agents
          - special-agents
          - no-agent
          type: string
        tag_piggyback:
          description: "By default every host has the piggyback data source <b>Use\
            \ piggyback data from other hosts if present</b>. In this case the <tt>Check_MK</tt>\
            \ service of this host processes the piggyback data but does not warn\
            \ if no piggyback data is available. The related discovered services would\
            \ become stale. If a host has configured <b>Always use and expect piggyback\
            \ data</b> for the piggyback data source then this host expects piggyback\
            \ data and the <tt>Check_MK</tt> service of this host warns if no piggyback\
            \ data is available. In the last case, ie. <b>Never use piggyback data</b>,\
            \ the <tt>Check_MK</tt> service does not process piggyback data at all\
            \ and ignores it if available.\n\nChoices:\n\n * `\"auto-piggyback\"`:\
            \ Use piggyback data from other hosts if present\n\n * `\"piggyback\"\
            `: Always use and expect piggyback data\n\n * `\"no-piggyback\"`: Never\
            \ use piggyback data"
          enum:
          - auto-piggyback
          - piggyback
          - no-piggyback
          type: string
        tag_snmp_ds:
          description: "Choices:\n\n * `\"no-snmp\"`: No SNMP\n\n * `\"snmp-v2\"`:\
            \ SNMP v2 or v3\n\n * `\"snmp-v1\"`: SNMP v1"
          enum:
          - no-snmp
          - snmp-v2
          - snmp-v1
          type: string
        tag_address_family:
          description: "Choices:\n\n * `\"ip-v4-only\"`: IPv4 only\n\n * `\"ip-v6-only\"\
            `: IPv6 only\n\n * `\"ip-v4v6\"`: IPv4/IPv6 dual-stack\n\n * `\"no-ip\"\
            `: No IP"
          enum:
          - ip-v4-only
          - ip-v6-only
          - ip-v4v6
          - no-ip
          type: string
      type: object
    FolderExtensions:
      properties:
        path:
          description: The full path of this folder, slash delimited.
          type: string
        attributes:
          anyOf:
          - $ref: '#/components/schemas/FolderViewAttribute'
          - $ref: '#/components/schemas/CustomAttributes'
          - $ref: '#/components/schemas/TagGroupAttributes'
          description: The folder's attributes. Hosts placed in this folder will inherit
            these attributes.
          example: null
      type: object
    FolderMembers:
      properties:
        hosts:
          allOf:
          - $ref: '#/components/schemas/ObjectCollectionMember'
          description: A list of links pointing to the actual host-resources.
        move:
          allOf:
          - $ref: '#/components/schemas/ObjectActionMember'
          description: An action which triggers the move of this folder to another
            folder.
      type: object
    FolderUpdateAttribute:
      properties:
        site:
          description: The site that should monitor this host.
          type: string
        contactgroups:
          allOf:
          - $ref: '#/components/schemas/HostContactGroup'
          description: Only members of the contact groups listed here have WATO permission
            to the host / folder. If you want, you can make those contact groups automatically
            also <b>monitoring contacts</b>. This is completely optional. Assignment
            of host to contact groups can be done by <a href='wato.py?mode=edit_ruleset&varname=host_contactgroups'>rules</a>
            as well.
        parents:
          description: A list of parents of this host.
          items:
            example: example.com
            pattern: '[-0-9a-zA-Z_.]+'
            type: string
          type: array
        snmp_community:
          allOf:
          - $ref: '#/components/schemas/SNMPCredentials'
          description: The SNMP access configuration. A configured SNMP v1/v2 community
            here will have precedence over any configured SNMP community rule. For
            this attribute to take effect, the attribute `tag_snmp_ds` needs to be
            set first.
        labels:
          additionalProperties:
            description: The host label value
            type: string
          description: With the help of labels you can flexibly group your hosts in
            order to refer to them later at other places in Check_MK, e.g. in rule
            chains. A label always consists of a combination of key and value in the
            format "key:value". A host can only have one value per key. Check_MK will
            not perform any validation on the labels you use.
          type: object
        network_scan:
          allOf:
          - $ref: '#/components/schemas/NetworkScan'
          description: Configuration for automatic network scan. Pings will besent
            to each IP address in the configured ranges to checkif a host is up or
            down. Each found host will be added tothe folder by it's hostname (if
            possible) or IP address.
        management_protocol:
          description: "The protocol used to connect to the management board.\n\n\
            Valid options are:\n\n * `none` - No management board\n * `snmp` - Connect\
            \ using SNMP\n * `ipmi` - Connect using IPMI\n"
          enum:
          - none
          - snmp
          - ipmi
          type: string
        management_snmp_community:
          allOf:
          - $ref: '#/components/schemas/SNMPCredentials'
          description: SNMP credentials
          nullable: true
        management_ipmi_credentials:
          allOf:
          - $ref: '#/components/schemas/IPMIParameters'
          description: IPMI credentials
        tag_criticality:
          description: "Choices:\n\n * `\"prod\"`: Productive system\n\n * `\"critical\"\
            `: Business critical\n\n * `\"test\"`: Test system\n\n * `\"offline\"\
            `: Do not monitor this host"
          enum:
          - prod
          - critical
          - test
          - offline
          type: string
        tag_networking:
          description: "Choices:\n\n * `\"lan\"`: Local network (low latency)\n\n\
            \ * `\"wan\"`: WAN (high latency)\n\n * `\"dmz\"`: DMZ (low latency, secure\
            \ access)"
          enum:
          - lan
          - wan
          - dmz
          type: string
        tag_agent:
          description: "Choices:\n\n * `\"cmk-agent\"`: API integrations if configured,\
            \ else Checkmk agent\n\n * `\"all-agents\"`: Configured API integrations\
            \ and Checkmk agent\n\n * `\"special-agents\"`: Configured API integrations,\
            \ no Checkmk agent\n\n * `\"no-agent\"`: No API integrations, no Checkmk\
            \ agent"
          enum:
          - cmk-agent
          - all-agents
          - special-agents
          - no-agent
          type: string
        tag_piggyback:
          description: "By default every host has the piggyback data source <b>Use\
            \ piggyback data from other hosts if present</b>. In this case the <tt>Check_MK</tt>\
            \ service of this host processes the piggyback data but does not warn\
            \ if no piggyback data is available. The related discovered services would\
            \ become stale. If a host has configured <b>Always use and expect piggyback\
            \ data</b> for the piggyback data source then this host expects piggyback\
            \ data and the <tt>Check_MK</tt> service of this host warns if no piggyback\
            \ data is available. In the last case, ie. <b>Never use piggyback data</b>,\
            \ the <tt>Check_MK</tt> service does not process piggyback data at all\
            \ and ignores it if available.\n\nChoices:\n\n * `\"auto-piggyback\"`:\
            \ Use piggyback data from other hosts if present\n\n * `\"piggyback\"\
            `: Always use and expect piggyback data\n\n * `\"no-piggyback\"`: Never\
            \ use piggyback data"
          enum:
          - auto-piggyback
          - piggyback
          - no-piggyback
          type: string
        tag_snmp_ds:
          description: "Choices:\n\n * `\"no-snmp\"`: No SNMP\n\n * `\"snmp-v2\"`:\
            \ SNMP v2 or v3\n\n * `\"snmp-v1\"`: SNMP v1"
          enum:
          - no-snmp
          - snmp-v2
          - snmp-v1
          type: string
        tag_address_family:
          description: "Choices:\n\n * `\"ip-v4-only\"`: IPv4 only\n\n * `\"ip-v6-only\"\
            `: IPv6 only\n\n * `\"ip-v4v6\"`: IPv4/IPv6 dual-stack\n\n * `\"no-ip\"\
            `: No IP"
          enum:
          - ip-v4-only
          - ip-v6-only
          - ip-v4v6
          - no-ip
          type: string
      type: object
    FolderViewAttribute:
      properties:
        site:
          description: The site that should monitor this host.
          type: string
        contactgroups:
          allOf:
          - $ref: '#/components/schemas/HostContactGroup'
          description: Only members of the contact groups listed here have WATO permission
            to the host / folder. If you want, you can make those contact groups automatically
            also <b>monitoring contacts</b>. This is completely optional. Assignment
            of host to contact groups can be done by <a href='wato.py?mode=edit_ruleset&varname=host_contactgroups'>rules</a>
            as well.
        parents:
          description: A list of parents of this host.
          items:
            example: example.com
            pattern: '[-0-9a-zA-Z_.]+'
            type: string
          type: array
        snmp_community:
          allOf:
          - $ref: '#/components/schemas/SNMPCredentials'
          description: The SNMP access configuration. A configured SNMP v1/v2 community
            here will have precedence over any configured SNMP community rule. For
            this attribute to take effect, the attribute `tag_snmp_ds` needs to be
            set first.
        labels:
          additionalProperties:
            description: The host label value
            type: string
          description: With the help of labels you can flexibly group your hosts in
            order to refer to them later at other places in Check_MK, e.g. in rule
            chains. A label always consists of a combination of key and value in the
            format "key:value". A host can only have one value per key. Check_MK will
            not perform any validation on the labels you use.
          type: object
        network_scan:
          allOf:
          - $ref: '#/components/schemas/NetworkScan'
          description: Configuration for automatic network scan. Pings will besent
            to each IP address in the configured ranges to checkif a host is up or
            down. Each found host will be added tothe folder by it's hostname (if
            possible) or IP address.
        network_scan_result:
          allOf:
          - $ref: '#/components/schemas/NetworkScanResult'
          description: Read only access to the network scan result
        management_protocol:
          description: "The protocol used to connect to the management board.\n\n\
            Valid options are:\n\n * `none` - No management board\n * `snmp` - Connect\
            \ using SNMP\n * `ipmi` - Connect using IPMI\n"
          enum:
          - none
          - snmp
          - ipmi
          type: string
        management_snmp_community:
          allOf:
          - $ref: '#/components/schemas/SNMPCredentials'
          description: SNMP credentials
          nullable: true
        management_ipmi_credentials:
          allOf:
          - $ref: '#/components/schemas/IPMIParameters'
          description: IPMI credentials
        meta_data:
          allOf:
          - $ref: '#/components/schemas/MetaData'
          description: Read only access to configured metadata.
        tag_criticality:
          description: "Choices:\n\n * `\"prod\"`: Productive system\n\n * `\"critical\"\
            `: Business critical\n\n * `\"test\"`: Test system\n\n * `\"offline\"\
            `: Do not monitor this host"
          enum:
          - prod
          - critical
          - test
          - offline
          type: string
        tag_networking:
          description: "Choices:\n\n * `\"lan\"`: Local network (low latency)\n\n\
            \ * `\"wan\"`: WAN (high latency)\n\n * `\"dmz\"`: DMZ (low latency, secure\
            \ access)"
          enum:
          - lan
          - wan
          - dmz
          type: string
        tag_agent:
          description: "Choices:\n\n * `\"cmk-agent\"`: API integrations if configured,\
            \ else Checkmk agent\n\n * `\"all-agents\"`: Configured API integrations\
            \ and Checkmk agent\n\n * `\"special-agents\"`: Configured API integrations,\
            \ no Checkmk agent\n\n * `\"no-agent\"`: No API integrations, no Checkmk\
            \ agent"
          enum:
          - cmk-agent
          - all-agents
          - special-agents
          - no-agent
          type: string
        tag_piggyback:
          description: "By default every host has the piggyback data source <b>Use\
            \ piggyback data from other hosts if present</b>. In this case the <tt>Check_MK</tt>\
            \ service of this host processes the piggyback data but does not warn\
            \ if no piggyback data is available. The related discovered services would\
            \ become stale. If a host has configured <b>Always use and expect piggyback\
            \ data</b> for the piggyback data source then this host expects piggyback\
            \ data and the <tt>Check_MK</tt> service of this host warns if no piggyback\
            \ data is available. In the last case, ie. <b>Never use piggyback data</b>,\
            \ the <tt>Check_MK</tt> service does not process piggyback data at all\
            \ and ignores it if available.\n\nChoices:\n\n * `\"auto-piggyback\"`:\
            \ Use piggyback data from other hosts if present\n\n * `\"piggyback\"\
            `: Always use and expect piggyback data\n\n * `\"no-piggyback\"`: Never\
            \ use piggyback data"
          enum:
          - auto-piggyback
          - piggyback
          - no-piggyback
          type: string
        tag_snmp_ds:
          description: "Choices:\n\n * `\"no-snmp\"`: No SNMP\n\n * `\"snmp-v2\"`:\
            \ SNMP v2 or v3\n\n * `\"snmp-v1\"`: SNMP v1"
          enum:
          - no-snmp
          - snmp-v2
          - snmp-v1
          type: string
        tag_address_family:
          description: "Choices:\n\n * `\"ip-v4-only\"`: IPv4 only\n\n * `\"ip-v6-only\"\
            `: IPv6 only\n\n * `\"ip-v4v6\"`: IPv4/IPv6 dual-stack\n\n * `\"no-ip\"\
            `: No IP"
          enum:
          - ip-v4-only
          - ip-v6-only
          - ip-v4v6
          - no-ip
          type: string
      type: object
    Host:
      properties:
        type:
          default: host
      required:
      - type
      type: object
    HostConditions:
      properties:
        host_folder:
          example: servers/groupA
          type: string
        host_labels:
          example: &id010
            db: mssql
          type: object
        host_tags:
          example: &id011 {}
          type: object
        host_choice:
          allOf:
          - $ref: '#/components/schemas/BIHostChoice'
          example: &id012
            type: all_hosts
      required:
      - host_choice
      - host_folder
      - host_labels
      - host_tags
      type: object
    HostConfig:
      properties:
        links:
          description: list of links to other resources.
          example: null
          items:
            $ref: '#/components/schemas/Link'
          type: array
        domainType:
          default: host_config
          description: The domain type of the object.
        id:
          description: The unique identifier for this domain-object type.
          type: string
        title:
          description: A human readable title of this object. Can be used for user
            interfaces.
          type: string
        members:
          allOf:
          - $ref: '#/components/schemas/HostMembers'
          description: All the members of the host object.
        extensions:
          allOf:
          - $ref: '#/components/schemas/HostExtensions'
          description: All the data and metadata of this host.
      required:
      - domainType
      - links
      type: object
    HostConfigCollection:
      properties:
        links:
          description: list of links to other resources.
          example: null
          items:
            $ref: '#/components/schemas/Link'
          type: array
        id:
          default: all
          description: The name of this collection.
          type: string
        domainType:
          default: host_config
          description: The domain type of the objects in the collection.
        title:
          description: A human readable title of this object. Can be used for user
            interfaces.
          type: string
        value:
          description: A list of host objects.
          items:
            $ref: '#/components/schemas/HostConfig'
          type: array
        extensions:
          description: Additional attributes alongside the collection.
          type: object
      required:
      - links
      type: object
    HostConfigSchemaInternal:
      properties:
        site:
          description: The site the host is monitored on.
          type: string
        is_cluster:
          description: Indicates if the host is a cluster host.
          type: boolean
      required:
      - is_cluster
      - site
      type: object
    HostContactGroup:
      properties:
        groups:
          description: A list of contact groups.
          items:
            example: all
            type: string
          type: array
        use:
          default: false
          description: Add these contact groups to the host.
          type: boolean
        use_for_services:
          default: false
          description: <p>Always add host contact groups also to its services.</p>With
            this option contact groups that are added to hosts are always being added
            to services, as well. This only makes a difference if you have assigned
            other contact groups to services via rules in <i>Host & Service Parameters</i>.
            As long as you do not have any such rule a service always inherits all
            contact groups from its host.
          type: boolean
        recurse_use:
          default: false
          description: Add these groups as contacts to all hosts in all sub-folders
            of this folder.
          type: boolean
        recurse_perms:
          default: false
          description: Give these groups also permission on all sub-folders.
          type: boolean
      required:
      - groups
      type: object
    HostCreateAttribute:
      properties:
        alias:
          description: A comment or description of this host
          type: string
        site:
          description: The site that should monitor this host.
          type: string
        contactgroups:
          allOf:
          - $ref: '#/components/schemas/HostContactGroup'
          description: Only members of the contact groups listed here have WATO permission
            to the host / folder. If you want, you can make those contact groups automatically
            also <b>monitoring contacts</b>. This is completely optional. Assignment
            of host to contact groups can be done by <a href='wato.py?mode=edit_ruleset&varname=host_contactgroups'>rules</a>
            as well.
        parents:
          description: A list of parents of this host.
          items:
            example: example.com
            pattern: '[-0-9a-zA-Z_.]+'
            type: string
          type: array
        ipaddress:
          description: An IPv4 address.
          type: string
        ipv6address:
          description: An IPv6 address.
          type: string
        additional_ipv4addresses:
          description: A list of IPv4 addresses.
          items:
            type: string
          type: array
        additional_ipv6addresses:
          description: A list of IPv6 addresses.
          items:
            type: string
          type: array
        snmp_community:
          allOf:
          - $ref: '#/components/schemas/SNMPCredentials'
          description: The SNMP access configuration. A configured SNMP v1/v2 community
            here will have precedence over any configured SNMP community rule. For
            this attribute to take effect, the attribute `tag_snmp_ds` needs to be
            set first.
        labels:
          additionalProperties:
            description: The host label value
            type: string
          description: With the help of labels you can flexibly group your hosts in
            order to refer to them later at other places in Check_MK, e.g. in rule
            chains. A label always consists of a combination of key and value in the
            format "key:value". A host can only have one value per key. Check_MK will
            not perform any validation on the labels you use.
          type: object
        network_scan:
          allOf:
          - $ref: '#/components/schemas/NetworkScan'
          description: Configuration for automatic network scan. Pings will besent
            to each IP address in the configured ranges to checkif a host is up or
            down. Each found host will be added tothe folder by it's hostname (if
            possible) or IP address.
        management_protocol:
          description: "The protocol used to connect to the management board.\n\n\
            Valid options are:\n\n * `none` - No management board\n * `snmp` - Connect\
            \ using SNMP\n * `ipmi` - Connect using IPMI\n"
          enum:
          - none
          - snmp
          - ipmi
          type: string
        management_address:
          description: Address (IPv4, IPv6 or hostname) under which the management
            board can be reached.
          type: string
        management_snmp_community:
          allOf:
          - $ref: '#/components/schemas/SNMPCredentials'
          description: SNMP credentials
          nullable: true
        management_ipmi_credentials:
          allOf:
          - $ref: '#/components/schemas/IPMIParameters'
          description: IPMI credentials
        locked_by:
          allOf:
          - $ref: '#/components/schemas/LockedBy'
          description: Identity of the entity which locked the locked_attributes.
            The identity is built out of the Site ID, the program name and the connection
            ID.
        locked_attributes:
          description: Name of host attributes which are locked in the UI.
          items:
            type: string
          type: array
        inventory_failed:
          description: Whether or not the last bulk discovery failed. It is set to
            True once it fails and unset in case a later discovery succeeds.
          example: false
          type: boolean
        tag_criticality:
          description: "Choices:\n\n * `\"prod\"`: Productive system\n\n * `\"critical\"\
            `: Business critical\n\n * `\"test\"`: Test system\n\n * `\"offline\"\
            `: Do not monitor this host"
          enum:
          - prod
          - critical
          - test
          - offline
          type: string
        tag_networking:
          description: "Choices:\n\n * `\"lan\"`: Local network (low latency)\n\n\
            \ * `\"wan\"`: WAN (high latency)\n\n * `\"dmz\"`: DMZ (low latency, secure\
            \ access)"
          enum:
          - lan
          - wan
          - dmz
          type: string
        tag_agent:
          description: "Choices:\n\n * `\"cmk-agent\"`: API integrations if configured,\
            \ else Checkmk agent\n\n * `\"all-agents\"`: Configured API integrations\
            \ and Checkmk agent\n\n * `\"special-agents\"`: Configured API integrations,\
            \ no Checkmk agent\n\n * `\"no-agent\"`: No API integrations, no Checkmk\
            \ agent"
          enum:
          - cmk-agent
          - all-agents
          - special-agents
          - no-agent
          type: string
        tag_piggyback:
          description: "By default every host has the piggyback data source <b>Use\
            \ piggyback data from other hosts if present</b>. In this case the <tt>Check_MK</tt>\
            \ service of this host processes the piggyback data but does not warn\
            \ if no piggyback data is available. The related discovered services would\
            \ become stale. If a host has configured <b>Always use and expect piggyback\
            \ data</b> for the piggyback data source then this host expects piggyback\
            \ data and the <tt>Check_MK</tt> service of this host warns if no piggyback\
            \ data is available. In the last case, ie. <b>Never use piggyback data</b>,\
            \ the <tt>Check_MK</tt> service does not process piggyback data at all\
            \ and ignores it if available.\n\nChoices:\n\n * `\"auto-piggyback\"`:\
            \ Use piggyback data from other hosts if present\n\n * `\"piggyback\"\
            `: Always use and expect piggyback data\n\n * `\"no-piggyback\"`: Never\
            \ use piggyback data"
          enum:
          - auto-piggyback
          - piggyback
          - no-piggyback
          type: string
        tag_snmp_ds:
          description: "Choices:\n\n * `\"no-snmp\"`: No SNMP\n\n * `\"snmp-v2\"`:\
            \ SNMP v2 or v3\n\n * `\"snmp-v1\"`: SNMP v1"
          enum:
          - no-snmp
          - snmp-v2
          - snmp-v1
          type: string
        tag_address_family:
          description: "Choices:\n\n * `\"ip-v4-only\"`: IPv4 only\n\n * `\"ip-v6-only\"\
            `: IPv6 only\n\n * `\"ip-v4v6\"`: IPv4/IPv6 dual-stack\n\n * `\"no-ip\"\
            `: No IP"
          enum:
          - ip-v4-only
          - ip-v6-only
          - ip-v4v6
          - no-ip
          type: string
      type: object
    HostExtensions:
      properties:
        folder:
          description: 'The folder, in which this host resides.


            Path delimiters can be either `~`, `/` or `\`. Please use the one most
            appropriate for your quoting/escaping needs. A good default choice is
            `~`.'
          pattern: (?:(?:[~\\\/]|(?:[~\\\/][-_ a-zA-Z0-9.]+)+[~\\\/]?)|[0-9a-fA-F]{32})
          type: string
        attributes:
          anyOf:
          - $ref: '#/components/schemas/HostViewAttribute'
          - $ref: '#/components/schemas/CustomAttributes'
          - $ref: '#/components/schemas/TagGroupAttributes'
          description: Attributes of this host.
          example:
            ipaddress: 192.168.0.123
        effective_attributes:
          description: All attributes of this host and all parent folders. Format
            may change!
          example:
            tag_snmp_ds: null
          nullable: true
          type: object
        is_cluster:
          description: If this is a cluster host, i.e. a container for other hosts.
          type: boolean
        is_offline:
          description: Whether the host is offline
          type: boolean
        cluster_nodes:
          default: null
          description: In the case this is a cluster host, these are the cluster nodes.
          items:
            example: example.com
            pattern: '[-0-9a-zA-Z_.]+'
            type: string
          nullable: true
          type: array
      type: object
    HostGroup:
      properties:
        links:
          description: list of links to other resources.
          example: null
          items:
            $ref: '#/components/schemas/Link'
          type: array
        domainType:
          default: host_group
          description: The domain type of the object.
        id:
          description: The unique identifier for this domain-object type.
          type: string
        title:
          description: A human readable title of this object. Can be used for user
            interfaces.
          type: string
        members:
          description: The container for external resources, like linked foreign objects
            or actions.
          type: object
        extensions:
          description: All the attributes of the domain object.
          type: object
      required:
      - domainType
      - links
      type: object
    HostMembers:
      properties:
        folder_config:
          allOf:
          - $ref: '#/components/schemas/Folder'
          description: The folder in which this host resides. It is represented by
            a hexadecimal identifier which is it's 'primary key'. The folder can be
            accessed via the `self`-link provided in the links array.
      type: object
    HostOrServiceCondition:
      properties:
        match_on:
          description: A list of string matching regular expressions.
          items:
            type: string
          type: array
        operator:
          description: "How the hosts or services should be matched.\n * one_of -\
            \ will match if any of the hosts or services is matched\n * none_of -\
            \ will match if none of the hosts are matched. In other words: will match\
            \ all hosts or services which are not specified.\n"
          enum:
          - one_of
          - none_of
          type: string
      type: object
    HostTag:
      properties:
        id:
          description: The unique identifier of this host tag
          type: string
        title:
          description: The title of this host tag
          type: string
        aux_tags:
          description: The auxiliary tags this tag included in.
          items:
            type: string
          type: array
      type: object
    HostTag1:
      properties:
        ident:
          default: null
          description: An unique id for the tag
          example: tag_id
          nullable: true
          type: string
        title:
          description: The title of the tag
          example: Tag
          type: string
        aux_tags:
          description: The list of auxiliary tag ids. Built-in tags (ip-v4, ip-v6,
            snmp, tcp, ping) and custom defined tags are allowed.
          example:
          - ip-v4, ip-v6
          items:
            description: An auxiliary tag id
            example: ip-v4
            type: string
          type: array
      required:
      - title
      type: object
    HostTagExtensions:
      properties:
        topic:
          description: The topic this host tag group is organized in.
          type: string
        tags:
          description: The list of tags in this group.
          items:
            $ref: '#/components/schemas/HostTag'
          type: array
      type: object
    HostTagGroupCollection:
      properties:
        links:
          description: list of links to other resources.
          example: null
          items:
            $ref: '#/components/schemas/Link'
          type: array
        id:
          default: all
          description: The name of this collection.
          type: string
        domainType:
          default: host_tag_group
          description: The domain type of the objects in the collection.
        title:
          description: A human readable title of this object. Can be used for user
            interfaces.
          type: string
        value:
          description: A list of host tag group objects.
          items:
            $ref: '#/components/schemas/ConcreteHostTagGroup'
          type: array
        extensions:
          description: Additional attributes alongside the collection.
          type: object
      required:
      - links
      type: object
    HostUpdateAttribute:
      properties:
        alias:
          description: A comment or description of this host
          type: string
        site:
          description: The site that should monitor this host.
          type: string
        contactgroups:
          allOf:
          - $ref: '#/components/schemas/HostContactGroup'
          description: Only members of the contact groups listed here have WATO permission
            to the host / folder. If you want, you can make those contact groups automatically
            also <b>monitoring contacts</b>. This is completely optional. Assignment
            of host to contact groups can be done by <a href='wato.py?mode=edit_ruleset&varname=host_contactgroups'>rules</a>
            as well.
        parents:
          description: A list of parents of this host.
          items:
            example: example.com
            pattern: '[-0-9a-zA-Z_.]+'
            type: string
          type: array
        ipaddress:
          description: An IPv4 address.
          type: string
        ipv6address:
          description: An IPv6 address.
          type: string
        additional_ipv4addresses:
          description: A list of IPv4 addresses.
          items:
            type: string
          type: array
        additional_ipv6addresses:
          description: A list of IPv6 addresses.
          items:
            type: string
          type: array
        snmp_community:
          allOf:
          - $ref: '#/components/schemas/SNMPCredentials'
          description: The SNMP access configuration. A configured SNMP v1/v2 community
            here will have precedence over any configured SNMP community rule. For
            this attribute to take effect, the attribute `tag_snmp_ds` needs to be
            set first.
        labels:
          additionalProperties:
            description: The host label value
            type: string
          description: With the help of labels you can flexibly group your hosts in
            order to refer to them later at other places in Check_MK, e.g. in rule
            chains. A label always consists of a combination of key and value in the
            format "key:value". A host can only have one value per key. Check_MK will
            not perform any validation on the labels you use.
          type: object
        network_scan:
          allOf:
          - $ref: '#/components/schemas/NetworkScan'
          description: Configuration for automatic network scan. Pings will besent
            to each IP address in the configured ranges to checkif a host is up or
            down. Each found host will be added tothe folder by it's hostname (if
            possible) or IP address.
        management_protocol:
          description: "The protocol used to connect to the management board.\n\n\
            Valid options are:\n\n * `none` - No management board\n * `snmp` - Connect\
            \ using SNMP\n * `ipmi` - Connect using IPMI\n"
          enum:
          - none
          - snmp
          - ipmi
          type: string
        management_address:
          description: Address (IPv4, IPv6 or hostname) under which the management
            board can be reached.
          type: string
        management_snmp_community:
          allOf:
          - $ref: '#/components/schemas/SNMPCredentials'
          description: SNMP credentials
          nullable: true
        management_ipmi_credentials:
          allOf:
          - $ref: '#/components/schemas/IPMIParameters'
          description: IPMI credentials
        locked_by:
          allOf:
          - $ref: '#/components/schemas/LockedBy'
          description: Identity of the entity which locked the locked_attributes.
            The identity is built out of the Site ID, the program name and the connection
            ID.
        locked_attributes:
          description: Name of host attributes which are locked in the UI.
          items:
            type: string
          type: array
        inventory_failed:
          description: Whether or not the last bulk discovery failed. It is set to
            True once it fails and unset in case a later discovery succeeds.
          example: false
          type: boolean
        tag_criticality:
          description: "Choices:\n\n * `\"prod\"`: Productive system\n\n * `\"critical\"\
            `: Business critical\n\n * `\"test\"`: Test system\n\n * `\"offline\"\
            `: Do not monitor this host"
          enum:
          - prod
          - critical
          - test
          - offline
          type: string
        tag_networking:
          description: "Choices:\n\n * `\"lan\"`: Local network (low latency)\n\n\
            \ * `\"wan\"`: WAN (high latency)\n\n * `\"dmz\"`: DMZ (low latency, secure\
            \ access)"
          enum:
          - lan
          - wan
          - dmz
          type: string
        tag_agent:
          description: "Choices:\n\n * `\"cmk-agent\"`: API integrations if configured,\
            \ else Checkmk agent\n\n * `\"all-agents\"`: Configured API integrations\
            \ and Checkmk agent\n\n * `\"special-agents\"`: Configured API integrations,\
            \ no Checkmk agent\n\n * `\"no-agent\"`: No API integrations, no Checkmk\
            \ agent"
          enum:
          - cmk-agent
          - all-agents
          - special-agents
          - no-agent
          type: string
        tag_piggyback:
          description: "By default every host has the piggyback data source <b>Use\
            \ piggyback data from other hosts if present</b>. In this case the <tt>Check_MK</tt>\
            \ service of this host processes the piggyback data but does not warn\
            \ if no piggyback data is available. The related discovered services would\
            \ become stale. If a host has configured <b>Always use and expect piggyback\
            \ data</b> for the piggyback data source then this host expects piggyback\
            \ data and the <tt>Check_MK</tt> service of this host warns if no piggyback\
            \ data is available. In the last case, ie. <b>Never use piggyback data</b>,\
            \ the <tt>Check_MK</tt> service does not process piggyback data at all\
            \ and ignores it if available.\n\nChoices:\n\n * `\"auto-piggyback\"`:\
            \ Use piggyback data from other hosts if present\n\n * `\"piggyback\"\
            `: Always use and expect piggyback data\n\n * `\"no-piggyback\"`: Never\
            \ use piggyback data"
          enum:
          - auto-piggyback
          - piggyback
          - no-piggyback
          type: string
        tag_snmp_ds:
          description: "Choices:\n\n * `\"no-snmp\"`: No SNMP\n\n * `\"snmp-v2\"`:\
            \ SNMP v2 or v3\n\n * `\"snmp-v1\"`: SNMP v1"
          enum:
          - no-snmp
          - snmp-v2
          - snmp-v1
          type: string
        tag_address_family:
          description: "Choices:\n\n * `\"ip-v4-only\"`: IPv4 only\n\n * `\"ip-v6-only\"\
            `: IPv6 only\n\n * `\"ip-v4v6\"`: IPv4/IPv6 dual-stack\n\n * `\"no-ip\"\
            `: No IP"
          enum:
          - ip-v4-only
          - ip-v6-only
          - ip-v4v6
          - no-ip
          type: string
      type: object
    HostViewAttribute:
      properties:
        alias:
          description: A comment or description of this host
          type: string
        site:
          description: The site that should monitor this host.
          type: string
        contactgroups:
          allOf:
          - $ref: '#/components/schemas/HostContactGroup'
          description: Only members of the contact groups listed here have WATO permission
            to the host / folder. If you want, you can make those contact groups automatically
            also <b>monitoring contacts</b>. This is completely optional. Assignment
            of host to contact groups can be done by <a href='wato.py?mode=edit_ruleset&varname=host_contactgroups'>rules</a>
            as well.
        parents:
          description: A list of parents of this host.
          items:
            example: example.com
            pattern: '[-0-9a-zA-Z_.]+'
            type: string
          type: array
        ipaddress:
          description: An IPv4 address.
          type: string
        ipv6address:
          description: An IPv6 address.
          type: string
        additional_ipv4addresses:
          description: A list of IPv4 addresses.
          items:
            type: string
          type: array
        additional_ipv6addresses:
          description: A list of IPv6 addresses.
          items:
            type: string
          type: array
        snmp_community:
          allOf:
          - $ref: '#/components/schemas/SNMPCredentials'
          description: The SNMP access configuration. A configured SNMP v1/v2 community
            here will have precedence over any configured SNMP community rule. For
            this attribute to take effect, the attribute `tag_snmp_ds` needs to be
            set first.
        labels:
          additionalProperties:
            description: The host label value
            type: string
          description: With the help of labels you can flexibly group your hosts in
            order to refer to them later at other places in Check_MK, e.g. in rule
            chains. A label always consists of a combination of key and value in the
            format "key:value". A host can only have one value per key. Check_MK will
            not perform any validation on the labels you use.
          type: object
        network_scan:
          allOf:
          - $ref: '#/components/schemas/NetworkScan'
          description: Configuration for automatic network scan. Pings will besent
            to each IP address in the configured ranges to checkif a host is up or
            down. Each found host will be added tothe folder by it's hostname (if
            possible) or IP address.
        network_scan_result:
          allOf:
          - $ref: '#/components/schemas/NetworkScanResult'
          description: Read only access to the network scan result
        management_protocol:
          description: "The protocol used to connect to the management board.\n\n\
            Valid options are:\n\n * `none` - No management board\n * `snmp` - Connect\
            \ using SNMP\n * `ipmi` - Connect using IPMI\n"
          enum:
          - none
          - snmp
          - ipmi
          type: string
        management_address:
          description: Address (IPv4, IPv6 or hostname) under which the management
            board can be reached.
          type: string
        management_snmp_community:
          allOf:
          - $ref: '#/components/schemas/SNMPCredentials'
          description: SNMP credentials
          nullable: true
        management_ipmi_credentials:
          allOf:
          - $ref: '#/components/schemas/IPMIParameters'
          description: IPMI credentials
        meta_data:
          allOf:
          - $ref: '#/components/schemas/MetaData'
          description: Read only access to configured metadata.
        locked_by:
          allOf:
          - $ref: '#/components/schemas/LockedBy'
          description: Identity of the entity which locked the locked_attributes.
            The identity is built out of the Site ID, the program name and the connection
            ID.
        locked_attributes:
          description: Name of host attributes which are locked in the UI.
          items:
            type: string
          type: array
        inventory_failed:
          description: Whether or not the last bulk discovery failed. It is set to
            True once it fails and unset in case a later discovery succeeds.
          example: false
          type: boolean
        tag_criticality:
          description: "Choices:\n\n * `\"prod\"`: Productive system\n\n * `\"critical\"\
            `: Business critical\n\n * `\"test\"`: Test system\n\n * `\"offline\"\
            `: Do not monitor this host"
          enum:
          - prod
          - critical
          - test
          - offline
          type: string
        tag_networking:
          description: "Choices:\n\n * `\"lan\"`: Local network (low latency)\n\n\
            \ * `\"wan\"`: WAN (high latency)\n\n * `\"dmz\"`: DMZ (low latency, secure\
            \ access)"
          enum:
          - lan
          - wan
          - dmz
          type: string
        tag_agent:
          description: "Choices:\n\n * `\"cmk-agent\"`: API integrations if configured,\
            \ else Checkmk agent\n\n * `\"all-agents\"`: Configured API integrations\
            \ and Checkmk agent\n\n * `\"special-agents\"`: Configured API integrations,\
            \ no Checkmk agent\n\n * `\"no-agent\"`: No API integrations, no Checkmk\
            \ agent"
          enum:
          - cmk-agent
          - all-agents
          - special-agents
          - no-agent
          type: string
        tag_piggyback:
          description: "By default every host has the piggyback data source <b>Use\
            \ piggyback data from other hosts if present</b>. In this case the <tt>Check_MK</tt>\
            \ service of this host processes the piggyback data but does not warn\
            \ if no piggyback data is available. The related discovered services would\
            \ become stale. If a host has configured <b>Always use and expect piggyback\
            \ data</b> for the piggyback data source then this host expects piggyback\
            \ data and the <tt>Check_MK</tt> service of this host warns if no piggyback\
            \ data is available. In the last case, ie. <b>Never use piggyback data</b>,\
            \ the <tt>Check_MK</tt> service does not process piggyback data at all\
            \ and ignores it if available.\n\nChoices:\n\n * `\"auto-piggyback\"`:\
            \ Use piggyback data from other hosts if present\n\n * `\"piggyback\"\
            `: Always use and expect piggyback data\n\n * `\"no-piggyback\"`: Never\
            \ use piggyback data"
          enum:
          - auto-piggyback
          - piggyback
          - no-piggyback
          type: string
        tag_snmp_ds:
          description: "Choices:\n\n * `\"no-snmp\"`: No SNMP\n\n * `\"snmp-v2\"`:\
            \ SNMP v2 or v3\n\n * `\"snmp-v1\"`: SNMP v1"
          enum:
          - no-snmp
          - snmp-v2
          - snmp-v1
          type: string
        tag_address_family:
          description: "Choices:\n\n * `\"ip-v4-only\"`: IPv4 only\n\n * `\"ip-v6-only\"\
            `: IPv6 only\n\n * `\"ip-v4v6\"`: IPv4/IPv6 dual-stack\n\n * `\"no-ip\"\
            `: No IP"
          enum:
          - ip-v4-only
          - ip-v6-only
          - ip-v4v6
          - no-ip
          type: string
      type: object
    IPAddressRange:
      properties:
        type:
          default: ip_range
          description: A range of addresses.
        from_address:
          description: The first IPv4 address of this range.
          type: string
        to_address:
          description: The last IPv4 address of this range.
          type: string
      type: object
    IPAddresses:
      properties:
        type:
          default: ip_list
          description: A list of single IPv4 addresses.
        addresses:
          items:
            type: string
          type: array
      type: object
    IPMIParameters:
      properties:
        username:
          type: string
        password:
          type: string
      required:
      - password
      - username
      type: object
    IPNetwork:
      properties:
        type:
          default: ip_network
          description: A single IPv4 network in CIDR notation.
        network:
          description: "A IPv4 network in CIDR notation. Minimum prefix length is\
            \ 8 bit, maximum prefix length is 30 bit.\n\nValid examples:\n\n * `192.168.0.0/24`\n\
            \ * `192.168.0.0/255.255.255.0`"
          type: string
      type: object
    IPRangeWithRegexp:
      discriminator:
        mapping:
          address_range: '#/components/schemas/IPAddressRange'
          exclude_by_regexp: '#/components/schemas/IPRegexp'
          explicit_addresses: '#/components/schemas/IPAddresses'
          network_range: '#/components/schemas/IPNetwork'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/IPAddressRange'
      - $ref: '#/components/schemas/IPNetwork'
      - $ref: '#/components/schemas/IPAddresses'
      - $ref: '#/components/schemas/IPRegexp'
      properties: {}
      type: object
    IPRegexp:
      properties:
        type:
          default: ip_regex_list
          description: IPv4 addresses which match a regexp pattern
        regexp_list:
          description: A list of regular expressions which are matched against the
            found IP addresses. The matches will be excluded from the result.
          items:
            type: string
          type: array
      type: object
    IdleOption:
      properties:
        option:
          description: Specify if the idle timeout should use the global configuration,
            be disabled or use an individual duration
          enum:
          - global
          - disable
          - individual
          example: false
          type: string
        duration:
          default: 3600
          description: The duration in seconds of the individual idle timeout if individual
            is selected as idle timeout option.
          example: 3600
          type: integer
      required:
      - option
      type: object
    InputContactGroup:
      properties:
        name:
          description: The name of the contact group.
          example: OnCall
          type: string
        alias:
          description: The name used for displaying in the GUI.
          example: Not on Sundays.
          type: string
      required:
      - name
      type: object
    InputHostGroup:
      properties:
        name:
          description: A name used as identifier
          example: windows
          type: string
        alias:
          description: The name used for displaying in the GUI.
          example: Windows Servers
          type: string
      required:
      - name
      type: object
    InputHostTagGroup:
      properties:
        ident:
          description: An id for the host tag group
          example: group_id
          pattern: '[a-zA-Z_]+[-0-9a-zA-Z_]*'
          type: string
        title:
          description: A title for the host tag
          example: Kubernetes
          type: string
        topic:
          description: Different tags can be grouped in a topic
          example: Data Sources
          type: string
        help:
          default: ''
          description: A help description for the tag group
          example: Kubernetes Pods
          type: string
        tags:
          description: A list of host tags belonging to the host tag group
          example:
          - ident: pod
            title: Pod
          items:
            $ref: '#/components/schemas/HostTag1'
          type: array
      required:
      - tags
      - title
      - topic
      type: object
    InputPassword:
      properties:
        ident:
          description: An unique identifier for the password
          example: pass
          type: string
        title:
          description: A title for the password
          example: Kubernetes login
          type: string
        comment:
          default: ''
          description: A comment for the password
          example: Kommentar
          type: string
        documentation_url:
          default: ''
          description: An optional URL pointing to documentation or any other page.
            You can use either global URLs (beginning with http://), absolute local
            urls (beginning with /) or relative URLs (that are relative to check_mk/).
          example: localhost
          type: string
        password:
          description: The password string
          example: password
          type: string
        owner:
          description: Each password is owned by a group of users which are able to
            edit, delete and use existing passwords.
          example: admin
          type: string
        shared:
          description: The list of members to share the password with
          example:
          - all
          items:
            description: By default only the members of the owner contact group are
              permitted to use a a configured password. It is possible to share a
              password with other groups of users to make them able to use a password
              in checks.
            example: all
            type: string
          type: array
      required:
      - ident
      - owner
      - password
      - title
      type: object
    InputRuleObject:
      properties:
        ruleset:
          description: Name of rule set.
          example: host_config
          type: string
        folder:
          description: 'The path name of the folder.


            Path delimiters can be either `~`, `/` or `\`. Please use the one most
            appropriate for your quoting/escaping needs. A good default choice is
            `~`.'
          example: ~router
          pattern: (?:(?:[~\\\/]|(?:[~\\\/][-_ a-zA-Z0-9.]+)+[~\\\/]?)|[0-9a-fA-F]{32})
          type: string
        properties:
          allOf:
          - $ref: '#/components/schemas/RuleProperties'
          description: Configuration values for rules.
          example:
            disabled: false
        value_raw:
          description: The raw parameter value for this rule. To create the correct
            structure, for now use the 'export for API' menu item in the Rule Editor
            of the GUI. The value is expected to be a valid Python type.
          example: '{"ignore_fs_types": ["tmpfs"]}'
          type: string
        conditions:
          allOf:
          - $ref: '#/components/schemas/RuleConditions'
          description: Conditions.
          example: {}
      required:
      - folder
      - ruleset
      type: object
    InputServiceGroup:
      properties:
        name:
          description: A name used as identifier
          example: windows
          type: string
        alias:
          description: The name used for displaying in the GUI.
          example: Environment Sensors
          type: string
      required:
      - name
      type: object
    InputTimePeriod:
      properties:
        name:
          description: A unique name for the time period.
          example: first
          type: string
        alias:
          description: An alias for the time period.
          example: alias
          type: string
        active_time_ranges:
          description: The list of active time ranges.
          example:
          - day: monday
            time_ranges:
            - end: '14:00'
              start: '12:00'
          items:
            $ref: '#/components/schemas/TimeRangeActive'
          type: array
        exceptions:
          description: A list of additional time ranges to be added.
          example:
          - date: '2020-01-01'
            time_ranges:
            - end: '18:00'
              start: '14:00'
          items:
            $ref: '#/components/schemas/TimePeriodException'
          type: array
        exclude:
          description: A list of time period aliases whose periods are excluded.
          example:
          - alias
          items:
            description: The alias for a time period.
            example: alias
            type: string
          type: array
      required:
      - active_time_ranges
      - alias
      - name
      type: object
    InstalledVersions:
      properties:
        site:
          description: The site where this API call was made on.
          example: production
          type: string
        group:
          description: The Apache WSGI application group this call was made on.
          example: de
          type: string
        rest_api:
          description: The REST-API version
          example:
            revision: 1.0.0
          type: object
        versions:
          description: Some version numbers
          example:
            checkmk: 1.8.0p1
          type: object
        edition:
          description: The Checkmk edition.
          example: raw
          type: string
        demo:
          description: Whether this is a demo version or not.
          example: false
          type: boolean
      type: object
    JobLogs:
      properties:
        result:
          description: The list of result related logs
          items:
            type: string
          type: array
        progress:
          description: The list of progress related logs
          items:
            type: string
          type: array
      type: object
    LabelCondition:
      properties:
        key:
          description: The key of the label. e.g. 'os' in 'os:windows'
          type: string
        operator:
          description: How the label should be matched.
          enum:
          - is
          - is_not
          type: string
        value:
          description: The value of the label. e.g. 'windows' in 'os:windows'
          type: string
      required:
      - key
      - value
      type: object
    Link:
      properties:
        domainType:
          default: link
        rel:
          description: Indicates the nature of the relationship of the related resource
            to the resource that generated this representation
          example: self
          type: string
        href:
          description: The (absolute) address of the related resource. Any characters
            that are invalid in URLs must be URL encoded.
          example: https://.../api_resource
          type: string
        method:
          description: The HTTP method to use to traverse the link (get, post, put
            or delete)
          example: GET
          pattern: GET|PUT|POST|DELETE
          type: string
        type:
          description: The content-type that the linked resource will return
          example: application/json
          type: string
        title:
          description: string that the consuming application may use to render the
            link without having to traverse the link in advance
          example: The object itself
          nullable: true
          type: string
        body_params:
          description: A map of values that shall be sent in the request body. If
            this is present,the request has to be sent with a content-type of 'application/json'.
          type: object
      required:
      - domainType
      - href
      - method
      - rel
      - type
      type: object
    LinkHostUUID:
      properties:
        uuid:
          description: A valid UUID.
          example: 34e4c967-1591-4883-8cdf-0e335b09618d
          format: uuid
          type: string
      required:
      - uuid
      type: object
    LinkedValueDomainObjectCollection:
      properties:
        links:
          description: list of links to other resources.
          example: null
          items:
            $ref: '#/components/schemas/Link'
          type: array
        domainType:
          description: The "domain-type" of the object.
          type: string
        id:
          description: The unique identifier for this domain-object type.
          type: string
        title:
          description: A human readable title of this object. Can be used for user
            interfaces.
          type: string
        members:
          description: The container for external resources, like linked foreign objects
            or actions.
          type: object
        extensions:
          description: All the attributes of the domain object.
          type: object
        value:
          description: The collection itself, as links. Each entry in here is part
            of the collection.
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
      - domainType
      - links
      type: object
    LockedBy:
      properties:
        site_id:
          description: Site ID
          type: string
        program_id:
          description: Program ID
          type: string
        instance_id:
          description: Instance ID
          type: string
      required:
      - instance_id
      - program_id
      - site_id
      type: object
    LogicalExpr:
      properties:
        op:
          description: The operator.
          type: string
        expr:
          items:
            allOf:
            - $ref: '#/components/schemas/Expr'
            description: A list of query expressions to combine.
          type: array
      type: object
    MetaData:
      properties:
        created_at:
          description: When has this object been created.
          format: date-time
          nullable: true
          type: string
        updated_at:
          description: When this object was last changed.
          format: date-time
          nullable: true
          type: string
        created_by:
          description: The user id under which this object has been created.
          nullable: true
          type: string
      type: object
    MoveFolder:
      properties:
        destination:
          description: 'Where the folder has to be moved to.


            Path delimiters can be either `~`, `/` or `\`. Please use the one most
            appropriate for your quoting/escaping needs. A good default choice is
            `~`.'
          example: '%2Fmy%2Ffine%2Ffolder'
          pattern: (?:(?:[~\\\/]|(?:[~\\\/][-_ a-zA-Z0-9.]+)+[~\\\/]?)|[0-9a-fA-F]{32})
          type: string
      required:
      - destination
      type: object
    MoveHost:
      properties:
        target_folder:
          description: 'The path of the target folder where the host is supposed to
            be moved to.


            Path delimiters can be either `~`, `/` or `\`. Please use the one most
            appropriate for your quoting/escaping needs. A good default choice is
            `~`.'
          example: '%2Fmy%2Ffine%2Ffolder'
          pattern: (?:(?:[~\\\/]|(?:[~\\\/][-_ a-zA-Z0-9.]+)+[~\\\/]?)|[0-9a-fA-F]{32})
          type: string
      required:
      - target_folder
      type: object
    MoveRuleTo:
      discriminator:
        mapping:
          after_specific_rule: '#/components/schemas/MoveToSpecificRule'
          before_specific_rule: '#/components/schemas/MoveToSpecificRule'
          bottom_of_folder: '#/components/schemas/MoveToFolder'
          top_of_folder: '#/components/schemas/MoveToFolder'
        propertyName: position
      oneOf:
      - $ref: '#/components/schemas/MoveToFolder'
      - $ref: '#/components/schemas/MoveToFolder'
      - $ref: '#/components/schemas/MoveToSpecificRule'
      - $ref: '#/components/schemas/MoveToSpecificRule'
      properties: {}
      type: object
    MoveToFolder:
      properties:
        position:
          description: The type of position to move to.
          example: top_of_folder
          type: string
        folder:
          description: 'The path name of the folder.


            Path delimiters can be either `~`, `/` or `\`. Please use the one most
            appropriate for your quoting/escaping needs. A good default choice is
            `~`.'
          example: /
          pattern: (?:(?:[~\\\/]|(?:[~\\\/][-_ a-zA-Z0-9.]+)+[~\\\/]?)|[0-9a-fA-F]{32})
          type: string
      type: object
    MoveToSpecificRule:
      properties:
        position:
          description: The type of position to move to.
          example: after_specific_rule
          type: string
        rule_id:
          description: The UUID of the rule to move after/before.
          example: f8b74720-a454-4242-99c4-62994ef0f2bf
          type: string
      type: object
    NetworkScan:
      properties:
        addresses:
          description: IPv4 addresses to include.
          items:
            $ref: '#/components/schemas/IPRangeWithRegexp'
          type: array
        exclude_addresses:
          description: IPv4 addresses to exclude.
          items:
            $ref: '#/components/schemas/IPRangeWithRegexp'
          type: array
        scan_interval:
          default: 86400
          description: Scan interval in seconds. Default is 1 day, minimum is 1 hour.
          minimum: 3600
          type: integer
        time_allowed:
          description: Only execute the discovery during this time range each day..
          items:
            $ref: '#/components/schemas/TimeAllowedRange'
          type: array
        set_ip_address:
          default: true
          description: When set, the found IPv4 address is set on the discovered host.
          type: boolean
        max_parallel_pings:
          default: 100
          description: Set the maximum number of concurrent pings sent to target IP
            addresses.
          maximum: 200
          minimum: 1
          type: integer
        run_as:
          description: Execute the network scan in the Checkmk user context of the
            chosen user. This user needs the permission to add new hosts to this folder.
          type: string
        tag_criticality:
          description: Specify which criticality tag to set on the host created by
            the network scan. This field is required if the criticality tag group
            exists, otherwise it as to be omitted.
          type: string
        translate_names:
          $ref: '#/components/schemas/TranslateNames'
      required:
      - addresses
      - time_allowed
      type: object
    NetworkScanResult:
      properties:
        start:
          description: When the scan started
          format: date-time
          type: string
        end:
          description: When the scan finished. Will be Null if not yet run.
          format: date-time
          nullable: true
          type: string
        state:
          description: Last scan result
          enum:
          - running
          - succeeded
          - failed
          type: string
        output:
          description: Short human readable description of what is happening.
          type: string
      type: object
    NotExpr:
      properties:
        op:
          description: The operator. In this case `not`.
          type: string
        expr:
          allOf:
          - $ref: '#/components/schemas/Expr'
          description: The query expression to negate.
      type: object
    ObjectActionMember:
      properties:
        links:
          description: list of links to other resources.
          example: null
          items:
            $ref: '#/components/schemas/Link'
          type: array
        id:
          type: string
        disabledReason:
          description: Provides the reason (or the literal "disabled") why an object
            property or collection is un-modifiable, or, in the case of an action,
            unusable (and hence no links to mutate that member's state, or invoke
            the action, are provided).
          nullable: true
          type: string
        invalidReason:
          description: Provides the reason (or the literal "invalid") why a proposed
            value for a property, collection or action argument is invalid. Appears
            within an argument representation 2.9 returned as a response.
          example: invalid
          nullable: true
          type: string
        x-ro-invalidReason:
          description: Provides the reason why a SET OF proposed values for properties
            or arguments is invalid.
          nullable: true
          type: string
        memberType:
          default: action
        parameters:
          type: object
        name:
          example: frobnicate_foo
          type: string
        title:
          description: A human readable title of this object. Can be used for user
            interfaces.
          type: string
      required:
      - id
      - links
      type: object
    ObjectCollectionMember:
      properties:
        links:
          description: list of links to other resources.
          example: null
          items:
            $ref: '#/components/schemas/Link'
          type: array
        id:
          type: string
        disabledReason:
          description: Provides the reason (or the literal "disabled") why an object
            property or collection is un-modifiable, or, in the case of an action,
            unusable (and hence no links to mutate that member's state, or invoke
            the action, are provided).
          nullable: true
          type: string
        invalidReason:
          description: Provides the reason (or the literal "invalid") why a proposed
            value for a property, collection or action argument is invalid. Appears
            within an argument representation 2.9 returned as a response.
          example: invalid
          nullable: true
          type: string
        x-ro-invalidReason:
          description: Provides the reason why a SET OF proposed values for properties
            or arguments is invalid.
          nullable: true
          type: string
        memberType:
          default: collection
        value:
          items:
            $ref: '#/components/schemas/Link'
          type: array
        name:
          example: important_values
          type: string
        title:
          description: A human readable title of this object. Can be used for user
            interfaces.
          type: string
      required:
      - id
      - links
      type: object
    ObjectProperty:
      properties:
        links:
          description: list of links to other resources.
          example: null
          items:
            $ref: '#/components/schemas/Link'
          type: array
        id:
          description: The unique name of this property, local to this domain type.
          type: string
        value:
          description: The value of the property. In this case a list.
          items:
            type: string
          type: array
        extensions:
          description: Additional attributes alongside the property.
          type: object
      required:
      - links
      type: object
    Parent:
      properties:
        type:
          default: parent
      required:
      - type
      type: object
    PasswordExtension:
      properties:
        ident:
          description: The unique identifier for the password
          example: pass
          type: string
        title:
          description: The title for the password
          example: Kubernetes login
          type: string
        comment:
          description: A comment for the password
          example: Kommentar
          type: string
        documentation_url:
          description: The URL pointing to documentation or any other page.
          example: localhost
          type: string
        password:
          description: The password string
          example: password
          type: string
        owned_by:
          description: The owner of the password who is able to edit, delete and use
            existing passwords.
          example: admin
          type: string
        shared:
          description: The list of members the password is shared with
          example:
          - all
          items:
            description: The member the password is shared with
            example: all
            type: string
          type: array
      required:
      - password
      type: object
    PasswordObject:
      properties:
        links:
          description: list of links to other resources.
          example: null
          items:
            $ref: '#/components/schemas/Link'
          type: array
        domainType:
          default: password
          description: The type of the domain-object.
        id:
          description: The unique identifier for this domain-object type.
          type: string
        title:
          description: A human readable title of this object. Can be used for user
            interfaces.
          type: string
        members:
          description: The container for external resources, like linked foreign objects
            or actions.
          type: object
        extensions:
          allOf:
          - $ref: '#/components/schemas/PasswordExtension'
          description: All the attributes of the domain object.
      required:
      - links
      type: object
    ReferTo:
      discriminator:
        mapping:
          child: '#/components/schemas/Child'
          child_with: '#/components/schemas/ChildWith'
          host: '#/components/schemas/Host'
          parent: '#/components/schemas/Parent'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/Host'
      - $ref: '#/components/schemas/Parent'
      - $ref: '#/components/schemas/Child'
      - $ref: '#/components/schemas/ChildWith'
      properties: {}
      type: object
    RegexpRewrites:
      properties:
        search:
          description: "The search regexp. May contain match-groups, conditional matches,\
            \ etc. This follows the Python regular expression syntax.\n\nFor details\
            \ see:\n\n * https://docs.python.org/3/library/re.html"
          maxLength: 30
          type: string
        replace_with:
          description: The replacement string. Match-groups can only be identified
            by `\1`, `\2`, etc. Highest supported match group is `\99`. Named lookups
            are not supported.
          maxLength: 30
          type: string
      required:
      - replace_with
      - search
      type: object
    RenameHost:
      properties:
        new_name:
          description: The new name of the existing host.
          example: newhost
          pattern: '[-0-9a-zA-Z_.]+'
          type: string
      required:
      - new_name
      type: object
    RuleCollection:
      properties:
        links:
          description: list of links to other resources.
          example: null
          items:
            $ref: '#/components/schemas/Link'
          type: array
        id:
          default: all
          description: The name of this collection.
          type: string
        domainType:
          default: rule
          description: Domain type of this object.
        title:
          description: A human readable title of this object. Can be used for user
            interfaces.
          type: string
        value:
          description: The collection itself. Each entry in here is part of the collection.
          items:
            $ref: '#/components/schemas/RuleObject'
          type: array
        extensions:
          description: Additional attributes alongside the collection.
          type: object
      required:
      - links
      type: object
    RuleConditions:
      properties:
        host_name:
          allOf:
          - $ref: '#/components/schemas/HostOrServiceCondition'
          description: Here you can enter a list of explicit host names that the rule
            should or should not apply to. Leave this option disabled if you want
            the rule to apply for all hosts specified by the given tags. The names
            that you enter here are compared with case sensitive exact matching. Alternatively
            you can use regular expressions if you enter a tilde `~` as the first
            character. That regular expression must match the beginning of the host
            names in question.
          example:
            match_on:
            - host1
            - host2
            operator: one_of
        host_tags:
          description: The rule will only be applied to hosts fulfilling all the host
            tag conditions listed here, even if they appear in the list of explicit
            host names.
          example:
          - key: criticality
            operator: is
            value: prod
          items:
            $ref: '#/components/schemas/TagCondition'
          type: array
        host_labels:
          description: Further restrict this rule by applying host label conditions.
          example:
          - key: os
            operator: is
            value: windows
          items:
            $ref: '#/components/schemas/LabelCondition'
          type: array
        service_labels:
          description: Restrict the application of the rule, by checking against service
            label conditions.
          example:
          - key: os
            operator: is
            value: windows
          items:
            $ref: '#/components/schemas/LabelCondition'
          type: array
        service_description:
          allOf:
          - $ref: '#/components/schemas/HostOrServiceCondition'
          description: "Specify a list of service patterns this rule shall apply to.\n\
            \ * The patterns must match the beginning of the service in question.\n\
            \ * Adding a `$` to the end forces an exact match.\n * Pattern use regular\
            \ expressions. e.g. a `.*` will match an arbitrary text.\n * The text\
            \ entered here is handled as a regular expression pattern.\n * The pattern\
            \ is matched from the beginning.\n * The match is performed case sensitive.\n\
            BE AWARE: Depending on the service ruleset the service_description of\
            \ the rules is only a check item or a full service description. For example\
            \ the check parameters rulesets only use the item, and other service rulesets\
            \ like disabled services ruleset use full servicedescriptions."
          example:
            match_on:
            - foo1
            - bar2
            operator: none_of
      type: object
    RuleExtensions:
      properties:
        ruleset:
          description: The name of the ruleset.
          type: string
        folder:
          description: 'The path name of the folder.


            Path delimiters can be either `~`, `/` or `\`. Please use the one most
            appropriate for your quoting/escaping needs. A good default choice is
            `~`.'
          example: ~router
          pattern: (?:(?:[~\\\/]|(?:[~\\\/][-_ a-zA-Z0-9.]+)+[~\\\/]?)|[0-9a-fA-F]{32})
          type: string
        folder_index:
          description: The position of this rule in the chain in this folder.
          type: integer
        properties:
          allOf:
          - $ref: '#/components/schemas/RuleProperties'
          description: Property values of this rule.
          example: {}
        value_raw:
          description: The raw parameter value for this rule.
          example: '{"ignore_fs_types": ["tmpfs"]}'
          type: string
        conditions:
          allOf:
          - $ref: '#/components/schemas/RuleConditions'
          description: Conditions.
      required:
      - folder
      type: object
    RuleObject:
      properties:
        links:
          description: list of links to other resources.
          example: null
          items:
            $ref: '#/components/schemas/Link'
          type: array
        domainType:
          default: rule
          description: Domain type of this object.
          example: rule
        id:
          description: The unique identifier for this domain-object type.
          type: string
        title:
          description: A human readable title of this object. Can be used for user
            interfaces.
          type: string
        members:
          description: The container for external resources, like linked foreign objects
            or actions.
          type: object
        extensions:
          allOf:
          - $ref: '#/components/schemas/RuleExtensions'
          description: Attributes specific to rule objects.
      required:
      - links
      type: object
    RuleProperties:
      properties:
        description:
          description: A description for this rule to inform other users about its
            intent.
          example: This rule is here to foo the bar hosts.
          type: string
        comment:
          description: Any comment string.
          example: Created yesterday due to foo hosts behaving weird.
          type: string
        documentation_url:
          description: An URL (e.g. an internal Wiki entry) which explains this rule.
          example: http://example.com/wiki/ConfiguringFooBarHosts
          format: url
          type: string
        disabled:
          default: false
          description: When set to False, the rule will be evaluated. Default is False.
          example: false
          type: boolean
      type: object
    RulesetCollection:
      properties:
        links:
          description: list of links to other resources.
          example: null
          items:
            $ref: '#/components/schemas/Link'
          type: array
        id:
          default: all
          description: The name of this collection.
          type: string
        domainType:
          default: ruleset
          description: Domain type of this object.
          example: ruleset
        title:
          description: A human readable title of this object. Can be used for user
            interfaces.
          type: string
        value:
          description: The collection itself. Each entry in here is part of the collection.
          items:
            $ref: '#/components/schemas/CollectionItem'
          type: array
        extensions:
          description: Additional attributes alongside the collection.
          type: object
      required:
      - links
      type: object
    RulesetExtensions:
      properties:
        name:
          description: The name of the ruleset
          example: host_groups
          type: string
        folder:
          description: 'The path name of the folder.


            Path delimiters can be either `~`, `/` or `\`. Please use the one most
            appropriate for your quoting/escaping needs. A good default choice is
            `~`.'
          example: ~router
          pattern: (?:(?:[~\\\/]|(?:[~\\\/][-_ a-zA-Z0-9.]+)+[~\\\/]?)|[0-9a-fA-F]{32})
          type: string
        number_of_rules:
          description: The number of rules of this ruleset.
          example: 5
          type: integer
      required:
      - folder
      type: object
    RulesetObject:
      properties:
        links:
          description: list of links to other resources.
          example: null
          items:
            $ref: '#/components/schemas/Link'
          type: array
        domainType:
          default: ruleset
          description: Domain type of this object.
          example: ruleset
        id:
          description: The unique identifier for this domain-object type.
          type: string
        title:
          description: A human readable title of this object. Can be used for user
            interfaces.
          type: string
        members:
          description: The container for external resources, like linked foreign objects
            or actions.
          type: object
        extensions:
          allOf:
          - $ref: '#/components/schemas/RulesetExtensions'
          description: Specific attributes related to rulesets.
      required:
      - links
      type: object
    SNMPCommunity:
      properties:
        type:
          default: v1_v2_community
        community:
          description: SNMP community (SNMP Versions 1 and 2c)
          type: string
      required:
      - community
      type: object
    SNMPCredentials:
      discriminator:
        mapping:
          v1_v2_community: '#/components/schemas/SNMPCommunity'
          v3_auth_no_privacy: '#/components/schemas/SNMPv3AuthNoPrivacy'
          v3_auth_privacy: '#/components/schemas/SNMPv3AuthPrivacy'
          v3_no_auth_no_privacy: '#/components/schemas/SNMPv3NoAuthNoPrivacy'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/SNMPCommunity'
      - $ref: '#/components/schemas/SNMPv3NoAuthNoPrivacy'
      - $ref: '#/components/schemas/SNMPv3AuthNoPrivacy'
      - $ref: '#/components/schemas/SNMPv3AuthPrivacy'
      properties: {}
      type: object
    SNMPv3AuthNoPrivacy:
      properties:
        type:
          default: authNoPriv
          description: The type of credentials to use.
        auth_protocol:
          description: Authentication protocol.
          enum:
          - MD5-96
          - SHA-1-96
          - SHA-2-224
          - SHA-2-256
          - SHA-2-384
          - SHA-2-512
          type: string
        security_name:
          description: Security name
          type: string
        auth_password:
          description: Authentication pass phrase.
          minLength: 8
          type: string
      required:
      - auth_password
      - auth_protocol
      - security_name
      type: object
    SNMPv3AuthPrivacy:
      properties:
        type:
          default: authPriv
          description: SNMPv3 with authentication and privacy.
        auth_protocol:
          description: Authentication protocol.
          enum:
          - MD5-96
          - SHA-1-96
          - SHA-2-224
          - SHA-2-256
          - SHA-2-384
          - SHA-2-512
          type: string
        security_name:
          description: Security name
          type: string
        auth_password:
          description: Authentication pass phrase.
          minLength: 8
          type: string
        privacy_protocol:
          description: The privacy protocol. The only supported values in the Raw
            Edition are CBC-DES and AES-128. If selected, privacy_password needs to
            be supplied as well.
          enum:
          - CBC-DES
          - AES-128
          - 3DES-EDE
          - AES-192
          - AES-256
          - AES-192-Blumenthal
          - AES-256-Blumenthal
          type: string
        privacy_password:
          description: Privacy pass phrase. If filled, privacy_protocol needs to be
            selected as well.
          minLength: 8
          type: string
      required:
      - auth_password
      - auth_protocol
      - privacy_password
      - privacy_protocol
      - security_name
      type: object
    SNMPv3NoAuthNoPrivacy:
      properties:
        type:
          default: noAuthNoPriv
          description: The type of credentials to use.
        security_name:
          description: Security name
          type: string
      required:
      - security_name
      type: object
    ServiceConditions:
      properties:
        host_folder:
          example: servers/groupA
          type: string
        host_labels:
          example: *id010
          type: object
        host_tags:
          example: *id011
          type: object
        host_choice:
          allOf:
          - $ref: '#/components/schemas/BIHostChoice'
          example: *id012
        service_regex:
          example: Filesystem.*
          type: string
        service_labels:
          example:
            db: mssql
          type: object
      required:
      - host_choice
      - host_folder
      - host_labels
      - host_tags
      - service_labels
      - service_regex
      type: object
    ServiceGroup:
      properties:
        links:
          description: list of links to other resources.
          example: null
          items:
            $ref: '#/components/schemas/Link'
          type: array
        domainType:
          default: service_group
          description: The domain type of the object.
        id:
          description: The unique identifier for this domain-object type.
          type: string
        title:
          description: A human readable title of this object. Can be used for user
            interfaces.
          type: string
        members:
          description: The container for external resources, like linked foreign objects
            or actions.
          type: object
        extensions:
          description: All the attributes of the domain object.
          type: object
      required:
      - domainType
      - links
      type: object
    TagCondition:
      discriminator:
        mapping:
          is: '#/components/schemas/TagConditionScalarSchemaBase'
          is_not: '#/components/schemas/TagConditionScalarSchemaBase'
          none_of: '#/components/schemas/TagConditionConditionSchemaBase'
          one_of: '#/components/schemas/TagConditionConditionSchemaBase'
        propertyName: operator
      oneOf:
      - $ref: '#/components/schemas/TagConditionScalarSchemaBase'
      - $ref: '#/components/schemas/TagConditionScalarSchemaBase'
      - $ref: '#/components/schemas/TagConditionConditionSchemaBase'
      - $ref: '#/components/schemas/TagConditionConditionSchemaBase'
      properties: {}
      type: object
    TagConditionConditionSchemaBase:
      properties:
        key:
          description: The name of the tag.
          type: string
        operator:
          description: If the matched tag should be one of the given values, or not.
          enum:
          - one_of
          - none_of
          type: string
        value:
          description: A list of values for the tag.
          items:
            description: The value of a tag.
            type: string
          type: array
      type: object
    TagConditionScalarSchemaBase:
      properties:
        key:
          description: The name of the tag.
          type: string
        operator:
          description: If the tag's value should match what is given under the field
            `value`.
          enum:
          - is
          - is_not
          type: string
        value:
          description: The value of a tag.
          type: string
      type: object
    TagGroupAttributes:
      additionalProperties:
        description: The value of the tag-group attribute. Each tag is a mapping of
          string to string, where the tag name must start with `tag_`.
        type: string
      properties: {}
      type: object
    TimeAllowedRange:
      properties:
        start:
          description: The start time of day. Inclusive. Use ISO8601 format. Seconds
            are stripped.
          type: string
        end:
          description: The end time of day. Inclusive. Use ISO8601 format. Seconds
            are stripped.
          type: string
      type: object
    TimePeriodException:
      properties:
        date:
          description: The date of the time period exception.8601 profile
          example: '2020-01-01'
          format: date
          type: string
        time_ranges:
          example:
          - end: '18:00'
            start: '14:00'
          items:
            $ref: '#/components/schemas/TimeRange'
          type: array
      required:
      - date
      type: object
    TimeRange:
      properties:
        start:
          description: The start time of the period's time range
          example: '14:00'
          format: time
          type: string
        end:
          description: The end time of the period's time range
          example: '16:00'
          format: time
          type: string
      required:
      - end
      - start
      type: object
    TimeRangeActive:
      properties:
        day:
          description: The day for which time ranges are to be specified. The 'all'
            option allows to specify time ranges for all days.
          pattern: all|monday|tuesday|wednesday|thursday|friday|saturday|sunday
          type: string
        time_ranges:
          items:
            $ref: '#/components/schemas/TimeRange'
          type: array
      type: object
    TranslateNames:
      properties:
        convert_case:
          default: nop
          description: "Convert all detected hostnames to upper- or lower-case.\n\n\
            \ * `nop` - Do not convert anything\n * `lower` - Convert all hostnames\
            \ to lowercase.\n * `upper` - Convert all hostnames to uppercase."
          enum:
          - nop
          - lower
          - upper
          type: string
        drop_domain:
          description: "Drop the rest of the domain, only keep the hostname. Will\
            \ not affect IP addresses.\n\nExamples:\n\n * `192.168.0.1` -> `192.168.0.1`\n\
            \ * `foobar.example.com` -> `foobar`\n * `example.com` -> `example`\n\
            \ * `example` -> `example`\n\nThis will be executed **after**:\n\n * `convert_case`\n"
          type: boolean
        regexp_rewrites:
          description: "Rewrite discovered hostnames with multiple regular expressions.\
            \ The replacements will be done one after another in the order they appear\
            \ in the list. If not anchored at the end by a `$` character, the regexpwill\
            \ be anchored at the end implicitly by adding a `$` character.\n\nThese\
            \ will be executed **after**:\n\n * `convert_case`\n * `drop_domain`\n"
          items:
            $ref: '#/components/schemas/RegexpRewrites'
          type: array
        hostname_replacement:
          description: "Replace one value with another.\n\nThese will be executed\
            \ **after**:\n\n * `convert_case`\n * `drop_domain`\n * `regexp_rewrites`\n"
          items:
            $ref: '#/components/schemas/DirectMapping'
          type: array
      type: object
    UpdateContactGroup:
      properties:
        name:
          description: The name of the contact group.
          example: OnCall
          type: string
        attributes:
          $ref: '#/components/schemas/UpdateGroup'
      required:
      - name
      type: object
    UpdateDiscoveryPhase:
      properties:
        check_type:
          description: The name of the check which this service uses.
          example: df
          type: string
        service_item:
          description: The value uniquely identifying the service on a given host.
          example: /home
          nullable: true
          type: string
        target_phase:
          description: The target phase of the service.
          enum:
          - active
          - active_ignored
          - clustered_ignored
          - clustered_monitored
          - clustered_undecided
          - clustered_vanished
          - custom
          - custom_ignored
          - ignored
          - legacy
          - legacy_ignored
          - manual
          - monitored
          - removed
          - undecided
          - vanished
          example: monitored
          type: string
      required:
      - check_type
      - service_item
      - target_phase
      type: object
    UpdateFolder:
      properties:
        title:
          description: The title of the folder. Used in the GUI.
          example: Virtual Servers.
          type: string
        attributes:
          anyOf:
          - $ref: '#/components/schemas/FolderUpdateAttribute'
          - $ref: '#/components/schemas/CustomAttributes'
          - $ref: '#/components/schemas/TagGroupAttributes'
          description: Replace all attributes with the ones given in this field. Already
            setattributes, not given here, will be removed.
          example: &id013
            networking: wan
        update_attributes:
          anyOf:
          - $ref: '#/components/schemas/FolderUpdateAttribute'
          - $ref: '#/components/schemas/CustomAttributes'
          - $ref: '#/components/schemas/TagGroupAttributes'
          description: Only set the attributes which are given in this field. Already
            set attributes will not be touched.
          example: &id014
            tag_criticality: prod
        remove_attributes:
          description: A list of attributes which should be removed.
          example: &id015
          - tag_foobar
          items:
            type: string
          type: array
      type: object
    UpdateFolderEntry:
      properties:
        title:
          description: The title of the folder. Used in the GUI.
          example: Virtual Servers.
          type: string
        attributes:
          anyOf:
          - $ref: '#/components/schemas/FolderUpdateAttribute'
          - $ref: '#/components/schemas/CustomAttributes'
          - $ref: '#/components/schemas/TagGroupAttributes'
          description: Replace all attributes with the ones given in this field. Already
            setattributes, not given here, will be removed.
          example: *id013
        update_attributes:
          anyOf:
          - $ref: '#/components/schemas/FolderUpdateAttribute'
          - $ref: '#/components/schemas/CustomAttributes'
          - $ref: '#/components/schemas/TagGroupAttributes'
          description: Only set the attributes which are given in this field. Already
            set attributes will not be touched.
          example: *id014
        remove_attributes:
          description: A list of attributes which should be removed.
          example: *id015
          items:
            type: string
          type: array
        folder:
          description: 'The path name of the folder.


            Path delimiters can be either `~`, `/` or `\`. Please use the one most
            appropriate for your quoting/escaping needs. A good default choice is
            `~`.'
          example: /
          pattern: (?:(?:[~\\\/]|(?:[~\\\/][-_ a-zA-Z0-9.]+)+[~\\\/]?)|[0-9a-fA-F]{32})
          type: string
      required:
      - folder
      type: object
    UpdateGroup:
      properties:
        alias:
          description: The name used for displaying in the GUI.
          example: Example Group
          type: string
      required:
      - alias
      type: object
    UpdateHost:
      properties:
        attributes:
          anyOf:
          - $ref: '#/components/schemas/HostUpdateAttribute'
          - $ref: '#/components/schemas/CustomAttributes'
          - $ref: '#/components/schemas/TagGroupAttributes'
          description: Replace all currently set attributes on the host, with these
            attributes. Any previously set attributes which are not given here will
            be removed.
          example: &id016
            ipaddress: 192.168.0.123
        update_attributes:
          anyOf:
          - $ref: '#/components/schemas/HostUpdateAttribute'
          - $ref: '#/components/schemas/CustomAttributes'
          - $ref: '#/components/schemas/TagGroupAttributes'
          description: Just update the hosts attributes with these attributes. The
            previously set attributes will not be touched.
          example: &id017
            ipaddress: 192.168.0.123
        remove_attributes:
          description: A list of attributes which should be removed.
          example: &id018
          - tag_foobar
          items:
            type: string
          type: array
      type: object
    UpdateHostEntry:
      properties:
        attributes:
          anyOf:
          - $ref: '#/components/schemas/HostUpdateAttribute'
          - $ref: '#/components/schemas/CustomAttributes'
          - $ref: '#/components/schemas/TagGroupAttributes'
          description: Replace all currently set attributes on the host, with these
            attributes. Any previously set attributes which are not given here will
            be removed.
          example: *id016
        update_attributes:
          anyOf:
          - $ref: '#/components/schemas/HostUpdateAttribute'
          - $ref: '#/components/schemas/CustomAttributes'
          - $ref: '#/components/schemas/TagGroupAttributes'
          description: Just update the hosts attributes with these attributes. The
            previously set attributes will not be touched.
          example: *id017
        remove_attributes:
          description: A list of attributes which should be removed.
          example: *id018
          items:
            type: string
          type: array
        host_name:
          description: The hostname or IP address itself.
          example: example.com
          pattern: '[-0-9a-zA-Z_.]+'
          type: string
      required:
      - host_name
      type: object
    UpdateHostGroup:
      properties:
        name:
          description: The name of the host group.
          example: windows
          type: string
        attributes:
          $ref: '#/components/schemas/UpdateGroup'
      required:
      - name
      type: object
    UpdateHostTagGroup:
      properties:
        title:
          description: A title for the host tag
          example: Kubernetes
          type: string
        topic:
          description: Different tags can be grouped in a topic
          example: Data Sources
          type: string
        help:
          description: A help description for the tag group
          example: Kubernetes Pods
          type: string
        tags:
          description: A list of host tags belonging to the host tag group
          example:
          - ident: pod
            title: Pod
          items:
            $ref: '#/components/schemas/HostTag1'
          type: array
        repair:
          default: false
          description: The host tag group can be in use by other hosts. Setting repair
            to True gives permission to automatically update the tag from the affected
            hosts.
          example: false
          type: boolean
      type: object
    UpdateNodes:
      properties:
        nodes:
          description: Nodes where the newly created host should be the cluster-container
            of.
          example:
          - host1
          - host2
          - host3
          items:
            example: example.com
            pattern: '[-0-9a-zA-Z_.]+'
            type: string
          type: array
      required:
      - nodes
      type: object
    UpdatePassword:
      properties:
        title:
          description: A title for the password
          example: Kubernetes login
          type: string
        comment:
          description: A comment for the password
          example: Kommentar
          type: string
        documentation_url:
          description: An optional URL pointing to documentation or any other page.
            You can use either global URLs (beginning with http://), absolute local
            urls (beginning with /) or relative URLs (that are relative to check_mk/).
          example: localhost
          type: string
        password:
          description: The password string
          example: password
          type: string
        owner:
          description: Each password is owned by a group of users which are able to
            edit, delete and use existing passwords.
          example: admin
          type: string
        shared:
          description: The list of members to share the password with
          example:
          - all
          items:
            description: By default only the members of the owner contact group are
              permitted to use a a configured password. It is possible to share a
              password with other groups of users to make them able to use a password
              in checks.
            example: all
            type: string
          type: array
      type: object
    UpdateServiceGroup:
      properties:
        name:
          description: The name of the service group.
          example: windows
          type: string
        attributes:
          $ref: '#/components/schemas/UpdateGroup'
      required:
      - name
      type: object
    UpdateTimePeriod:
      properties:
        alias:
          description: An alias for the time period
          example: alias
          type: string
        active_time_ranges:
          description: The list of active time ranges which replaces the existing
            list of time ranges
          example:
          - day: monday
            time_ranges:
            - end: '14:00'
              start: '12:00'
          items:
            $ref: '#/components/schemas/TimeRangeActive'
          type: array
        exceptions:
          description: A list of additional time ranges to be added.
          example:
          - date: '2020-01-01'
            time_ranges:
            - end: '18:00'
              start: '14:00'
          items:
            $ref: '#/components/schemas/TimePeriodException'
          type: array
      type: object
    UpdateUser:
      properties:
        fullname:
          description: The alias or full name of the user
          example: Mathias Kettner
          type: string
        auth_option:
          allOf:
          - $ref: '#/components/schemas/AuthUpdateOption'
          description: Authentication option for the user
          example:
            auth_type: password
            password: password
        disable_login:
          description: The user can be blocked from login but will remain part of
            the site. The disabling does not affect notification and alerts.
          example: false
          type: boolean
        contact_options:
          allOf:
          - $ref: '#/components/schemas/UserContactOption'
          description: Contact settings for the user
          example:
            email: user@example.com
        pager_address:
          description: ''
          example: ''
          type: string
        idle_timeout:
          allOf:
          - $ref: '#/components/schemas/IdleOption'
          description: Idle timeout for the user
          example: {}
        roles:
          description: The list of assigned roles to the user
          example:
          - user
          items:
            description: A user role
            example: user
            type: string
          type: array
        authorized_sites:
          description: The names of the sites the user is authorized to handle
          example:
          - heute
          items:
            type: string
          type: array
        contactgroups:
          description: Assign the user to one or multiple contact groups. If no contact
            group is specified then no monitoring contact will be created for the
            user.
          example:
          - all
          items:
            description: Assign the user to one or multiple contact groups
            example: all
            type: string
          type: array
        disable_notifications:
          allOf:
          - $ref: '#/components/schemas/DisabledNotifications'
          description: ''
          example:
            disabled: false
        language:
          description: Configure the language to be used by the user in the user interface.
            Omitting this will configure the default language
          enum:
          - de
          - en
          - ro
          example: en
          type: string
        interface_options:
          allOf:
          - $ref: '#/components/schemas/UserInterfaceUpdateAttributes'
          description: ''
          example:
            interface_theme: dark
      type: object
    UserCollection:
      properties:
        links:
          description: list of links to other resources.
          example: null
          items:
            $ref: '#/components/schemas/Link'
          type: array
        id:
          default: all
          description: The name of this collection.
          type: string
        domainType:
          default: user_config
          description: The domain type of the objects in the collection.
        title:
          description: A human readable title of this object. Can be used for user
            interfaces.
          type: string
        value:
          description: A list of user objects.
          items:
            $ref: '#/components/schemas/UserObject'
          type: array
        extensions:
          description: Additional attributes alongside the collection.
          type: object
      required:
      - links
      type: object
    UserContactOption:
      properties:
        email:
          description: The mail address of the user. Required if the user is a monitoringcontact
            and receives notifications via mail.
          example: user@example.com
          type: string
        fallback_contact:
          default: false
          description: In case none of your notification rules handles a certain event
            a notification will be sent to the specified email
          example: false
          type: boolean
      required:
      - email
      type: object
    UserIdleOption:
      properties:
        option:
          description: This field indicates if the idle timeout uses the global configuration,
            is disabled or uses an individual duration
          enum:
          - global
          - disable
          - individual
          type: string
        duration:
          description: The duration in seconds of the individual idle timeout if individual
            is selected as idle timeout option.
          example: 3600
          type: integer
      required:
      - option
      type: object
    UserInterfaceAttributes:
      properties:
        interface_theme:
          default: default
          description: The theme of the interface
          enum:
          - default
          - dark
          - light
          type: string
        sidebar_position:
          default: right
          description: The position of the sidebar
          enum:
          - left
          - right
          type: string
        navigation_bar_icons:
          default: hide
          description: This option decides if icons in the navigation bar should show/hide
            the respective titles
          enum:
          - hide
          - show
          type: string
        mega_menu_icons:
          default: topic
          description: This option decides if colored icon should be shown foe every
            entry in the mega menus or alternatively only for the headlines (the 'topics')
          enum:
          - topic
          - entry
          type: string
        show_mode:
          default: default
          description: This option decides what show mode should be used for unvisited
            menus. Alternatively, this option can also be used to enforce show more
            removing the three dots for all menus.
          enum:
          - default
          - default_show_less
          - default_show_more
          - enforce_show_more
          type: string
      type: object
    UserInterfaceUpdateAttributes:
      properties:
        interface_theme:
          description: The theme of the interface
          enum:
          - default
          - dark
          - light
          type: string
        sidebar_position:
          description: The position of the sidebar
          enum:
          - left
          - right
          type: string
        navigation_bar_icons:
          description: This option decides if icons in the navigation bar should show/hide
            the respective titles
          enum:
          - hide
          - show
          type: string
        mega_menu_icons:
          description: This option decides if colored icon should be shown foe every
            entry in the mega menus or alternatively only for the headlines (the 'topics')
          enum:
          - topic
          - entry
          type: string
        show_mode:
          description: This option decides what show mode should be used for unvisited
            menus. Alternatively, this option can also be used to enforce show more
            removing the three dots for all menus.
          enum:
          - default
          - default_show_less
          - default_show_more
          - enforce_show_more
          type: string
      type: object
    UserObject:
      properties:
        links:
          description: list of links to other resources.
          example: null
          items:
            $ref: '#/components/schemas/Link'
          type: array
        domainType:
          default: user_config
          description: The domain type of the object.
        id:
          description: The unique identifier for this domain-object type.
          type: string
        title:
          description: A human readable title of this object. Can be used for user
            interfaces.
          type: string
        members:
          description: The container for external resources, like linked foreign objects
            or actions.
          type: object
        extensions:
          anyOf:
          - $ref: '#/components/schemas/BaseUserAttributes'
          - $ref: '#/components/schemas/CustomUserAttributes'
          description: The attributes of the user
          example: null
      required:
      - links
      type: object
    X509PEM:
      properties:
        cert:
          description: PEM-encoded X.509 certificate.
          type: string
      required:
      - cert
      type: object
    X509ReqPEMUUID:
      properties:
        csr:
          description: PEM-encoded X.509 CSR. The CN must a valid version-4 UUID.
          example: '-----BEGIN CERTIFICATE REQUEST-----

            ...

            -----END CERTIFICATE REQUEST-----

            '
          type: string
      required:
      - csr
      type: object
  securitySchemes:
    cookieAuth:
      description: Any user of Checkmk, who has already logged in, and thus got a
        cookie assigned, can use the REST API. Some actions may or may not succeed
        due to group and permission restrictions. This authentication method has theleast
        precedence.
      in: cookie
      name: auth_cmk
      type: apiKey
    headerAuth:
      bearerFormat: username password
      description: Use user credentials in the `Authorization` HTTP header. The format
        of the header value is `$user $password`. This method has the highest precedence.
        If it succeeds, all other authentication methods are skipped.
      scheme: bearer
      type: http
    webserverAuth:
      description: Use the authentication method of the webserver ('basic' or 'digest').
        To use this, you'll either have to re-configure the site's Apache instance
        yourself, or disable multi-site logins via `omd config`. This method takes
        precedence over the `cookieAuth` method.
      scheme: basic
      type: http
externalDocs:
  description: User guide
  url: https://docs.checkmk.com/master
info:
  contact:
    email: feedback@checkmk.com
    name: Contact the Checkmk Team
    url: https://checkmk.com/contact.php
  description: "# Introduction\n\nWith the Checkmk REST-API you can transfer and execute\
    \ the tasks you normally perform\nmanually in Checkmk's GUI to the Checkmk server\
    \ via command or script.\n\nREST stands for REpresentational State Transfer and\
    \ describes an architecture for the exchange of\ndata on distributed systems -\
    \ especially for Web services. The implementation of this REST-API is\ndone via\
    \ the HTTP/1.1 protocol, where resources are addressed via URIs and accessed with\
    \ HTTP\nmethods (GET, POST, PUT, DELETE).\n\nThe API is documented in a machine-readable\
    \ schema and a human-readable format in English, with all\nresources, their input\
    \ and output parameters and the associated value ranges. The API is created\n\
    with the OpenAPI specification 3.x, an API description format especially for REST\
    \ APIs.\n\nThe API documentation created with this specification is displayed\
    \ to you with ReDoc (a\nresponsive Web design for an OpenAPI document) or with\
    \ Swagger UI (an OpenAPI document\nvisualization for direct interaction with the\
    \ API's resources).\n\n\n# Prerequisites\n\n* You know Checkmk and its principles\
    \ of setup and configuration.\n* You are experienced in using an API, preferably\
    \ a REST-API.\n* You are familiar with at least one of the applications for which\
    \ sample code is available.\n* It helps if you have already worked with ReDoc\
    \ and/or Swagger UI.\n\n# Responses\n\nAs specified by the `Content-Type` of `application/json`,\
    \ the response payload is serialized with\nJSON and encoded in UTF-8.\n\n## JSON\
    \ envelope attributes for objects\n\nAll objects are wrapped in a JSON structure\
    \ called a \"Domain Object\" which take the following\nform:\n\n    {\n      \
    \  \"domainType\": <domain type>,\n        \"instanceId\": <string to uniquely\
    \ identify domain object>,\n        \"title\": <human readable header>,\n    \
    \    \"links\": [<relation link>, ...],\n        \"extensions\": {\n         \
    \   <attribute name>: <attribute value>,\n            ...\n        },\n      \
    \  \"members\": {\n            <member name>: <member definition>,\n         \
    \   ...\n        }\n     }\n\nThe collections `members`, `extensions` and `links`\
    \ are defined as such:\n\n * domainType - The type of object this refers to, e.g.\
    \ `host`, and `service`.\n * instanceId - The globally unique identifier for this\
    \ particular object.\n * title - A human readable string which is only relevant\
    \ for user interfaces.\n * links - A collection of links to other resources or\
    \ actions.\n * extensions - The data container for all direct attributes of the\
    \ object.\n * members - The container for external resources, like linked foreign\
    \ objects or actions.\n\n### Note\n\nPreviously, an attribute called `members`\
    \ has been used in these objects, but it will no longer be\nused. All relations\
    \ to other objects will be listed in the `links` attribute.\n\n## JSON envelope\
    \ for collections\n\nFor collections, the JSON envelope looks slightly different.\n\
    \n    {\n        \"domainType\": <domain type>,\n        \"instanceId\": <string\
    \ to uniquely identify domain object>,\n        \"title\": <human readable header>,\n\
    \        \"links\": [<relation link>, ...],\n        \"extensions\": {\n     \
    \       <attribute name>: <attribute value>,\n            ...\n        },\n  \
    \      \"value\": [<domain object 1>, <domain object 2>, ...],\n    }\n\n## Link\
    \ relations\n\nEvery response comes with a collection of `links` to inform the\
    \ API client on possible\nfollow-up actions. For example, a folder response can\
    \ have links to resources for updating,\ndeleting and moving the folder. The client\
    \ does not have to know about the URL structure, it\njust needs to follow the\
    \ link. In this sense, the API is quasi self-documenting.\nThis provision of additional\
    \ information as a REST-API principle is also called\n[HATEOAS](https://en.wikipedia.org/wiki/HATEOAS).\
    \ In this context,\na `rel` specifies the type of relationship of the concerning\
    \ resource to the resource that generated\nthis representation. The rel attribute\
    \ is only of informational nature for the client.\n\nObjects may have these possible\
    \ generic link relations:\n\n * self - The API location of the current object\n\
    \ * help - Documentation for the currently requested endpoint\n * collection -\
    \ The API location for a list of object of the current objects' type\n * edit\
    \ - The API location to update the current object\n * edit-form - The GUI location\
    \ to edit the current object\n * delete - The API location to delete the current\
    \ object\n\nMembers of collections have also:\n\n * item - The API location of\
    \ a member of the current collection\n\nPlease note that these (except for self)\
    \ are completely optional and may or may not be available on\ncertain endpoints.\
    \ More specialized link relations are also available:\n\n * invoke - The API location\
    \ to invoke an action\n * start - The API location to start a long running process,\
    \ which the current object represents\n * cancel - The API location to abort the\
    \ long running process, which the current object represents\n * download - The\
    \ URL to download the object described by the current endpoint\n * move - The\
    \ API location to move the current object to another destination\n\nEndpoint specific\
    \ link relations are also possible.\n\n# Updating values\n\nWhen an object is\
    \ updated by multiple requests at the same time, it can happen that the second\n\
    request will overwrite important values from the first request. This is known\
    \ as the \"lost update\nproblem\" and can be prevented by a locking scheme. The\
    \ scheme that Checkmk uses for this is called\nan \"optimistic lock\" and allows\
    \ read access even when writes are happening. It works as follows:\n\n1. The user\
    \ fetches the object to be modified.\n2. The server responds with the data and\
    \ an HTTP `ETag` header containing a value which is something\n   like the \"\
    checksum\" of the object.\n3. In order to modify the object, the user sends an\
    \ update request with an HTTP `If-Match` header\n   which contains the value of\
    \ the previously fetched `ETag`. This ensures that the writer has seen\n   the\
    \ object to be modified. If any modifications by someone else were to happen between\
    \ the\n   request (1) and the update (3) these values would not match and the\
    \ update would fail.\n\nThis scheme is used for most `PUT` requests throughout\
    \ the REST API and always works the same way.\nDetailed documentation of the various\
    \ involved fields as well as the possible error messages can\nbe found on the\
    \ documentation of each affected endpoint.\n\n# Querying Status Data\n\nThe endpoints\
    \ in the category \"Monitoring\" support arbitrary Livestatus expressions (including\
    \ And,\nOr combinators) and all columns of some specific tables can be queried.\n\
    \n### Note\n\nYou can find an introduction to basic monitoring principles including\
    \ host and service status in the\n[Checkmk guide](https://docs.checkmk.com/latest/en/monitoring_basics.html).\n\
    \n## Filter expressions\n\nA *filter expression* is a recursively defined structure\
    \ containing *binary expression nodes*,\n*negation nodes* or *combination nodes*.\
    \ With *filter expressions*, very complex Livestatus queries\ncan be constructed.\n\
    \n## Binary expression node\n\nA *binary expression node* represents one condition\
    \ on which to filter. `left` is always a\nLivestatus column name, `right` is always\
    \ a value.\n\n### Definition\n\n    {'op': <livestatus operator>, 'left': <livestatus\
    \ column>, 'right': <value>}\n\n### Operators\n\nA list of all list of all possible\n\
    [Livestatus filter operators](https://docs.checkmk.com/latest/en/livestatus_references.html#heading_filter),\n\
    can be found in the Checkmk documentation.\n\n### Example\n\nThis example filters\
    \ for an entry where the host_name equals to \"example.com\".\n\n    {'op': '=',\
    \ 'left': 'host_name', 'right': 'example.com'}\n\n### Note\n\nFor the specific\
    \ table used, please consult the endpoint documentation.\n\n## Negation node\n\
    \nThere is only one negation node, the `not` expression, which logically negates\
    \ a *filter\nexpression*. `expr` is a valid *filter expression*, so any *binary\
    \ expression node*, *negation\nnode* or *combination node* may be used here.\n\
    \n### Definition\n\n     {'op': 'not', 'expr': <any filter expr>}\n\n### Example\n\
    \nThis example filters for hosts which **do not** have the host_name \"example.com\"\
    .\n\n    {'op': 'not', 'expr': {'op': '=', 'left': 'host_name', 'right': 'example.com'}}\n\
    \nThis is equivalent to\n\n    {'op': '!=', 'left': 'host_name', 'right': 'example.com'}\n\
    \n## Combination nodes\n\n`and` and `or` combinators are supported. They can be\
    \ nested arbitrarily. `expr` is a list of\nvalid *filter expressions*, so any\
    \ number of *binary nodes*, *negation nodes* or *combination nodes*\nmay be used\
    \ there. These expression do not have to all be of the same type, so a mix of\
    \ *binary\nexpression nodes*, *negation nodes* and *combination nodes* is also\
    \ possible.\n\n### Definition\n\nThis results in a *filter expression* in which\
    \ all the contained expression must be true:\n\n    {'op': 'and', 'expr': [<any\
    \ filter expr>, ...]}\n\nThis results in a *filter expression* in which only one\
    \ of the contained expression needs to\nbe true:\n\n    {'op': 'or', 'expr': [<any\
    \ filter expr>, ...]}\n\n### Example\n\nThis example filters for the host \"example.com\"\
    \ only when the `state` column is set to `0`, which\nmeans the state is OK.\n\n\
    \    {'op': 'and', 'expr': [{'op': '=', 'left': 'host_name', 'right': 'example.com'},\n\
    \                            {'op': '=', 'left': 'state', 'right': 0}]}\n\n# Table\
    \ definitions\n\nThe following Livestatus tables can be queried through the REST-API.\
    \ Which table is being used\nin a particular endpoint can be seen in the endpoint\
    \ documentation.\n\n## Downtimes Table\n\n### Columns:\n\n| Column name | Type\
    \ | Description |\n| - | - | - |\n|author | string | The contact that scheduled\
    \ the downtime |\n|comment | string | A comment text |\n|duration | int | The\
    \ duration of the downtime in seconds |\n|end_time | time | The end time of the\
    \ downtime as UNIX timestamp |\n|entry_time | time | The time the entry was made\
    \ as UNIX timestamp |\n|fixed | int | A 1 if the downtime is fixed, a 0 if it\
    \ is flexible |\n|id | int | The id of the downtime |\n|is_pending | int | 1 if\
    \ the downtime is currently pending **(not active)**, 0 if it is active |\n|is_service\
    \ | int | 0, if this entry is for a host, 1 if it is for a service |\n|origin\
    \ | int | A 0 if the downtime has been set by a command, a 1 if it has been configured\
    \ by a rule |\n|recurring | int | For recurring downtimes: 1: hourly, 2: daily,\
    \ 3: weekly, 4: two-weekly, 5: four-weekly. Otherwise 0 |\n|start_time | time\
    \ | The start time of the downtime as UNIX timestamp |\n|triggered_by | int |\
    \ The id of the downtime this downtime was triggered by or 0 if it was not triggered\
    \ by another downtime |\n|type | int | The type of the downtime: 0 if it is active,\
    \ 1 if it is pending |\n\n### Adjacent columns:\n\n| Column name | Type | Description\
    \ |\n| - | - | - |\n|host_accept_passive_checks | int | Whether passive host checks\
    \ are accepted **(0/1)** |\n|host_acknowledged | int | Whether the current problem\
    \ has been acknowledged **(0/1)** |\n|host_acknowledgement_type | int | Type of\
    \ acknowledgement **(0: none, 1: normal, 2: sticky)** |\n|host_action_url | string\
    \ | An optional URL to custom actions or information about this host |\n|host_action_url_expanded\
    \ | string | The same as action_url, but with the most important macros expanded\
    \ |\n|host_active_checks_enabled | int | Whether active checks of the object are\
    \ enabled **(0/1)** |\n|host_address | string | IP address |\n|host_alias | string\
    \ | An alias name for the host |\n|host_check_command | string | Logical command\
    \ name for active checks |\n|host_check_command_expanded | string | Logical command\
    \ name for active checks, with macros expanded |\n|host_check_flapping_recovery_notification\
    \ | int | Whether to check to send a recovery notification when flapping stops\
    \ **(0/1)** |\n|host_check_freshness | int | Whether freshness checks are enabled\
    \ **(0/1)** |\n|host_check_interval | float | Number of basic interval lengths\
    \ between two scheduled checks |\n|host_check_options | int | The current check\
    \ option, forced, normal, freshness **(0-2)** |\n|host_check_period | string |\
    \ Time period in which this object will be checked. If empty then the check will\
    \ always be executed. |\n|host_check_type | int | Type of check **(0: active,\
    \ 1: passive)** |\n|host_checks_enabled | int | Whether checks of the object are\
    \ enabled **(0/1)** |\n|host_childs | list | A list of all direct children of\
    \ the host |\n|host_comments | list | A list of the ids of all comments |\n|host_comments_with_extra_info\
    \ | list | A list of all comments with id, author, comment, entry type and entry\
    \ time |\n|host_comments_with_info | list | A list of all comments with id, author\
    \ and comment |\n|host_contact_groups | list | A list of all contact groups this\
    \ object is in |\n|host_contacts | list | A list of all contacts of this object\
    \ |\n|host_current_attempt | int | Number of the current check attempts |\n|host_current_notification_number\
    \ | int | Number of the current notification |\n|host_custom_variable_names |\
    \ list | A list of the names of the custom variables |\n|host_custom_variable_values\
    \ | list | A list of the values of the custom variables |\n|host_custom_variables\
    \ | dict | A dictionary of the custom variables |\n|host_display_name | string\
    \ | Optional display name |\n|host_downtimes | list | A list of the ids of all\
    \ scheduled downtimes of this object |\n|host_downtimes_with_extra_info | list\
    \ | A list of the scheduled downtimes with id, author, comment, origin, entry_time,\
    \ start_time, end_time, fixed, duration, recurring and is_pending |\n|host_downtimes_with_info\
    \ | list | A list of the scheduled downtimes with id, author and comment |\n|host_event_handler\
    \ | string | Command used as event handler |\n|host_event_handler_enabled | int\
    \ | Whether event handling is enabled **(0/1)** |\n|host_execution_time | float\
    \ | Time the check needed for execution |\n|host_filename | string | The value\
    \ of the custom variable FILENAME |\n|host_first_notification_delay | float |\
    \ Delay before the first notification |\n|host_flap_detection_enabled | int |\
    \ Whether flap detection is enabled **(0/1)** |\n|host_flappiness | float | The\
    \ current level of flappiness, this corresponds with the recent frequency of state\
    \ changes |\n|host_groups | list | A list of all host groups this object is in\
    \ |\n|host_hard_state | int | The effective hard state of this object |\n|host_has_been_checked\
    \ | int | Whether a check has already been executed **(0/1)** |\n|host_high_flap_threshold\
    \ | float | High threshold of flap detection |\n|host_icon_image | string | The\
    \ name of an image file to be used in the web pages |\n|host_icon_image_alt |\
    \ string | Alternative text for the icon_image |\n|host_icon_image_expanded |\
    \ string | The same as icon_image, but with the most important macros expanded\
    \ |\n|host_in_check_period | int | Whether this object is currently in its check\
    \ period **(0/1)** |\n|host_in_notification_period | int | Whether this object\
    \ is currently in its notification period **(0/1)** |\n|host_in_service_period\
    \ | int | Whether this object is currently in its service period **(0/1)** |\n\
    |host_initial_state | int | Initial state |\n|host_is_executing | int | is there\
    \ a check currently running **(0/1)** |\n|host_is_flapping | int | Whether the\
    \ state is flapping **(0/1)** |\n|host_label_names | list | A list of the names\
    \ of the labels |\n|host_label_source_names | list | A list of the names of the\
    \ label sources |\n|host_label_source_values | list | A list of the values of\
    \ the label sources |\n|host_label_sources | dict | A dictionary of the label\
    \ sources |\n|host_label_values | list | A list of the values of the labels |\n\
    |host_labels | dict | A dictionary of the labels |\n|host_last_check | time |\
    \ Time of the last check **(Unix timestamp)** |\n|host_last_hard_state | int |\
    \ Last hard state |\n|host_last_hard_state_change | time | Time of the last hard\
    \ state change - soft or hard **(Unix timestamp)** |\n|host_last_notification\
    \ | time | Time of the last notification **(Unix timestamp)** |\n|host_last_state\
    \ | int | State before last state change |\n|host_last_state_change | time | Time\
    \ of the last state change - soft or hard **(Unix timestamp)** |\n|host_last_time_down\
    \ | time | The last time the host was DOWN **(Unix timestamp)** |\n|host_last_time_unreachable\
    \ | time | The last time the host was UNREACHABLE **(Unix timestamp)** |\n|host_last_time_up\
    \ | time | The last time the host was UP **(Unix timestamp)** |\n|host_latency\
    \ | float | Time difference between scheduled check time and actual check time\
    \ |\n|host_long_plugin_output | string | Long **(extra)** output of the last check\
    \ |\n|host_low_flap_threshold | float | Low threshold of flap detection |\n|host_max_check_attempts\
    \ | int | Maximum attempts for active checks before a hard state |\n|host_metrics\
    \ | list | A list of all metrics of this object that historically existed |\n\
    |host_mk_inventory | blob | The file content of the Check_MK HW/SW-Inventory |\n\
    |host_mk_inventory_gz | blob | The gzipped file content of the Check_MK HW/SW-Inventory\
    \ |\n|host_mk_inventory_last | time | The timestamp of the last Check_MK HW/SW-Inventory\
    \ for this host. 0 means that no inventory data is present |\n|host_mk_logwatch_files\
    \ | list | This list of logfiles with problems fetched via mk_logwatch |\n|host_modified_attributes\
    \ | int | A bitmask specifying which attributes have been modified |\n|host_modified_attributes_list\
    \ | list | A list of all modified attributes |\n|host_name | string | Host name\
    \ |\n|host_next_check | time | Scheduled time for the next check **(Unix timestamp)**\
    \ |\n|host_next_notification | time | Time of the next notification **(Unix timestamp)**\
    \ |\n|host_no_more_notifications | int | Whether to stop sending notifications\
    \ **(0/1)** |\n|host_notes | string | Optional notes for this object, with macros\
    \ not expanded |\n|host_notes_expanded | string | The same as notes, but with\
    \ the most important macros expanded |\n|host_notes_url | string | An optional\
    \ URL with further information about the object |\n|host_notes_url_expanded |\
    \ string | Same es notes_url, but with the most important macros expanded |\n\
    |host_notification_interval | float | Interval of periodic notification in minutes\
    \ or 0 if its off |\n|host_notification_period | string | Time period in which\
    \ problems of this object will be notified. If empty then notification will be\
    \ always |\n|host_notification_postponement_reason | string | reason for postponing\
    \ the pending notification, empty if nothing is postponed |\n|host_notifications_enabled\
    \ | int | Whether notifications of the host are enabled **(0/1)** |\n|host_num_services\
    \ | int | The total number of services of the host |\n|host_num_services_crit\
    \ | int | The number of the host's services with the soft state CRIT |\n|host_num_services_handled_problems\
    \ | int | The number of the host's services which have handled problems |\n|host_num_services_hard_crit\
    \ | int | The number of the host's services with the hard state CRIT |\n|host_num_services_hard_ok\
    \ | int | The number of the host's services with the hard state OK |\n|host_num_services_hard_unknown\
    \ | int | The number of the host's services with the hard state UNKNOWN |\n|host_num_services_hard_warn\
    \ | int | The number of the host's services with the hard state WARN |\n|host_num_services_ok\
    \ | int | The number of the host's services with the soft state OK |\n|host_num_services_pending\
    \ | int | The number of the host's services which have not been checked yet **(pending)**\
    \ |\n|host_num_services_unhandled_problems | int | The number of the host's services\
    \ which have unhandled problems |\n|host_num_services_unknown | int | The number\
    \ of the host's services with the soft state UNKNOWN |\n|host_num_services_warn\
    \ | int | The number of the host's services with the soft state WARN |\n|host_obsess_over_host\
    \ | int | The current obsess_over_host setting **(0/1)** |\n|host_parents | list\
    \ | A list of all direct parents of the host |\n|host_pending_flex_downtime |\
    \ int | Number of pending flexible downtimes |\n|host_percent_state_change | float\
    \ | Percent state change |\n|host_perf_data | string | Optional performance data\
    \ of the last check |\n|host_plugin_output | string | Output of the last check\
    \ |\n|host_pnpgraph_present | int | Whether there is a PNP4Nagios graph present\
    \ for this object **(-1/0/1)** |\n|host_previous_hard_state | int | Previous hard\
    \ state **(that hard state before the current/last hard state)** |\n|host_process_performance_data\
    \ | int | Whether processing of performance data is enabled **(0/1)** |\n|host_retry_interval\
    \ | float | Number of basic interval lengths between checks when retrying after\
    \ a soft error |\n|host_scheduled_downtime_depth | int | The number of downtimes\
    \ this object is currently in |\n|host_service_period | string | Time period during\
    \ which the object is expected to be available |\n|host_services | list | A list\
    \ of all services of the host |\n|host_services_with_fullstate | list | A list\
    \ of all services including full state information. The list of entries can grow\
    \ in future versions. |\n|host_services_with_info | list | A list of all services\
    \ including detailed information about each service |\n|host_services_with_state\
    \ | list | A list of all services of the host together with state and has_been_checked\
    \ |\n|host_smartping_timeout | int | Maximum expected time between two received\
    \ packets in ms |\n|host_staleness | float | The staleness of this object |\n\
    |host_state | int | The current state of the object, for hosts: 0/1/2 for UP/DOWN/UNREACH,\
    \ for services: 0/1/2/3 for OK/WARN/CRIT/UNKNOWN |\n|host_state_type | int | Type\
    \ of the current state **(0: soft, 1: hard)** |\n|host_statusmap_image | string\
    \ | The name of in image file for the status map |\n|host_structured_status |\
    \ blob | The file content of the structured status of the Check_MK HW/SW-Inventory\
    \ |\n|host_tag_names | list | A list of the names of the tags |\n|host_tag_values\
    \ | list | A list of the values of the tags |\n|host_tags | dict | A dictionary\
    \ of the tags |\n|host_total_services | int | The total number of services of\
    \ the host |\n|host_worst_service_hard_state | int | The worst hard state of all\
    \ of the host's services **(OK <= WARN <= UNKNOWN <= CRIT)** |\n|host_worst_service_state\
    \ | int | The worst soft state of all of the host's services **(OK <= WARN <=\
    \ UNKNOWN <= CRIT)** |\n|host_x_3d | float | 3D-Coordinates: X |\n|host_y_3d |\
    \ float | 3D-Coordinates: Y |\n|host_z_3d | float | 3D-Coordinates: Z |\n|service_accept_passive_checks\
    \ | int | Whether passive host checks are accepted **(0/1)** |\n|service_acknowledged\
    \ | int | Whether the current problem has been acknowledged **(0/1)** |\n|service_acknowledgement_type\
    \ | int | Type of acknowledgement **(0: none, 1: normal, 2: sticky)** |\n|service_action_url\
    \ | string | An optional URL to custom actions or information about this host\
    \ |\n|service_action_url_expanded | string | The same as action_url, but with\
    \ the most important macros expanded |\n|service_active_checks_enabled | int |\
    \ Whether active checks of the object are enabled **(0/1)** |\n|service_cache_interval\
    \ | int | For checks that base on cached agent data the interval in that this\
    \ cache is recreated. 0 for other services. |\n|service_cached_at | time | For\
    \ checks that base on cached agent data the time when this data was created. 0\
    \ for other services. |\n|service_check_command | string | Logical command name\
    \ for active checks |\n|service_check_command_expanded | string | Logical command\
    \ name for active checks, with macros expanded |\n|service_check_flapping_recovery_notification\
    \ | int | Whether to check to send a recovery notification when flapping stops\
    \ **(0/1)** |\n|service_check_freshness | int | Whether freshness checks are enabled\
    \ **(0/1)** |\n|service_check_interval | float | Number of basic interval lengths\
    \ between two scheduled checks |\n|service_check_options | int | The current check\
    \ option, forced, normal, freshness **(0-2)** |\n|service_check_period | string\
    \ | Time period in which this object will be checked. If empty then the check\
    \ will always be executed. |\n|service_check_type | int | Type of check **(0:\
    \ active, 1: passive)** |\n|service_checks_enabled | int | Whether checks of the\
    \ object are enabled **(0/1)** |\n|service_comments | list | A list of the ids\
    \ of all comments |\n|service_comments_with_extra_info | list | A list of all\
    \ comments with id, author, comment, entry type and entry time |\n|service_comments_with_info\
    \ | list | A list of all comments with id, author and comment |\n|service_contact_groups\
    \ | list | A list of all contact groups this object is in |\n|service_contacts\
    \ | list | A list of all contacts of this object |\n|service_current_attempt |\
    \ int | Number of the current check attempts |\n|service_current_notification_number\
    \ | int | Number of the current notification |\n|service_custom_variable_names\
    \ | list | A list of the names of the custom variables |\n|service_custom_variable_values\
    \ | list | A list of the values of the custom variables |\n|service_custom_variables\
    \ | dict | A dictionary of the custom variables |\n|service_description | string\
    \ | Service description |\n|service_display_name | string | Optional display name\
    \ |\n|service_downtimes | list | A list of the ids of all scheduled downtimes\
    \ of this object |\n|service_downtimes_with_extra_info | list | A list of the\
    \ scheduled downtimes with id, author, comment, origin, entry_time, start_time,\
    \ end_time, fixed, duration, recurring and is_pending |\n|service_downtimes_with_info\
    \ | list | A list of the scheduled downtimes with id, author and comment |\n|service_event_handler\
    \ | string | Command used as event handler |\n|service_event_handler_enabled |\
    \ int | Whether event handling is enabled **(0/1)** |\n|service_execution_time\
    \ | float | Time the check needed for execution |\n|service_first_notification_delay\
    \ | float | Delay before the first notification |\n|service_flap_detection_enabled\
    \ | int | Whether flap detection is enabled **(0/1)** |\n|service_flappiness |\
    \ float | The current level of flappiness, this corresponds with the recent frequency\
    \ of state changes |\n|service_groups | list | A list of all service groups this\
    \ object is in |\n|service_hard_state | int | The effective hard state of this\
    \ object |\n|service_has_been_checked | int | Whether a check has already been\
    \ executed **(0/1)** |\n|service_high_flap_threshold | float | High threshold\
    \ of flap detection |\n|service_icon_image | string | The name of an image file\
    \ to be used in the web pages |\n|service_icon_image_alt | string | Alternative\
    \ text for the icon_image |\n|service_icon_image_expanded | string | The same\
    \ as icon_image, but with the most important macros expanded |\n|service_in_check_period\
    \ | int | Whether this object is currently in its check period **(0/1)** |\n|service_in_notification_period\
    \ | int | Whether this object is currently in its notification period **(0/1)**\
    \ |\n|service_in_passive_check_period | int | Whether this service is currently\
    \ in its passive check period **(0/1)** |\n|service_in_service_period | int |\
    \ Whether this object is currently in its service period **(0/1)** |\n|service_initial_state\
    \ | int | Initial state |\n|service_is_executing | int | is there a check currently\
    \ running **(0/1)** |\n|service_is_flapping | int | Whether the state is flapping\
    \ **(0/1)** |\n|service_label_names | list | A list of the names of the labels\
    \ |\n|service_label_source_names | list | A list of the names of the label sources\
    \ |\n|service_label_source_values | list | A list of the values of the label sources\
    \ |\n|service_label_sources | dict | A dictionary of the label sources |\n|service_label_values\
    \ | list | A list of the values of the labels |\n|service_labels | dict | A dictionary\
    \ of the labels |\n|service_last_check | time | Time of the last check **(Unix\
    \ timestamp)** |\n|service_last_hard_state | int | Last hard state |\n|service_last_hard_state_change\
    \ | time | Time of the last hard state change - soft or hard **(Unix timestamp)**\
    \ |\n|service_last_notification | time | Time of the last notification **(Unix\
    \ timestamp)** |\n|service_last_state | int | State before last state change |\n\
    |service_last_state_change | time | Time of the last state change - soft or hard\
    \ **(Unix timestamp)** |\n|service_last_time_critical | time | The last time the\
    \ service was CRIT **(Unix timestamp)** |\n|service_last_time_ok | time | The\
    \ last time the service was OK **(Unix timestamp)** |\n|service_last_time_unknown\
    \ | time | The last time the service was UNKNOWN **(Unix timestamp)** |\n|service_last_time_warning\
    \ | time | The last time the service was WARN **(Unix timestamp)** |\n|service_latency\
    \ | float | Time difference between scheduled check time and actual check time\
    \ |\n|service_long_plugin_output | string | Long **(extra)** output of the last\
    \ check |\n|service_low_flap_threshold | float | Low threshold of flap detection\
    \ |\n|service_max_check_attempts | int | Maximum attempts for active checks before\
    \ a hard state |\n|service_metrics | list | A list of all metrics of this object\
    \ that historically existed |\n|service_modified_attributes | int | A bitmask\
    \ specifying which attributes have been modified |\n|service_modified_attributes_list\
    \ | list | A list of all modified attributes |\n|service_next_check | time | Scheduled\
    \ time for the next check **(Unix timestamp)** |\n|service_next_notification |\
    \ time | Time of the next notification **(Unix timestamp)** |\n|service_no_more_notifications\
    \ | int | Whether to stop sending notifications **(0/1)** |\n|service_notes |\
    \ string | Optional notes for this object, with macros not expanded |\n|service_notes_expanded\
    \ | string | The same as notes, but with the most important macros expanded |\n\
    |service_notes_url | string | An optional URL with further information about the\
    \ object |\n|service_notes_url_expanded | string | Same es notes_url, but with\
    \ the most important macros expanded |\n|service_notification_interval | float\
    \ | Interval of periodic notification in minutes or 0 if its off |\n|service_notification_period\
    \ | string | Time period in which problems of this object will be notified. If\
    \ empty then notification will be always |\n|service_notification_postponement_reason\
    \ | string | reason for postponing the pending notification, empty if nothing\
    \ is postponed |\n|service_notifications_enabled | int | Whether notifications\
    \ of the host are enabled **(0/1)** |\n|service_obsess_over_service | int | The\
    \ current obsess_over_service setting **(0/1)** |\n|service_passive_check_period\
    \ | string | Time period in which this **(passive)** service will be checked.\
    \ |\n|service_pending_flex_downtime | int | Number of pending flexible downtimes\
    \ |\n|service_percent_state_change | float | Percent state change |\n|service_perf_data\
    \ | string | Optional performance data of the last check |\n|service_plugin_output\
    \ | string | Output of the last check |\n|service_pnpgraph_present | int | Whether\
    \ there is a PNP4Nagios graph present for this object **(-1/0/1)** |\n|service_previous_hard_state\
    \ | int | Previous hard state **(that hard state before the current/last hard\
    \ state)** |\n|service_process_performance_data | int | Whether processing of\
    \ performance data is enabled **(0/1)** |\n|service_retry_interval | float | Number\
    \ of basic interval lengths between checks when retrying after a soft error |\n\
    |service_robotmk_last_error_log | blob | The file content of the Robotmk error\
    \ log |\n|service_robotmk_last_error_log_gz | blob | The gzipped file content\
    \ of the Robotmk error log |\n|service_robotmk_last_log | blob | The file content\
    \ of the Robotmk log |\n|service_robotmk_last_log_gz | blob | The gzipped file\
    \ content of the Robotmk log |\n|service_scheduled_downtime_depth | int | The\
    \ number of downtimes this object is currently in |\n|service_service_period |\
    \ string | Time period during which the object is expected to be available |\n\
    |service_staleness | float | The staleness of this object |\n|service_state |\
    \ int | The current state of the object, for hosts: 0/1/2 for UP/DOWN/UNREACH,\
    \ for services: 0/1/2/3 for OK/WARN/CRIT/UNKNOWN |\n|service_state_type | int\
    \ | Type of the current state **(0: soft, 1: hard)** |\n|service_tag_names | list\
    \ | A list of the names of the tags |\n|service_tag_values | list | A list of\
    \ the values of the tags |\n|service_tags | dict | A dictionary of the tags |\n\
    \n## Hostgroups Table\n\n### Columns:\n\n| Column name | Type | Description |\n\
    | - | - | - |\n|action_url | string | An optional URL to custom notes or actions\
    \ on the host group |\n|alias | string | An alias of the hostgroup |\n|members\
    \ | list | A list of all host names that are members of the hostgroup |\n|members_with_state\
    \ | list | A list of all host names that are members of the hostgroup together\
    \ with state and has_been_checked |\n|name | string | Name of the hostgroup |\n\
    |notes | string | Optional additional notes about the host group |\n|notes_url\
    \ | string | An optional URL to further notes on the host group |\n|num_hosts\
    \ | int | The total number of hosts in the group |\n|num_hosts_down | int | The\
    \ number of hosts in the group that are down |\n|num_hosts_handled_problems |\
    \ int | The total number of hosts in this group with handled problems |\n|num_hosts_pending\
    \ | int | The number of hosts in the group that are pending |\n|num_hosts_unhandled_problems\
    \ | int | The total number of hosts in this group with unhandled problems |\n\
    |num_hosts_unreach | int | The number of hosts in the group that are unreachable\
    \ |\n|num_hosts_up | int | The number of hosts in the group that are up |\n|num_services\
    \ | int | The total number of services of hosts in this group |\n|num_services_crit\
    \ | int | The total number of services with the state CRIT of hosts in this group\
    \ |\n|num_services_handled_problems | int | The total number of services of hosts\
    \ in this group with handled problems |\n|num_services_hard_crit | int | The total\
    \ number of services with the state CRIT of hosts in this group |\n|num_services_hard_ok\
    \ | int | The total number of services with the state OK of hosts in this group\
    \ |\n|num_services_hard_unknown | int | The total number of services with the\
    \ state UNKNOWN of hosts in this group |\n|num_services_hard_warn | int | The\
    \ total number of services with the state WARN of hosts in this group |\n|num_services_ok\
    \ | int | The total number of services with the state OK of hosts in this group\
    \ |\n|num_services_pending | int | The total number of services with the state\
    \ Pending of hosts in this group |\n|num_services_unhandled_problems | int | The\
    \ total number of services of hosts in this group with unhandled problems |\n\
    |num_services_unknown | int | The total number of services with the state UNKNOWN\
    \ of hosts in this group |\n|num_services_warn | int | The total number of services\
    \ with the state WARN of hosts in this group |\n|worst_host_state | int | The\
    \ worst state of all of the groups' hosts **(UP <= UNREACHABLE <= DOWN)** |\n\
    |worst_service_hard_state | int | The worst state of all services that belong\
    \ to a host of this group **(OK <= WARN <= UNKNOWN <= CRIT)** |\n|worst_service_state\
    \ | int | The worst state of all services that belong to a host of this group\
    \ **(OK <= WARN <= UNKNOWN <= CRIT)** |\n\n## Hosts Table\n\n### Columns:\n\n\
    | Column name | Type | Description |\n| - | - | - |\n|accept_passive_checks |\
    \ int | Whether passive host checks are accepted **(0/1)** |\n|acknowledged |\
    \ int | Whether the current problem has been acknowledged **(0/1)** |\n|acknowledgement_type\
    \ | int | Type of acknowledgement **(0: none, 1: normal, 2: sticky)** |\n|action_url\
    \ | string | An optional URL to custom actions or information about this host\
    \ |\n|action_url_expanded | string | The same as action_url, but with the most\
    \ important macros expanded |\n|active_checks_enabled | int | Whether active checks\
    \ of the object are enabled **(0/1)** |\n|address | string | IP address |\n|alias\
    \ | string | An alias name for the host |\n|check_command | string | Logical command\
    \ name for active checks |\n|check_command_expanded | string | Logical command\
    \ name for active checks, with macros expanded |\n|check_flapping_recovery_notification\
    \ | int | Whether to check to send a recovery notification when flapping stops\
    \ **(0/1)** |\n|check_freshness | int | Whether freshness checks are enabled **(0/1)**\
    \ |\n|check_interval | float | Number of basic interval lengths between two scheduled\
    \ checks |\n|check_options | int | The current check option, forced, normal, freshness\
    \ **(0-2)** |\n|check_period | string | Time period in which this object will\
    \ be checked. If empty then the check will always be executed. |\n|check_type\
    \ | int | Type of check **(0: active, 1: passive)** |\n|checks_enabled | int |\
    \ Whether checks of the object are enabled **(0/1)** |\n|childs | list | A list\
    \ of all direct children of the host |\n|comments | list | A list of the ids of\
    \ all comments |\n|comments_with_extra_info | list | A list of all comments with\
    \ id, author, comment, entry type and entry time |\n|comments_with_info | list\
    \ | A list of all comments with id, author and comment |\n|contact_groups | list\
    \ | A list of all contact groups this object is in |\n|contacts | list | A list\
    \ of all contacts of this object |\n|current_attempt | int | Number of the current\
    \ check attempts |\n|current_notification_number | int | Number of the current\
    \ notification |\n|custom_variable_names | list | A list of the names of the custom\
    \ variables |\n|custom_variable_values | list | A list of the values of the custom\
    \ variables |\n|custom_variables | dict | A dictionary of the custom variables\
    \ |\n|display_name | string | Optional display name |\n|downtimes | list | A list\
    \ of the ids of all scheduled downtimes of this object |\n|downtimes_with_extra_info\
    \ | list | A list of the scheduled downtimes with id, author, comment, origin,\
    \ entry_time, start_time, end_time, fixed, duration, recurring and is_pending\
    \ |\n|downtimes_with_info | list | A list of the scheduled downtimes with id,\
    \ author and comment |\n|event_handler | string | Command used as event handler\
    \ |\n|event_handler_enabled | int | Whether event handling is enabled **(0/1)**\
    \ |\n|execution_time | float | Time the check needed for execution |\n|filename\
    \ | string | The value of the custom variable FILENAME |\n|first_notification_delay\
    \ | float | Delay before the first notification |\n|flap_detection_enabled | int\
    \ | Whether flap detection is enabled **(0/1)** |\n|flappiness | float | The current\
    \ level of flappiness, this corresponds with the recent frequency of state changes\
    \ |\n|groups | list | A list of all host groups this object is in |\n|hard_state\
    \ | int | The effective hard state of this object |\n|has_been_checked | int |\
    \ Whether a check has already been executed **(0/1)** |\n|high_flap_threshold\
    \ | float | High threshold of flap detection |\n|icon_image | string | The name\
    \ of an image file to be used in the web pages |\n|icon_image_alt | string | Alternative\
    \ text for the icon_image |\n|icon_image_expanded | string | The same as icon_image,\
    \ but with the most important macros expanded |\n|in_check_period | int | Whether\
    \ this object is currently in its check period **(0/1)** |\n|in_notification_period\
    \ | int | Whether this object is currently in its notification period **(0/1)**\
    \ |\n|in_service_period | int | Whether this object is currently in its service\
    \ period **(0/1)** |\n|initial_state | int | Initial state |\n|is_executing |\
    \ int | is there a check currently running **(0/1)** |\n|is_flapping | int | Whether\
    \ the state is flapping **(0/1)** |\n|label_names | list | A list of the names\
    \ of the labels |\n|label_source_names | list | A list of the names of the label\
    \ sources |\n|label_source_values | list | A list of the values of the label sources\
    \ |\n|label_sources | dict | A dictionary of the label sources |\n|label_values\
    \ | list | A list of the values of the labels |\n|labels | dict | A dictionary\
    \ of the labels |\n|last_check | time | Time of the last check **(Unix timestamp)**\
    \ |\n|last_hard_state | int | Last hard state |\n|last_hard_state_change | time\
    \ | Time of the last hard state change - soft or hard **(Unix timestamp)** |\n\
    |last_notification | time | Time of the last notification **(Unix timestamp)**\
    \ |\n|last_state | int | State before last state change |\n|last_state_change\
    \ | time | Time of the last state change - soft or hard **(Unix timestamp)** |\n\
    |last_time_down | time | The last time the host was DOWN **(Unix timestamp)**\
    \ |\n|last_time_unreachable | time | The last time the host was UNREACHABLE **(Unix\
    \ timestamp)** |\n|last_time_up | time | The last time the host was UP **(Unix\
    \ timestamp)** |\n|latency | float | Time difference between scheduled check time\
    \ and actual check time |\n|long_plugin_output | string | Long **(extra)** output\
    \ of the last check |\n|low_flap_threshold | float | Low threshold of flap detection\
    \ |\n|max_check_attempts | int | Maximum attempts for active checks before a hard\
    \ state |\n|metrics | list | A list of all metrics of this object that historically\
    \ existed |\n|mk_inventory | blob | The file content of the Check_MK HW/SW-Inventory\
    \ |\n|mk_inventory_gz | blob | The gzipped file content of the Check_MK HW/SW-Inventory\
    \ |\n|mk_inventory_last | time | The timestamp of the last Check_MK HW/SW-Inventory\
    \ for this host. 0 means that no inventory data is present |\n|mk_logwatch_files\
    \ | list | This list of logfiles with problems fetched via mk_logwatch |\n|modified_attributes\
    \ | int | A bitmask specifying which attributes have been modified |\n|modified_attributes_list\
    \ | list | A list of all modified attributes |\n|name | string | Host name |\n\
    |next_check | time | Scheduled time for the next check **(Unix timestamp)** |\n\
    |next_notification | time | Time of the next notification **(Unix timestamp)**\
    \ |\n|no_more_notifications | int | Whether to stop sending notifications **(0/1)**\
    \ |\n|notes | string | Optional notes for this object, with macros not expanded\
    \ |\n|notes_expanded | string | The same as notes, but with the most important\
    \ macros expanded |\n|notes_url | string | An optional URL with further information\
    \ about the object |\n|notes_url_expanded | string | Same es notes_url, but with\
    \ the most important macros expanded |\n|notification_interval | float | Interval\
    \ of periodic notification in minutes or 0 if its off |\n|notification_period\
    \ | string | Time period in which problems of this object will be notified. If\
    \ empty then notification will be always |\n|notification_postponement_reason\
    \ | string | reason for postponing the pending notification, empty if nothing\
    \ is postponed |\n|notifications_enabled | int | Whether notifications of the\
    \ host are enabled **(0/1)** |\n|num_services | int | The total number of services\
    \ of the host |\n|num_services_crit | int | The number of the host's services\
    \ with the soft state CRIT |\n|num_services_handled_problems | int | The number\
    \ of the host's services which have handled problems |\n|num_services_hard_crit\
    \ | int | The number of the host's services with the hard state CRIT |\n|num_services_hard_ok\
    \ | int | The number of the host's services with the hard state OK |\n|num_services_hard_unknown\
    \ | int | The number of the host's services with the hard state UNKNOWN |\n|num_services_hard_warn\
    \ | int | The number of the host's services with the hard state WARN |\n|num_services_ok\
    \ | int | The number of the host's services with the soft state OK |\n|num_services_pending\
    \ | int | The number of the host's services which have not been checked yet **(pending)**\
    \ |\n|num_services_unhandled_problems | int | The number of the host's services\
    \ which have unhandled problems |\n|num_services_unknown | int | The number of\
    \ the host's services with the soft state UNKNOWN |\n|num_services_warn | int\
    \ | The number of the host's services with the soft state WARN |\n|obsess_over_host\
    \ | int | The current obsess_over_host setting **(0/1)** |\n|parents | list |\
    \ A list of all direct parents of the host |\n|pending_flex_downtime | int | Number\
    \ of pending flexible downtimes |\n|percent_state_change | float | Percent state\
    \ change |\n|perf_data | string | Optional performance data of the last check\
    \ |\n|plugin_output | string | Output of the last check |\n|pnpgraph_present |\
    \ int | Whether there is a PNP4Nagios graph present for this object **(-1/0/1)**\
    \ |\n|previous_hard_state | int | Previous hard state **(that hard state before\
    \ the current/last hard state)** |\n|process_performance_data | int | Whether\
    \ processing of performance data is enabled **(0/1)** |\n|retry_interval | float\
    \ | Number of basic interval lengths between checks when retrying after a soft\
    \ error |\n|scheduled_downtime_depth | int | The number of downtimes this object\
    \ is currently in |\n|service_period | string | Time period during which the object\
    \ is expected to be available |\n|services | list | A list of all services of\
    \ the host |\n|services_with_fullstate | list | A list of all services including\
    \ full state information. The list of entries can grow in future versions. |\n\
    |services_with_info | list | A list of all services including detailed information\
    \ about each service |\n|services_with_state | list | A list of all services of\
    \ the host together with state and has_been_checked |\n|smartping_timeout | int\
    \ | Maximum expected time between two received packets in ms |\n|staleness | float\
    \ | The staleness of this object |\n|state | int | The current state of the object,\
    \ for hosts: 0/1/2 for UP/DOWN/UNREACH, for services: 0/1/2/3 for OK/WARN/CRIT/UNKNOWN\
    \ |\n|state_type | int | Type of the current state **(0: soft, 1: hard)** |\n\
    |statusmap_image | string | The name of in image file for the status map |\n|structured_status\
    \ | blob | The file content of the structured status of the Check_MK HW/SW-Inventory\
    \ |\n|tag_names | list | A list of the names of the tags |\n|tag_values | list\
    \ | A list of the values of the tags |\n|tags | dict | A dictionary of the tags\
    \ |\n|total_services | int | The total number of services of the host |\n|worst_service_hard_state\
    \ | int | The worst hard state of all of the host's services **(OK <= WARN <=\
    \ UNKNOWN <= CRIT)** |\n|worst_service_state | int | The worst soft state of all\
    \ of the host's services **(OK <= WARN <= UNKNOWN <= CRIT)** |\n|x_3d | float\
    \ | 3D-Coordinates: X |\n|y_3d | float | 3D-Coordinates: Y |\n|z_3d | float |\
    \ 3D-Coordinates: Z |\n\n## Servicegroups Table\n\n### Columns:\n\n| Column name\
    \ | Type | Description |\n| - | - | - |\n|action_url | string | An optional URL\
    \ to custom notes or actions on the service group |\n|alias | string | An alias\
    \ of the servicegroup |\n|members | list | A list of all members of the service\
    \ group as host/service pairs |\n|members_with_state | list | A list of all members\
    \ of the service group with state and has_been_checked |\n|name | string | Name\
    \ of the servicegroup |\n|notes | string | Optional additional notes about the\
    \ service group |\n|notes_url | string | An optional URL to further notes on the\
    \ service group |\n|num_services | int | The total number of services in the group\
    \ |\n|num_services_crit | int | The number of services in the group that are CRIT\
    \ |\n|num_services_handled_problems | int | The number of services in the group\
    \ that have handled problems |\n|num_services_hard_crit | int | The number of\
    \ services in the group that are CRIT |\n|num_services_hard_ok | int | The number\
    \ of services in the group that are OK |\n|num_services_hard_unknown | int | The\
    \ number of services in the group that are UNKNOWN |\n|num_services_hard_warn\
    \ | int | The number of services in the group that are WARN |\n|num_services_ok\
    \ | int | The number of services in the group that are OK |\n|num_services_pending\
    \ | int | The number of services in the group that are PENDING |\n|num_services_unhandled_problems\
    \ | int | The number of services in the group that have unhandled problems |\n\
    |num_services_unknown | int | The number of services in the group that are UNKNOWN\
    \ |\n|num_services_warn | int | The number of services in the group that are WARN\
    \ |\n|worst_service_state | int | The worst soft state of all of the groups services\
    \ **(OK <= WARN <= UNKNOWN <= CRIT)** |\n\n## Services Table\n\n### Columns:\n\
    \n| Column name | Type | Description |\n| - | - | - |\n|accept_passive_checks\
    \ | int | Whether passive host checks are accepted **(0/1)** |\n|acknowledged\
    \ | int | Whether the current problem has been acknowledged **(0/1)** |\n|acknowledgement_type\
    \ | int | Type of acknowledgement **(0: none, 1: normal, 2: sticky)** |\n|action_url\
    \ | string | An optional URL to custom actions or information about this host\
    \ |\n|action_url_expanded | string | The same as action_url, but with the most\
    \ important macros expanded |\n|active_checks_enabled | int | Whether active checks\
    \ of the object are enabled **(0/1)** |\n|cache_interval | int | For checks that\
    \ base on cached agent data the interval in that this cache is recreated. 0 for\
    \ other services. |\n|cached_at | time | For checks that base on cached agent\
    \ data the time when this data was created. 0 for other services. |\n|check_command\
    \ | string | Logical command name for active checks |\n|check_command_expanded\
    \ | string | Logical command name for active checks, with macros expanded |\n\
    |check_flapping_recovery_notification | int | Whether to check to send a recovery\
    \ notification when flapping stops **(0/1)** |\n|check_freshness | int | Whether\
    \ freshness checks are enabled **(0/1)** |\n|check_interval | float | Number of\
    \ basic interval lengths between two scheduled checks |\n|check_options | int\
    \ | The current check option, forced, normal, freshness **(0-2)** |\n|check_period\
    \ | string | Time period in which this object will be checked. If empty then the\
    \ check will always be executed. |\n|check_type | int | Type of check **(0: active,\
    \ 1: passive)** |\n|checks_enabled | int | Whether checks of the object are enabled\
    \ **(0/1)** |\n|comments | list | A list of the ids of all comments |\n|comments_with_extra_info\
    \ | list | A list of all comments with id, author, comment, entry type and entry\
    \ time |\n|comments_with_info | list | A list of all comments with id, author\
    \ and comment |\n|contact_groups | list | A list of all contact groups this object\
    \ is in |\n|contacts | list | A list of all contacts of this object |\n|current_attempt\
    \ | int | Number of the current check attempts |\n|current_notification_number\
    \ | int | Number of the current notification |\n|custom_variable_names | list\
    \ | A list of the names of the custom variables |\n|custom_variable_values | list\
    \ | A list of the values of the custom variables |\n|custom_variables | dict |\
    \ A dictionary of the custom variables |\n|description | string | Service description\
    \ |\n|display_name | string | Optional display name |\n|downtimes | list | A list\
    \ of the ids of all scheduled downtimes of this object |\n|downtimes_with_extra_info\
    \ | list | A list of the scheduled downtimes with id, author, comment, origin,\
    \ entry_time, start_time, end_time, fixed, duration, recurring and is_pending\
    \ |\n|downtimes_with_info | list | A list of the scheduled downtimes with id,\
    \ author and comment |\n|event_handler | string | Command used as event handler\
    \ |\n|event_handler_enabled | int | Whether event handling is enabled **(0/1)**\
    \ |\n|execution_time | float | Time the check needed for execution |\n|first_notification_delay\
    \ | float | Delay before the first notification |\n|flap_detection_enabled | int\
    \ | Whether flap detection is enabled **(0/1)** |\n|flappiness | float | The current\
    \ level of flappiness, this corresponds with the recent frequency of state changes\
    \ |\n|groups | list | A list of all service groups this object is in |\n|hard_state\
    \ | int | The effective hard state of this object |\n|has_been_checked | int |\
    \ Whether a check has already been executed **(0/1)** |\n|high_flap_threshold\
    \ | float | High threshold of flap detection |\n|icon_image | string | The name\
    \ of an image file to be used in the web pages |\n|icon_image_alt | string | Alternative\
    \ text for the icon_image |\n|icon_image_expanded | string | The same as icon_image,\
    \ but with the most important macros expanded |\n|in_check_period | int | Whether\
    \ this object is currently in its check period **(0/1)** |\n|in_notification_period\
    \ | int | Whether this object is currently in its notification period **(0/1)**\
    \ |\n|in_passive_check_period | int | Whether this service is currently in its\
    \ passive check period **(0/1)** |\n|in_service_period | int | Whether this object\
    \ is currently in its service period **(0/1)** |\n|initial_state | int | Initial\
    \ state |\n|is_executing | int | is there a check currently running **(0/1)**\
    \ |\n|is_flapping | int | Whether the state is flapping **(0/1)** |\n|label_names\
    \ | list | A list of the names of the labels |\n|label_source_names | list | A\
    \ list of the names of the label sources |\n|label_source_values | list | A list\
    \ of the values of the label sources |\n|label_sources | dict | A dictionary of\
    \ the label sources |\n|label_values | list | A list of the values of the labels\
    \ |\n|labels | dict | A dictionary of the labels |\n|last_check | time | Time\
    \ of the last check **(Unix timestamp)** |\n|last_hard_state | int | Last hard\
    \ state |\n|last_hard_state_change | time | Time of the last hard state change\
    \ - soft or hard **(Unix timestamp)** |\n|last_notification | time | Time of the\
    \ last notification **(Unix timestamp)** |\n|last_state | int | State before last\
    \ state change |\n|last_state_change | time | Time of the last state change -\
    \ soft or hard **(Unix timestamp)** |\n|last_time_critical | time | The last time\
    \ the service was CRIT **(Unix timestamp)** |\n|last_time_ok | time | The last\
    \ time the service was OK **(Unix timestamp)** |\n|last_time_unknown | time |\
    \ The last time the service was UNKNOWN **(Unix timestamp)** |\n|last_time_warning\
    \ | time | The last time the service was WARN **(Unix timestamp)** |\n|latency\
    \ | float | Time difference between scheduled check time and actual check time\
    \ |\n|long_plugin_output | string | Long **(extra)** output of the last check\
    \ |\n|low_flap_threshold | float | Low threshold of flap detection |\n|max_check_attempts\
    \ | int | Maximum attempts for active checks before a hard state |\n|metrics |\
    \ list | A list of all metrics of this object that historically existed |\n|modified_attributes\
    \ | int | A bitmask specifying which attributes have been modified |\n|modified_attributes_list\
    \ | list | A list of all modified attributes |\n|next_check | time | Scheduled\
    \ time for the next check **(Unix timestamp)** |\n|next_notification | time |\
    \ Time of the next notification **(Unix timestamp)** |\n|no_more_notifications\
    \ | int | Whether to stop sending notifications **(0/1)** |\n|notes | string |\
    \ Optional notes for this object, with macros not expanded |\n|notes_expanded\
    \ | string | The same as notes, but with the most important macros expanded |\n\
    |notes_url | string | An optional URL with further information about the object\
    \ |\n|notes_url_expanded | string | Same es notes_url, but with the most important\
    \ macros expanded |\n|notification_interval | float | Interval of periodic notification\
    \ in minutes or 0 if its off |\n|notification_period | string | Time period in\
    \ which problems of this object will be notified. If empty then notification will\
    \ be always |\n|notification_postponement_reason | string | reason for postponing\
    \ the pending notification, empty if nothing is postponed |\n|notifications_enabled\
    \ | int | Whether notifications of the host are enabled **(0/1)** |\n|obsess_over_service\
    \ | int | The current obsess_over_service setting **(0/1)** |\n|passive_check_period\
    \ | string | Time period in which this **(passive)** service will be checked.\
    \ |\n|pending_flex_downtime | int | Number of pending flexible downtimes |\n|percent_state_change\
    \ | float | Percent state change |\n|perf_data | string | Optional performance\
    \ data of the last check |\n|plugin_output | string | Output of the last check\
    \ |\n|pnpgraph_present | int | Whether there is a PNP4Nagios graph present for\
    \ this object **(-1/0/1)** |\n|previous_hard_state | int | Previous hard state\
    \ **(that hard state before the current/last hard state)** |\n|process_performance_data\
    \ | int | Whether processing of performance data is enabled **(0/1)** |\n|retry_interval\
    \ | float | Number of basic interval lengths between checks when retrying after\
    \ a soft error |\n|robotmk_last_error_log | blob | The file content of the Robotmk\
    \ error log |\n|robotmk_last_error_log_gz | blob | The gzipped file content of\
    \ the Robotmk error log |\n|robotmk_last_log | blob | The file content of the\
    \ Robotmk log |\n|robotmk_last_log_gz | blob | The gzipped file content of the\
    \ Robotmk log |\n|scheduled_downtime_depth | int | The number of downtimes this\
    \ object is currently in |\n|service_period | string | Time period during which\
    \ the object is expected to be available |\n|staleness | float | The staleness\
    \ of this object |\n|state | int | The current state of the object, for hosts:\
    \ 0/1/2 for UP/DOWN/UNREACH, for services: 0/1/2/3 for OK/WARN/CRIT/UNKNOWN |\n\
    |state_type | int | Type of the current state **(0: soft, 1: hard)** |\n|tag_names\
    \ | list | A list of the names of the tags |\n|tag_values | list | A list of the\
    \ values of the tags |\n|tags | dict | A dictionary of the tags |\n\n### Adjacent\
    \ columns:\n\n| Column name | Type | Description |\n| - | - | - |\n|host_accept_passive_checks\
    \ | int | Whether passive host checks are accepted **(0/1)** |\n|host_acknowledged\
    \ | int | Whether the current problem has been acknowledged **(0/1)** |\n|host_acknowledgement_type\
    \ | int | Type of acknowledgement **(0: none, 1: normal, 2: sticky)** |\n|host_action_url\
    \ | string | An optional URL to custom actions or information about this host\
    \ |\n|host_action_url_expanded | string | The same as action_url, but with the\
    \ most important macros expanded |\n|host_active_checks_enabled | int | Whether\
    \ active checks of the object are enabled **(0/1)** |\n|host_address | string\
    \ | IP address |\n|host_alias | string | An alias name for the host |\n|host_check_command\
    \ | string | Logical command name for active checks |\n|host_check_command_expanded\
    \ | string | Logical command name for active checks, with macros expanded |\n\
    |host_check_flapping_recovery_notification | int | Whether to check to send a\
    \ recovery notification when flapping stops **(0/1)** |\n|host_check_freshness\
    \ | int | Whether freshness checks are enabled **(0/1)** |\n|host_check_interval\
    \ | float | Number of basic interval lengths between two scheduled checks |\n\
    |host_check_options | int | The current check option, forced, normal, freshness\
    \ **(0-2)** |\n|host_check_period | string | Time period in which this object\
    \ will be checked. If empty then the check will always be executed. |\n|host_check_type\
    \ | int | Type of check **(0: active, 1: passive)** |\n|host_checks_enabled |\
    \ int | Whether checks of the object are enabled **(0/1)** |\n|host_childs | list\
    \ | A list of all direct children of the host |\n|host_comments | list | A list\
    \ of the ids of all comments |\n|host_comments_with_extra_info | list | A list\
    \ of all comments with id, author, comment, entry type and entry time |\n|host_comments_with_info\
    \ | list | A list of all comments with id, author and comment |\n|host_contact_groups\
    \ | list | A list of all contact groups this object is in |\n|host_contacts |\
    \ list | A list of all contacts of this object |\n|host_current_attempt | int\
    \ | Number of the current check attempts |\n|host_current_notification_number\
    \ | int | Number of the current notification |\n|host_custom_variable_names |\
    \ list | A list of the names of the custom variables |\n|host_custom_variable_values\
    \ | list | A list of the values of the custom variables |\n|host_custom_variables\
    \ | dict | A dictionary of the custom variables |\n|host_display_name | string\
    \ | Optional display name |\n|host_downtimes | list | A list of the ids of all\
    \ scheduled downtimes of this object |\n|host_downtimes_with_extra_info | list\
    \ | A list of the scheduled downtimes with id, author, comment, origin, entry_time,\
    \ start_time, end_time, fixed, duration, recurring and is_pending |\n|host_downtimes_with_info\
    \ | list | A list of the scheduled downtimes with id, author and comment |\n|host_event_handler\
    \ | string | Command used as event handler |\n|host_event_handler_enabled | int\
    \ | Whether event handling is enabled **(0/1)** |\n|host_execution_time | float\
    \ | Time the check needed for execution |\n|host_filename | string | The value\
    \ of the custom variable FILENAME |\n|host_first_notification_delay | float |\
    \ Delay before the first notification |\n|host_flap_detection_enabled | int |\
    \ Whether flap detection is enabled **(0/1)** |\n|host_flappiness | float | The\
    \ current level of flappiness, this corresponds with the recent frequency of state\
    \ changes |\n|host_groups | list | A list of all host groups this object is in\
    \ |\n|host_hard_state | int | The effective hard state of this object |\n|host_has_been_checked\
    \ | int | Whether a check has already been executed **(0/1)** |\n|host_high_flap_threshold\
    \ | float | High threshold of flap detection |\n|host_icon_image | string | The\
    \ name of an image file to be used in the web pages |\n|host_icon_image_alt |\
    \ string | Alternative text for the icon_image |\n|host_icon_image_expanded |\
    \ string | The same as icon_image, but with the most important macros expanded\
    \ |\n|host_in_check_period | int | Whether this object is currently in its check\
    \ period **(0/1)** |\n|host_in_notification_period | int | Whether this object\
    \ is currently in its notification period **(0/1)** |\n|host_in_service_period\
    \ | int | Whether this object is currently in its service period **(0/1)** |\n\
    |host_initial_state | int | Initial state |\n|host_is_executing | int | is there\
    \ a check currently running **(0/1)** |\n|host_is_flapping | int | Whether the\
    \ state is flapping **(0/1)** |\n|host_label_names | list | A list of the names\
    \ of the labels |\n|host_label_source_names | list | A list of the names of the\
    \ label sources |\n|host_label_source_values | list | A list of the values of\
    \ the label sources |\n|host_label_sources | dict | A dictionary of the label\
    \ sources |\n|host_label_values | list | A list of the values of the labels |\n\
    |host_labels | dict | A dictionary of the labels |\n|host_last_check | time |\
    \ Time of the last check **(Unix timestamp)** |\n|host_last_hard_state | int |\
    \ Last hard state |\n|host_last_hard_state_change | time | Time of the last hard\
    \ state change - soft or hard **(Unix timestamp)** |\n|host_last_notification\
    \ | time | Time of the last notification **(Unix timestamp)** |\n|host_last_state\
    \ | int | State before last state change |\n|host_last_state_change | time | Time\
    \ of the last state change - soft or hard **(Unix timestamp)** |\n|host_last_time_down\
    \ | time | The last time the host was DOWN **(Unix timestamp)** |\n|host_last_time_unreachable\
    \ | time | The last time the host was UNREACHABLE **(Unix timestamp)** |\n|host_last_time_up\
    \ | time | The last time the host was UP **(Unix timestamp)** |\n|host_latency\
    \ | float | Time difference between scheduled check time and actual check time\
    \ |\n|host_long_plugin_output | string | Long **(extra)** output of the last check\
    \ |\n|host_low_flap_threshold | float | Low threshold of flap detection |\n|host_max_check_attempts\
    \ | int | Maximum attempts for active checks before a hard state |\n|host_metrics\
    \ | list | A list of all metrics of this object that historically existed |\n\
    |host_mk_inventory | blob | The file content of the Check_MK HW/SW-Inventory |\n\
    |host_mk_inventory_gz | blob | The gzipped file content of the Check_MK HW/SW-Inventory\
    \ |\n|host_mk_inventory_last | time | The timestamp of the last Check_MK HW/SW-Inventory\
    \ for this host. 0 means that no inventory data is present |\n|host_mk_logwatch_files\
    \ | list | This list of logfiles with problems fetched via mk_logwatch |\n|host_modified_attributes\
    \ | int | A bitmask specifying which attributes have been modified |\n|host_modified_attributes_list\
    \ | list | A list of all modified attributes |\n|host_name | string | Host name\
    \ |\n|host_next_check | time | Scheduled time for the next check **(Unix timestamp)**\
    \ |\n|host_next_notification | time | Time of the next notification **(Unix timestamp)**\
    \ |\n|host_no_more_notifications | int | Whether to stop sending notifications\
    \ **(0/1)** |\n|host_notes | string | Optional notes for this object, with macros\
    \ not expanded |\n|host_notes_expanded | string | The same as notes, but with\
    \ the most important macros expanded |\n|host_notes_url | string | An optional\
    \ URL with further information about the object |\n|host_notes_url_expanded |\
    \ string | Same es notes_url, but with the most important macros expanded |\n\
    |host_notification_interval | float | Interval of periodic notification in minutes\
    \ or 0 if its off |\n|host_notification_period | string | Time period in which\
    \ problems of this object will be notified. If empty then notification will be\
    \ always |\n|host_notification_postponement_reason | string | reason for postponing\
    \ the pending notification, empty if nothing is postponed |\n|host_notifications_enabled\
    \ | int | Whether notifications of the host are enabled **(0/1)** |\n|host_num_services\
    \ | int | The total number of services of the host |\n|host_num_services_crit\
    \ | int | The number of the host's services with the soft state CRIT |\n|host_num_services_handled_problems\
    \ | int | The number of the host's services which have handled problems |\n|host_num_services_hard_crit\
    \ | int | The number of the host's services with the hard state CRIT |\n|host_num_services_hard_ok\
    \ | int | The number of the host's services with the hard state OK |\n|host_num_services_hard_unknown\
    \ | int | The number of the host's services with the hard state UNKNOWN |\n|host_num_services_hard_warn\
    \ | int | The number of the host's services with the hard state WARN |\n|host_num_services_ok\
    \ | int | The number of the host's services with the soft state OK |\n|host_num_services_pending\
    \ | int | The number of the host's services which have not been checked yet **(pending)**\
    \ |\n|host_num_services_unhandled_problems | int | The number of the host's services\
    \ which have unhandled problems |\n|host_num_services_unknown | int | The number\
    \ of the host's services with the soft state UNKNOWN |\n|host_num_services_warn\
    \ | int | The number of the host's services with the soft state WARN |\n|host_obsess_over_host\
    \ | int | The current obsess_over_host setting **(0/1)** |\n|host_parents | list\
    \ | A list of all direct parents of the host |\n|host_pending_flex_downtime |\
    \ int | Number of pending flexible downtimes |\n|host_percent_state_change | float\
    \ | Percent state change |\n|host_perf_data | string | Optional performance data\
    \ of the last check |\n|host_plugin_output | string | Output of the last check\
    \ |\n|host_pnpgraph_present | int | Whether there is a PNP4Nagios graph present\
    \ for this object **(-1/0/1)** |\n|host_previous_hard_state | int | Previous hard\
    \ state **(that hard state before the current/last hard state)** |\n|host_process_performance_data\
    \ | int | Whether processing of performance data is enabled **(0/1)** |\n|host_retry_interval\
    \ | float | Number of basic interval lengths between checks when retrying after\
    \ a soft error |\n|host_scheduled_downtime_depth | int | The number of downtimes\
    \ this object is currently in |\n|host_service_period | string | Time period during\
    \ which the object is expected to be available |\n|host_services | list | A list\
    \ of all services of the host |\n|host_services_with_fullstate | list | A list\
    \ of all services including full state information. The list of entries can grow\
    \ in future versions. |\n|host_services_with_info | list | A list of all services\
    \ including detailed information about each service |\n|host_services_with_state\
    \ | list | A list of all services of the host together with state and has_been_checked\
    \ |\n|host_smartping_timeout | int | Maximum expected time between two received\
    \ packets in ms |\n|host_staleness | float | The staleness of this object |\n\
    |host_state | int | The current state of the object, for hosts: 0/1/2 for UP/DOWN/UNREACH,\
    \ for services: 0/1/2/3 for OK/WARN/CRIT/UNKNOWN |\n|host_state_type | int | Type\
    \ of the current state **(0: soft, 1: hard)** |\n|host_statusmap_image | string\
    \ | The name of in image file for the status map |\n|host_structured_status |\
    \ blob | The file content of the structured status of the Check_MK HW/SW-Inventory\
    \ |\n|host_tag_names | list | A list of the names of the tags |\n|host_tag_values\
    \ | list | A list of the values of the tags |\n|host_tags | dict | A dictionary\
    \ of the tags |\n|host_total_services | int | The total number of services of\
    \ the host |\n|host_worst_service_hard_state | int | The worst hard state of all\
    \ of the host's services **(OK <= WARN <= UNKNOWN <= CRIT)** |\n|host_worst_service_state\
    \ | int | The worst soft state of all of the host's services **(OK <= WARN <=\
    \ UNKNOWN <= CRIT)** |\n|host_x_3d | float | 3D-Coordinates: X |\n|host_y_3d |\
    \ float | 3D-Coordinates: Y |\n|host_z_3d | float | 3D-Coordinates: Z |\n\n##\
    \ Status Table\n\n### Columns:\n\n| Column name | Type | Description |\n| - |\
    \ - | - |\n|accept_passive_host_checks | int | Whether passive host checks are\
    \ accepted in general **(0/1)** |\n|accept_passive_service_checks | int | Whether\
    \ passive service checks are activated in general **(0/1)** |\n|average_latency_cmk\
    \ | float | The average latency for executing Check_MK checks **(i.e. the time\
    \ the start of the execution is behind the schedule)** |\n|average_latency_fetcher\
    \ | float | The average latency for executing Check_MK fetchers **(i.e. the time\
    \ the start of the execution is behind the schedule)** |\n|average_latency_generic\
    \ | float | The average latency for executing active checks **(i.e. the time the\
    \ start of the execution is behind the schedule)** |\n|average_latency_real_time\
    \ | float | The average latency for executing real time checks **(i.e. the time\
    \ the start of the execution is behind the schedule)** |\n|average_runnable_jobs_checker\
    \ | float | The average count of queued replies which have not yet been delivered\
    \ to the checker helpers |\n|average_runnable_jobs_fetcher | float | The average\
    \ count of scheduled fetcher jobs which have not yet been processed |\n|cached_log_messages\
    \ | int | The current number of log messages MK Livestatus keeps in memory |\n\
    |carbon_bytes_sent | float | The number of number of bytes sent over the carbon\
    \ connections since program start |\n|carbon_bytes_sent_rate | float | The averaged\
    \ number of number of bytes sent over the carbon connections per second |\n|carbon_overflows\
    \ | float | The number of times a Carbon connection could not send the metrics\
    \ since program start |\n|carbon_overflows_rate | float | The averaged number\
    \ of times a Carbon connection could not send the metrics per second |\n|carbon_queue_usage\
    \ | float | The number of number of elements in the queue / size of the queue\
    \ since program start |\n|carbon_queue_usage_rate | float | The averaged number\
    \ of number of elements in the queue / size of the queue per second |\n|check_external_commands\
    \ | int | Whether Nagios checks for external commands at its command pipe **(0/1)**\
    \ |\n|check_host_freshness | int | Whether host freshness checking is activated\
    \ in general **(0/1)** |\n|check_service_freshness | int | Whether service freshness\
    \ checking is activated in general **(0/1)** |\n|connections | float | The number\
    \ of client connections to Livestatus since program start |\n|connections_rate\
    \ | float | The averaged number of client connections to Livestatus per second\
    \ |\n|core_pid | int | The process ID of the monitoring core |\n|enable_event_handlers\
    \ | int | Whether alert handlers are activated in general **(0/1)** |\n|enable_flap_detection\
    \ | int | Whether flap detection is activated in general **(0/1)** |\n|enable_notifications\
    \ | int | Whether notifications are enabled in general **(0/1)** |\n|execute_host_checks\
    \ | int | Whether host checks are executed in general **(0/1)** |\n|execute_service_checks\
    \ | int | Whether active service checks are activated in general **(0/1)** |\n\
    |external_command_buffer_max | int | The maximum number of slots used in the external\
    \ command buffer |\n|external_command_buffer_slots | int | The size of the buffer\
    \ for the external commands |\n|external_command_buffer_usage | int | The number\
    \ of slots in use of the external command buffer |\n|external_commands | float\
    \ | The number of external commands since program start |\n|external_commands_rate\
    \ | float | The averaged number of external commands per second |\n|forks | float\
    \ | The number of process creations since program start |\n|forks_rate | float\
    \ | The averaged number of process creations per second |\n|has_event_handlers\
    \ | int | Whether or not at alert handler rules are configured **(0/1)** |\n|helper_usage_checker\
    \ | float | The average usage of the checker helpers, ranging from 0.0 **(0%)**\
    \ up to 1.0 **(100%)** |\n|helper_usage_cmk | float | The average usage of the\
    \ Check_MK check helpers, ranging from 0.0 **(0%)** up to 1.0 **(100%)** |\n|helper_usage_fetcher\
    \ | float | The average usage of the fetcher helpers, ranging from 0.0 **(0%)**\
    \ up to 1.0 **(100%)** |\n|helper_usage_generic | float | The average usage of\
    \ the generic check helpers, ranging from 0.0 **(0%)** up to 1.0 **(100%)** |\n\
    |helper_usage_real_time | float | The average usage of the real time check helpers,\
    \ ranging from 0.0 **(0%)** up to 1.0 **(100%)** |\n|host_checks | float | The\
    \ number of host checks since program start |\n|host_checks_rate | float | The\
    \ averaged number of host checks per second |\n|influxdb_bytes_sent | float |\
    \ The number of number of bytes sent over the InfluxDB connections **(payload\
    \ only)** since program start |\n|influxdb_bytes_sent_rate | float | The averaged\
    \ number of number of bytes sent over the InfluxDB connections **(payload only)**\
    \ per second |\n|influxdb_overflows | float | The number of times an InfluxDB\
    \ connection could not send the metrics since program start |\n|influxdb_overflows_rate\
    \ | float | The averaged number of times an InfluxDB connection could not send\
    \ the metrics per second |\n|influxdb_queue_usage | float | The number of number\
    \ of elements in the queue / size of the queue since program start |\n|influxdb_queue_usage_rate\
    \ | float | The averaged number of number of elements in the queue / size of the\
    \ queue per second |\n|interval_length | int | The default interval length |\n\
    |is_trial_expired | int | Whether or not expired trial of demo version |\n|last_command_check\
    \ | time | The time of the last check for a command as UNIX timestamp |\n|last_log_rotation\
    \ | time | Time time of the last log file rotation |\n|license_usage_history |\
    \ blob | Historic license usage information |\n|livechecks | float | The number\
    \ of checks executed via livecheck since program start |\n|livechecks_rate | float\
    \ | The averaged number of checks executed via livecheck per second |\n|livestatus_active_connections\
    \ | int | The current number of active connections to MK Livestatus |\n|livestatus_overflows\
    \ | float | The number of times a Livestatus connection could not be immediately\
    \ accepted because all threads where busy since program start |\n|livestatus_overflows_rate\
    \ | float | The averaged number of times a Livestatus connection could not be\
    \ immediately accepted because all threads where busy per second |\n|livestatus_queued_connections\
    \ | int | The current number of queued connections to MK Livestatus |\n|livestatus_threads\
    \ | int | The maximum number of connections to MK Livestatus that can be handled\
    \ in parallel |\n|livestatus_usage | float | The average usage of the livestatus\
    \ connection slots, ranging from 0.0 **(0%)** up to 1.0 **(100%)** |\n|livestatus_version\
    \ | string | The version of the MK Livestatus module |\n|log_messages | float\
    \ | The number of new log messages since program start |\n|log_messages_rate |\
    \ float | The averaged number of new log messages per second |\n|metrics_count\
    \ | float | The number of number of metrics processed by the core since program\
    \ start |\n|metrics_count_rate | float | The averaged number of number of metrics\
    \ processed by the core per second |\n|mk_inventory_last | time | The timestamp\
    \ of the last time a host has been inventorized by Check_MK HW/SW-Inventory |\n\
    |nagios_pid | int | The process ID of the monitoring core |\n|neb_callbacks |\
    \ float | The number of NEB callbacks since program start |\n|neb_callbacks_rate\
    \ | float | The averaged number of NEB callbacks per second |\n|num_hosts | int\
    \ | The total number of hosts |\n|num_queued_alerts | int | The number of queued\
    \ alerts which have not yet been delivered to the alert helper |\n|num_queued_notifications\
    \ | int | The number of queued notifications which have not yet been delivered\
    \ to the notification helper |\n|num_services | int | The total number of services\
    \ |\n|obsess_over_hosts | int | Whether Nagios will obsess over host checks **(0/1)**\
    \ |\n|obsess_over_services | int | Whether Nagios will obsess over service checks\
    \ and run the ocsp_command **(0/1)** |\n|perf_data_count | float | The number\
    \ of number of performance data processed by the core since program start |\n\
    |perf_data_count_rate | float | The averaged number of number of performance data\
    \ processed by the core per second |\n|process_performance_data | int | Whether\
    \ processing of performance data is activated in general **(0/1)** |\n|program_start\
    \ | time | The time of the last program start or configuration reload as UNIX\
    \ timestamp |\n|program_version | string | The version of the monitoring daemon\
    \ |\n|requests | float | The number of requests to Livestatus since program start\
    \ |\n|requests_rate | float | The averaged number of requests to Livestatus per\
    \ second |\n|rrdcached_bytes_sent | float | The number of number of bytes sent\
    \ over to the RRDs since program start |\n|rrdcached_bytes_sent_rate | float |\
    \ The averaged number of number of bytes sent over to the RRDs per second |\n\
    |rrdcached_overflows | float | The number of times an RRDCacheD connection could\
    \ not send the metrics since program start |\n|rrdcached_overflows_rate | float\
    \ | The averaged number of times an RRDCacheD connection could not send the metrics\
    \ per second |\n|rrdcached_queue_usage | float | The number of number of elements\
    \ in the queue / size of the queue since program start |\n|rrdcached_queue_usage_rate\
    \ | float | The averaged number of number of elements in the queue / size of the\
    \ queue per second |\n|service_checks | float | The number of completed service\
    \ checks since program start |\n|service_checks_rate | float | The averaged number\
    \ of completed service checks per second |\n|state_file_created | time | The time\
    \ when state file had been created |\n\n\n# Authentication\n\nTo use this API\
    \ from an automated client, a user needs to be set up in Checkmk. Any kind of\
    \ user,\nbe it *automation* or *GUI* users, can be used to access the REST API.\
    \ On a newly created site\nsome users are already created. You can configure them\
    \ in Checkmk at *Setup* > *Users*.\n\nFor the various authentication methods that\
    \ can be used please consult the following descriptions,\nwhich occur in the order\
    \ of precedence. This means that on a request which receives multiple\nauthentication\
    \ methods, the one with the hightes priority \"wins\" and is used. This is especially\n\
    convenient when developing automation scripts, as these can directly be used with\
    \ either the\ncurrently logged in GUI user, or the \"Bearer\" authentication method\
    \ which takes precedence over the\nGUI authentication method. The result is that\
    \ the user doesn't have to log out to check that the\nscripts works with the other\
    \ method.\n\n<SecurityDefinitions />\n\n# Compatibility\n\n## HTTP client compatibility\n\
    \nIf you have a client which cannot do the HTTP PUT or DELETE methods, you can\
    \ use the\n`X-HTTP-Method-Override` HTTP header to force the server into believing\
    \ the client actually sent\nsuch a method. In these cases the HTTP method to use\
    \ has to be POST. You cannot override from GET.\n\n## Compatibility policy\n\n\
    It is our policy to keep all documented parts backwards compatible, as long as\
    \ there is no\ncompelling reason (like security, etc) to break compatibility.\n\
    \nIn the event of a break in backwards compatibility, these changes are documented\
    \ and, if possible,\nannounced by deprecating the field or endpoint in question\
    \ beforehand. Please understand that this\ncan't be promised for all cases (security,\
    \ etc) though.\n\n## Versioning\n\n### Definition\n\nThe REST API is versioned\
    \ by a *major* and *minor* version number.\n\nThe *major* number is incremented\
    \ when backwards incompatible changes to the API have been made.\nThis will reset\
    \ the *minor* number to *0*. A *werk* which contains the details of the change\
    \ and\nmarking the change as incompatible will be released when this happens.\n\
    \nTh *minor* number will be increased when backwards compatible changes are added\
    \ to the API. A\n*werk* detailing the additions will be released when this happens.\n\
    \n**Note:** Despite the noted backward compatibility, API consumers are best to\
    \ ensure that their\nimplementation does not disrupt use-case requirements.\n\n\
    ### Usage\n\nThe *major* version is part of the URL of each endpoint, while the\
    \ whole version (in the form\n*major*.*minor*) can be sent via the HTTP header\
    \ `X-API-Version`. If the header is not sent,\nthe most recent *minor* version\
    \ of the through the URL selected *major* version is used.\nThe header will also\
    \ be present in the accompanying HTTP response.\n\n### Format\n\n * URL: *v1*,\
    \ *v2*, etc.\n * X-API-Version HTTP header: *major.minor*\n\n### Notes\n\n * In\
    \ the first release, the version part in the URL has been documented as `1.0`.\
    \ These\n   URLs will continue to work in the future, although using the `X-API-Version`\
    \ header will not be\n   possible with this version identifier. You have to use\
    \ the above documented format (v1, v2, ...)\n   in the URL to be able to use the\
    \ `X-API-Version` header.\n\n## Undocumented behaviour\n\nWe cannot guarantee\
    \ bug-for-bug backwards compatibility. If a behaviour of an endpoint is not\n\
    documented we may change it without incrementing the API version."
  license:
    name: GNU General Public License version 2
    url: https://checkmk.com/gpl.html
  title: Checkmk REST-API
  version: '1.0'
openapi: 3.0.2
paths:
  /domain-types/acknowledge/collections/host:
    post:
      description: "\n\nThis endpoint requires the following permissions: \n * `action.acknowledge`:\
        \ Acknowledge host and service problems and remove acknowledgements\n"
      operationId: cmk.gui.plugins.openapi.endpoints.acknowledgement.set_acknowledgement_on_hosts
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcknowledgeHostRelatedProblem'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '422':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unprocessable Entity: The query yielded no result.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '204':
          content: {}
          description: 'No Content: Operation done successfully. No further output.'
      summary: Set acknowledgement on related hosts
      tags:
      - Acknowledge problems
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/domain-types/acknowledge/collections/host\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    # This schema has multiple variations. Please refer to\n  \
          \  # the 'Payload' section for details.\n    json={\n        'acknowledge_type':\
          \ 'host',\n        'sticky': False,\n        'persistent': False,\n    \
          \    'notify': False,\n        'comment': 'This was expected.',\n      \
          \  'host_name': 'example.com'\n    },\n)\nif resp.status_code == 200:\n\
          \    pprint.pprint(resp.json())\nelif resp.status_code == 204:\n    print(\"\
          Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/acknowledge/collections/host\",\n    method=\"\
          POST\",\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME}\
          \ {PASSWORD}\",\n        \"Accept\": \"application/json\",\n        \"Content-Type\"\
          : 'application/json',  # (required) A header specifying which type of content\
          \ is in the request/response body.\n    },\n    # This schema has multiple\
          \ variations. Please refer to\n    # the 'Payload' section for details.\n\
          \    data=json.dumps({\n        'acknowledge_type': 'host',\n        'sticky':\
          \ False,\n        'persistent': False,\n        'notify': False,\n     \
          \   'comment': 'This was expected.',\n        'host_name': 'example.com'\n\
          \    }).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\n# This schema has multiple variations. Please\
          \ refer to the\n# 'Payload' section for details.\nhttp POST \"$API_URL/domain-types/acknowledge/collections/host\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    acknowledge_type='host'\
          \ \\\n    sticky='False' \\\n    persistent='False' \\\n    notify='False'\
          \ \\\n    comment='This was expected.' \\\n    host_name='example.com' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\n# This schema has multiple variations.\
          \ Please refer to the\n# 'Payload' section for details.\nout=$(\n  curl\
          \ \\\n    --request POST \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\\
          n\" \\\n    --header \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n\
          \    --header \"Accept: application/json\" \\\n    --header \"Content-Type:\
          \ application/json\" \\\n    --data '{\n          \"acknowledge_type\":\
          \ \"host\",\n          \"comment\": \"This was expected.\",\n          \"\
          host_name\": \"example.com\",\n          \"notify\": false,\n          \"\
          persistent\": false,\n          \"sticky\": false\n        }' \\\n    \"\
          $API_URL/domain-types/acknowledge/collections/host\")\n\nresp=$( echo \"\
          ${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo \"${out}\" | awk\
          \ -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation, please\
          \ install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"$resp\"\n\
          \nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n    echo\
          \ \"Request error\"\n    exit 1\nfi"
  /domain-types/acknowledge/collections/service:
    post:
      description: "\n\nThis endpoint requires the following permissions: \n * `action.acknowledge`:\
        \ Acknowledge host and service problems and remove acknowledgements\n"
      operationId: cmk.gui.plugins.openapi.endpoints.acknowledgement.set_acknowledgement_on_services
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcknowledgeServiceRelatedProblem'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '422':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unprocessable Entity: Service was not in a problem state.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '204':
          content: {}
          description: 'No Content: Operation done successfully. No further output.'
      summary: Set acknowledgement on related services
      tags:
      - Acknowledge problems
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/domain-types/acknowledge/collections/service\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    # This schema has multiple variations. Please refer to\n  \
          \  # the 'Payload' section for details.\n    json={\n        'acknowledge_type':\
          \ 'service',\n        'sticky': False,\n        'persistent': False,\n \
          \       'notify': False,\n        'comment': 'This was expected.',\n   \
          \     'host_name': 'example.com',\n        'service_description': 'CPU load'\n\
          \    },\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\n\
          elif resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/acknowledge/collections/service\",\n    method=\"\
          POST\",\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME}\
          \ {PASSWORD}\",\n        \"Accept\": \"application/json\",\n        \"Content-Type\"\
          : 'application/json',  # (required) A header specifying which type of content\
          \ is in the request/response body.\n    },\n    # This schema has multiple\
          \ variations. Please refer to\n    # the 'Payload' section for details.\n\
          \    data=json.dumps({\n        'acknowledge_type': 'service',\n       \
          \ 'sticky': False,\n        'persistent': False,\n        'notify': False,\n\
          \        'comment': 'This was expected.',\n        'host_name': 'example.com',\n\
          \        'service_description': 'CPU load'\n    }).encode('utf-8'),\n)\n\
          response = urllib.request.urlopen(request)\nif response.status == 200:\n\
          \    pprint.pprint(json.loads(response.read()))\nelif response.status ==\
          \ 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\n# This schema has multiple variations. Please\
          \ refer to the\n# 'Payload' section for details.\nhttp POST \"$API_URL/domain-types/acknowledge/collections/service\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    acknowledge_type='service'\
          \ \\\n    sticky='False' \\\n    persistent='False' \\\n    notify='False'\
          \ \\\n    comment='This was expected.' \\\n    host_name='example.com' \\\
          \n    service_description='CPU load' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\n# This schema has multiple variations.\
          \ Please refer to the\n# 'Payload' section for details.\nout=$(\n  curl\
          \ \\\n    --request POST \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\\
          n\" \\\n    --header \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n\
          \    --header \"Accept: application/json\" \\\n    --header \"Content-Type:\
          \ application/json\" \\\n    --data '{\n          \"acknowledge_type\":\
          \ \"service\",\n          \"comment\": \"This was expected.\",\n       \
          \   \"host_name\": \"example.com\",\n          \"notify\": false,\n    \
          \      \"persistent\": false,\n          \"service_description\": \"CPU\
          \ load\",\n          \"sticky\": false\n        }' \\\n    \"$API_URL/domain-types/acknowledge/collections/service\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /objects/activation_run/{activation_id}/actions/wait-for-completion/invoke:
    get:
      description: "This endpoint will periodically redirect on itself to prevent\
        \ timeouts.This endpoint requires the following permissions: \n * `wato.activate`:\
        \ This permission is needed for activating the current configuration (and\
        \ thus rewriting the monitoring configuration and restart the monitoring daemon.)\n"
      operationId: cmk.gui.plugins.openapi.endpoints.activate_changes.activate_changes_wait_for_completion
      parameters:
      - description: The activation-id.
        in: path
        name: activation_id
        required: true
        schema:
          example: d3b07384d113e0ec49eaa6238ad5ff00
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: There is no running activation with this activation_id.'
        '302':
          content: {}
          description: 'Found: The activation is still running. Redirecting to the
            ''Wait for completion'' endpoint.'
        '204':
          content: {}
          description: 'No Content: The activation has been completed.'
      summary: Wait for activation completion
      tags:
      - Activate changes
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/objects/activation_run/d3b07384d113e0ec49eaa6238ad5ff00/actions/wait-for-completion/invoke\"\
          ,\n    allow_redirects=True,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\n\
          elif resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/activation_run/d3b07384d113e0ec49eaa6238ad5ff00/actions/wait-for-completion/invoke\"\
          ,\n    method=\"GET\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \    },\n)\nresponse = urllib.request.urlopen(request)\nif response.status\
          \ == 200:\n    pprint.pprint(json.loads(response.read()))\nelif response.status\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/objects/activation_run/d3b07384d113e0ec49eaa6238ad5ff00/actions/wait-for-completion/invoke\"\
          \ \\\n    --follow \\\n    --all \\\n    \"Authorization: Bearer $USERNAME\
          \ $PASSWORD\" \\\n    \"Accept: application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request GET\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/objects/activation_run/d3b07384d113e0ec49eaa6238ad5ff00/actions/wait-for-completion/invoke\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /objects/activation_run/{activation_id}:
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * `wato.activate`:\
        \ This permission is needed for activating the current configuration (and\
        \ thus rewriting the monitoring configuration and restart the monitoring daemon.)\n"
      operationId: cmk.gui.plugins.openapi.endpoints.activate_changes.show_activation
      parameters:
      - description: The activation-id.
        in: path
        name: activation_id
        required: true
        schema:
          example: d3b07384d113e0ec49eaa6238ad5ff00
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: There is no running activation with this activation_id.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainObject'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Show the activation status
      tags:
      - Activate changes
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/objects/activation_run/d3b07384d113e0ec49eaa6238ad5ff00\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/activation_run/d3b07384d113e0ec49eaa6238ad5ff00\"\
          ,\n    method=\"GET\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \    },\n)\nresponse = urllib.request.urlopen(request)\nif response.status\
          \ == 200:\n    pprint.pprint(json.loads(response.read()))\nelif response.status\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/objects/activation_run/d3b07384d113e0ec49eaa6238ad5ff00\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request GET\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/objects/activation_run/d3b07384d113e0ec49eaa6238ad5ff00\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/activation_run/collections/running:
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * Optionally:\n\
        \   * Any of:\n     * `general.see_all`: See all objects regardless of contacts\
        \ and contact groups. If combined with 'perform commands' then commands may\
        \ be done on all objects.\n     * `bi.see_all`: With this permission set,\
        \ the BI aggregation rules are applied to all hosts and services - not only\
        \ those the user is a contact for. If you remove this permissions then the\
        \ user will see incomplete aggregation trees with status based only on those\
        \ items.\n     * `mkeventd.seeall`: If a user lacks this permission then he/she\
        \ can see only those events that originate from a host that he/she is a contact\
        \ for.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.activate_changes.list_activations
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainObjectCollection'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Show all currently running activations
      tags:
      - Activate changes
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/domain-types/activation_run/collections/running\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/activation_run/collections/running\",\n \
          \   method=\"GET\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \    },\n)\nresponse = urllib.request.urlopen(request)\nif response.status\
          \ == 200:\n    pprint.pprint(json.loads(response.read()))\nelif response.status\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/domain-types/activation_run/collections/running\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request GET\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/domain-types/activation_run/collections/running\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/activation_run/actions/activate-changes/invoke:
    post:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.activate`: This permission is needed for activating the\
        \ current configuration (and thus rewriting the monitoring configuration and\
        \ restart the monitoring daemon.)\n   * Optionally:\n     * `wato.activateforeign`:\
        \ When several users work in parallel with WATO then several pending changes\
        \ of different users might pile up before changes are activate. Only with\
        \ this permission a user will be allowed to activate the current configuration\
        \ if this situation appears.\n   * Optionally:\n     * Any of:\n       * `general.see_all`:\
        \ See all objects regardless of contacts and contact groups. If combined with\
        \ 'perform commands' then commands may be done on all objects.\n       * `bi.see_all`:\
        \ With this permission set, the BI aggregation rules are applied to all hosts\
        \ and services - not only those the user is a contact for. If you remove this\
        \ permissions then the user will see incomplete aggregation trees with status\
        \ based only on those items.\n       * `mkeventd.seeall`: If a user lacks\
        \ this permission then he/she can see only those events that originate from\
        \ a host that he/she is a contact for.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.activate_changes.activate_changes
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivateChanges'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '401':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unauthorized: The API user may not activate another users
            changes, or the user may and activation was not forced explicitly.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '422':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unprocessable Entity: There are no changes to be activated.'
        '423':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Locked: There is already an activation running.'
        '409':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Conflict: Some sites could not be activated.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '302':
          content: {}
          description: 'Found: The activation has been started and is still running.
            Redirecting to the ''Wait for completion'' endpoint.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainObject'
          description: 'OK: The activation has been completed.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Activate pending changes
      tags:
      - Activate changes
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/domain-types/activation_run/actions/activate-changes/invoke\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={\n        'redirect': False,\n        'sites': ['production'],\n\
          \        'force_foreign_changes': False\n    },\n    allow_redirects=True,\n\
          )\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/activation_run/actions/activate-changes/invoke\"\
          ,\n    method=\"POST\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \        \"Content-Type\": 'application/json',  # (required) A header specifying\
          \ which type of content is in the request/response body.\n    },\n    data=json.dumps({\n\
          \        'redirect': False,\n        'sites': ['production'],\n        'force_foreign_changes':\
          \ False\n    }).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp POST \"$API_URL/domain-types/activation_run/actions/activate-changes/invoke\"\
          \ \\\n    --follow \\\n    --all \\\n    \"Authorization: Bearer $USERNAME\
          \ $PASSWORD\" \\\n    \"Accept: application/json\" \\\n    'Content-Type:application/json'\
          \ \\\n    redirect='False' \\\n    sites='['production']' \\\n    force_foreign_changes='False'\
          \ \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request POST\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"force_foreign_changes\": false,\n     \
          \     \"redirect\": false,\n          \"sites\": [\n            \"production\"\
          \n          ]\n        }' \\\n    \"$API_URL/domain-types/activation_run/actions/activate-changes/invoke\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/agent/actions/download/invoke:
    get:
      description: ''
      operationId: cmk.gui.plugins.openapi.endpoints.agent.download_agent
      parameters:
      - description: The type of the operating system. May be one of linux_rpm, linux_deb,
          windows_msi
        in: query
        name: os_type
        required: true
        schema:
          enum:
          - linux_deb
          - linux_rpm
          - windows_msi
          example: linux_deb
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Download agents shipped with Checkmk
      tags:
      - Agents
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\nimport shutil\n\
          \nHOST_NAME = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/octet-stream'\n\nresp = session.get(\n    f\"{API_URL}/domain-types/agent/actions/download/invoke\"\
          ,\n    params={  # goes into query string\n        \"os_type\": 'linux_deb',\
          \  # (required) The type of the operating system.\n    },\n)\nif resp.status_code\
          \ == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code == 204:\n\
          \    file_name = resp.headers[\"content-disposition\"].split(\"filename=\"\
          )[1].strip(\"\"\")\n    with open(file_name, 'wb') as out_file:\n      \
          \  resp.raw.decode_content = True\n        shutil.copyfileobj(resp.raw,\
          \ out_file)\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport shutil\nimport urllib.parse\n\
          import urllib.request\n\nHOST_NAME = \"localhost\"\nSITE_NAME = \"cmk\"\n\
          API_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\n\nUSERNAME\
          \ = \"automation\"\nPASSWORD = \"test123\"\n\nquery_string = urllib.parse.urlencode({\n\
          \    \"os_type\": 'linux_deb',  # (required) The type of the operating system.\n\
          })\n\nrequest = urllib.request.Request(\n    f\"{API_URL}/domain-types/agent/actions/download/invoke?{query_string}\"\
          ,\n    method=\"GET\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/octet-stream\"\
          ,\n    },\n)\nresponse = urllib.request.urlopen(request)\nif response.status\
          \ == 200:\n    pprint.pprint(json.loads(response.read()))\nelif response.status\
          \ == 204:\n    file_name = response.headers[\"content-disposition\"].split(\"\
          filename=\")[1].strip(\"\"\")\n    with open(file_name, 'wb') as out_file:\n\
          \        shutil.copyfileobj(response, out_file)\n    print(\"Done\")\nelse:\n\
          \    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/domain-types/agent/actions/download/invoke\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/octet-stream\" \\\n    os_type=='linux_deb' \\\n    --download\
          \ \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    -G \\\n   \
          \ --request GET \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\\
          n\" \\\n    --header \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n\
          \    --header \"Accept: application/octet-stream\" \\\n    --data-urlencode\
          \ 'os_type=linux_deb' \\\n    \"$API_URL/domain-types/agent/actions/download/invoke\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /objects/bi_rule/{rule_id}:
    delete:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.bi_rules`: Use the WATO BI module, create, modify and delete\
        \ BI rules and aggregations in packs that you are a contact of.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.bi.delete_bi_rule
      parameters:
      - description: The unique id for the rule
        in: path
        name: rule_id
        required: true
        schema:
          example: rule1
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '409':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Conflict: The request is in conflict with the stored resource.'
        '204':
          content: {}
          description: 'No Content: Operation done successfully. No further output.'
      summary: Delete BI rule
      tags:
      - Business intelligence (BI)
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.delete(\n    f\"{API_URL}/objects/bi_rule/rule1\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/bi_rule/rule1\",\n    method=\"DELETE\",\n   \
          \ headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n    },\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp DELETE \"$API_URL/objects/bi_rule/rule1\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request DELETE\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/objects/bi_rule/rule1\")\n\nresp=$(\
          \ echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo \"${out}\"\
          \ | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation, please\
          \ install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"$resp\"\n\
          \nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n    echo\
          \ \"Request error\"\n    exit 1\nfi"
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * `wato.bi_rules`:\
        \ Use the WATO BI module, create, modify and delete BI rules and aggregations\
        \ in packs that you are a contact of.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.bi.get_bi_rule
      parameters:
      - description: The unique id for the rule
        in: path
        name: rule_id
        required: true
        schema:
          example: rule1
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BIRuleEndpoint'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Show a BI rule
      tags:
      - Business intelligence (BI)
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/objects/bi_rule/rule1\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/bi_rule/rule1\",\n    method=\"GET\",\n    headers={\n\
          \        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\",\n       \
          \ \"Accept\": \"application/json\",\n    },\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/objects/bi_rule/rule1\" \\\
          \n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept: application/json\"\
          \ \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request GET\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/objects/bi_rule/rule1\")\n\nresp=$(\
          \ echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo \"${out}\"\
          \ | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation, please\
          \ install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"$resp\"\n\
          \nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n    echo\
          \ \"Request error\"\n    exit 1\nfi"
    post:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.bi_rules`: Use the WATO BI module, create, modify and delete\
        \ BI rules and aggregations in packs that you are a contact of.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.bi.post_bi_rule
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      - description: The unique id for the rule
        in: path
        name: rule_id
        required: true
        schema:
          example: rule1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BIRuleEndpoint'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BIRuleEndpoint'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Create a new BI rule
      tags:
      - Business intelligence (BI)
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/objects/bi_rule/rule1\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={\n        'id': 'rule1',\n        'nodes': [],\n    \
          \    'params': {\n            'arguments': ['foo', 'bar']\n        },\n\
          \        'node_visualization': {\n            'type': 'block',\n       \
          \     'style_config': {}\n        },\n        'properties': {\n        \
          \    'title': '',\n            'comment': '',\n            'docu_url': '',\n\
          \            'icon': '',\n            'state_messages': {}\n        },\n\
          \        'aggregation_function': {\n            'type': 'best',\n      \
          \      'count': 1,\n            'restrict_state': 2\n        },\n      \
          \  'computation_options': {\n            'disabled': False\n        },\n\
          \        'pack_id': 'pack1'\n    },\n)\nif resp.status_code == 200:\n  \
          \  pprint.pprint(resp.json())\nelif resp.status_code == 204:\n    print(\"\
          Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/bi_rule/rule1\",\n    method=\"POST\",\n    headers={\n\
          \        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\",\n       \
          \ \"Accept\": \"application/json\",\n        \"Content-Type\": 'application/json',\
          \  # (required) A header specifying which type of content is in the request/response\
          \ body.\n    },\n    data=json.dumps({\n        'id': 'rule1',\n       \
          \ 'nodes': [],\n        'params': {\n            'arguments': ['foo', 'bar']\n\
          \        },\n        'node_visualization': {\n            'type': 'block',\n\
          \            'style_config': {}\n        },\n        'properties': {\n \
          \           'title': '',\n            'comment': '',\n            'docu_url':\
          \ '',\n            'icon': '',\n            'state_messages': {}\n     \
          \   },\n        'aggregation_function': {\n            'type': 'best',\n\
          \            'count': 1,\n            'restrict_state': 2\n        },\n\
          \        'computation_options': {\n            'disabled': False\n     \
          \   },\n        'pack_id': 'pack1'\n    }).encode('utf-8'),\n)\nresponse\
          \ = urllib.request.urlopen(request)\nif response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp POST \"$API_URL/objects/bi_rule/rule1\" \\\
          \n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept: application/json\"\
          \ \\\n    'Content-Type:application/json' \\\n    id='rule1' \\\n    nodes='[]'\
          \ \\\n    params='{'arguments': ['foo', 'bar']}' \\\n    node_visualization='{'type':\
          \ 'block', 'style_config': {}}' \\\n    properties='{'title': '', 'comment':\
          \ '', 'docu_url': '', 'icon': '', 'state_messages': {}}' \\\n    aggregation_function='{'type':\
          \ 'best', 'count': 1, 'restrict_state': 2}' \\\n    computation_options='{'disabled':\
          \ False}' \\\n    pack_id='pack1' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request POST\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"aggregation_function\": {\n           \
          \ \"count\": 1,\n            \"restrict_state\": 2,\n            \"type\"\
          : \"best\"\n          },\n          \"computation_options\": {\n       \
          \     \"disabled\": false\n          },\n          \"id\": \"rule1\",\n\
          \          \"node_visualization\": {\n            \"style_config\": {},\n\
          \            \"type\": \"block\"\n          },\n          \"nodes\": [],\n\
          \          \"pack_id\": \"pack1\",\n          \"params\": {\n          \
          \  \"arguments\": [\n              \"foo\",\n              \"bar\"\n   \
          \         ]\n          },\n          \"properties\": {\n            \"comment\"\
          : \"\",\n            \"docu_url\": \"\",\n            \"icon\": \"\",\n\
          \            \"state_messages\": {},\n            \"title\": \"\"\n    \
          \      }\n        }' \\\n    \"$API_URL/objects/bi_rule/rule1\")\n\nresp=$(\
          \ echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo \"${out}\"\
          \ | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation, please\
          \ install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"$resp\"\n\
          \nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n    echo\
          \ \"Request error\"\n    exit 1\nfi"
    put:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.bi_rules`: Use the WATO BI module, create, modify and delete\
        \ BI rules and aggregations in packs that you are a contact of.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.bi.put_bi_rule
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      - description: The unique id for the rule
        in: path
        name: rule_id
        required: true
        schema:
          example: rule1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BIRuleEndpoint'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BIRuleEndpoint'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Update an existing BI rule
      tags:
      - Business intelligence (BI)
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.put(\n    f\"{API_URL}/objects/bi_rule/rule1\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={\n        'id': 'rule1',\n        'nodes': [],\n    \
          \    'params': {\n            'arguments': ['foo', 'bar']\n        },\n\
          \        'node_visualization': {\n            'type': 'block',\n       \
          \     'style_config': {}\n        },\n        'properties': {\n        \
          \    'title': '',\n            'comment': '',\n            'docu_url': '',\n\
          \            'icon': '',\n            'state_messages': {}\n        },\n\
          \        'aggregation_function': {\n            'type': 'best',\n      \
          \      'count': 1,\n            'restrict_state': 2\n        },\n      \
          \  'computation_options': {\n            'disabled': False\n        },\n\
          \        'pack_id': 'pack1'\n    },\n)\nif resp.status_code == 200:\n  \
          \  pprint.pprint(resp.json())\nelif resp.status_code == 204:\n    print(\"\
          Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/bi_rule/rule1\",\n    method=\"PUT\",\n    headers={\n\
          \        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\",\n       \
          \ \"Accept\": \"application/json\",\n        \"Content-Type\": 'application/json',\
          \  # (required) A header specifying which type of content is in the request/response\
          \ body.\n    },\n    data=json.dumps({\n        'id': 'rule1',\n       \
          \ 'nodes': [],\n        'params': {\n            'arguments': ['foo', 'bar']\n\
          \        },\n        'node_visualization': {\n            'type': 'block',\n\
          \            'style_config': {}\n        },\n        'properties': {\n \
          \           'title': '',\n            'comment': '',\n            'docu_url':\
          \ '',\n            'icon': '',\n            'state_messages': {}\n     \
          \   },\n        'aggregation_function': {\n            'type': 'best',\n\
          \            'count': 1,\n            'restrict_state': 2\n        },\n\
          \        'computation_options': {\n            'disabled': False\n     \
          \   },\n        'pack_id': 'pack1'\n    }).encode('utf-8'),\n)\nresponse\
          \ = urllib.request.urlopen(request)\nif response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp PUT \"$API_URL/objects/bi_rule/rule1\" \\\
          \n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept: application/json\"\
          \ \\\n    'Content-Type:application/json' \\\n    id='rule1' \\\n    nodes='[]'\
          \ \\\n    params='{'arguments': ['foo', 'bar']}' \\\n    node_visualization='{'type':\
          \ 'block', 'style_config': {}}' \\\n    properties='{'title': '', 'comment':\
          \ '', 'docu_url': '', 'icon': '', 'state_messages': {}}' \\\n    aggregation_function='{'type':\
          \ 'best', 'count': 1, 'restrict_state': 2}' \\\n    computation_options='{'disabled':\
          \ False}' \\\n    pack_id='pack1' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request PUT\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"aggregation_function\": {\n           \
          \ \"count\": 1,\n            \"restrict_state\": 2,\n            \"type\"\
          : \"best\"\n          },\n          \"computation_options\": {\n       \
          \     \"disabled\": false\n          },\n          \"id\": \"rule1\",\n\
          \          \"node_visualization\": {\n            \"style_config\": {},\n\
          \            \"type\": \"block\"\n          },\n          \"nodes\": [],\n\
          \          \"pack_id\": \"pack1\",\n          \"params\": {\n          \
          \  \"arguments\": [\n              \"foo\",\n              \"bar\"\n   \
          \         ]\n          },\n          \"properties\": {\n            \"comment\"\
          : \"\",\n            \"docu_url\": \"\",\n            \"icon\": \"\",\n\
          \            \"state_messages\": {},\n            \"title\": \"\"\n    \
          \      }\n        }' \\\n    \"$API_URL/objects/bi_rule/rule1\")\n\nresp=$(\
          \ echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo \"${out}\"\
          \ | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation, please\
          \ install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"$resp\"\n\
          \nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n    echo\
          \ \"Request error\"\n    exit 1\nfi"
  /objects/bi_aggregation/{aggregation_id}:
    delete:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.bi_rules`: Use the WATO BI module, create, modify and delete\
        \ BI rules and aggregations in packs that you are a contact of.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.bi.delete_bi_aggregation
      parameters:
      - description: The unique id for the aggregation
        in: path
        name: aggregation_id
        required: true
        schema:
          example: aggregation1
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '204':
          content: {}
          description: 'No Content: Operation done successfully. No further output.'
      summary: Delete a BI aggregation
      tags:
      - Business intelligence (BI)
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.delete(\n    f\"{API_URL}/objects/bi_aggregation/aggregation1\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/bi_aggregation/aggregation1\",\n    method=\"\
          DELETE\",\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME}\
          \ {PASSWORD}\",\n        \"Accept\": \"application/json\",\n    },\n)\n\
          response = urllib.request.urlopen(request)\nif response.status == 200:\n\
          \    pprint.pprint(json.loads(response.read()))\nelif response.status ==\
          \ 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp DELETE \"$API_URL/objects/bi_aggregation/aggregation1\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request DELETE\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/objects/bi_aggregation/aggregation1\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * `wato.bi_rules`:\
        \ Use the WATO BI module, create, modify and delete BI rules and aggregations\
        \ in packs that you are a contact of.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.bi.get_bi_aggregation
      parameters:
      - description: The unique id for the aggregation
        in: path
        name: aggregation_id
        required: true
        schema:
          example: aggregation1
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BIAggregationEndpoint'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Get a BI aggregation
      tags:
      - Business intelligence (BI)
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/objects/bi_aggregation/aggregation1\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/bi_aggregation/aggregation1\",\n    method=\"\
          GET\",\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n    },\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/objects/bi_aggregation/aggregation1\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request GET\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/objects/bi_aggregation/aggregation1\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
    post:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.bi_rules`: Use the WATO BI module, create, modify and delete\
        \ BI rules and aggregations in packs that you are a contact of.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.bi.post_bi_aggregation
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      - description: The unique id for the aggregation
        in: path
        name: aggregation_id
        required: true
        schema:
          example: aggregation1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BIAggregationEndpoint'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BIAggregationEndpoint'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Create a BI aggregation
      tags:
      - Business intelligence (BI)
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/objects/bi_aggregation/aggregation1\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={\n        'id': 'aggr1',\n        'comment': 'Rule comment',\n\
          \        'customer': 'customer1',\n        'groups': {\n            'names':\
          \ ['groupA', 'groupB'],\n            'paths': [['path', 'group', 'a'],\n\
          \                      ['path', 'group', 'b']]\n        },\n        'node':\
          \ {\n            'search': {\n                'type': 'empty'\n        \
          \    },\n            'action': {\n                'type': 'state_of_host',\n\
          \                'host_regex': ''\n            }\n        },\n        'aggregation_visualization':\
          \ {\n            'ignore_rule_styles': False,\n            'layout_id':\
          \ 'builtin_default',\n            'line_style': 'round'\n        },\n  \
          \      'computation_options': {\n            'disabled': False,\n      \
          \      'use_hard_states': False,\n            'escalate_downtimes_as_warn':\
          \ False\n        },\n        'pack_id': 'pack1'\n    },\n)\nif resp.status_code\
          \ == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code == 204:\n\
          \    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/bi_aggregation/aggregation1\",\n    method=\"\
          POST\",\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME}\
          \ {PASSWORD}\",\n        \"Accept\": \"application/json\",\n        \"Content-Type\"\
          : 'application/json',  # (required) A header specifying which type of content\
          \ is in the request/response body.\n    },\n    data=json.dumps({\n    \
          \    'id': 'aggr1',\n        'comment': 'Rule comment',\n        'customer':\
          \ 'customer1',\n        'groups': {\n            'names': ['groupA', 'groupB'],\n\
          \            'paths': [['path', 'group', 'a'],\n                      ['path',\
          \ 'group', 'b']]\n        },\n        'node': {\n            'search': {\n\
          \                'type': 'empty'\n            },\n            'action':\
          \ {\n                'type': 'state_of_host',\n                'host_regex':\
          \ ''\n            }\n        },\n        'aggregation_visualization': {\n\
          \            'ignore_rule_styles': False,\n            'layout_id': 'builtin_default',\n\
          \            'line_style': 'round'\n        },\n        'computation_options':\
          \ {\n            'disabled': False,\n            'use_hard_states': False,\n\
          \            'escalate_downtimes_as_warn': False\n        },\n        'pack_id':\
          \ 'pack1'\n    }).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp POST \"$API_URL/objects/bi_aggregation/aggregation1\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    id='aggr1'\
          \ \\\n    comment='Rule comment' \\\n    customer='customer1' \\\n    groups='{'names':\
          \ ['groupA', 'groupB'], 'paths': [['path', 'group', 'a'], ['path', 'group',\
          \ 'b']]}' \\\n    node='{'search': {'type': 'empty'}, 'action': {'type':\
          \ 'state_of_host', 'host_regex': ''}}' \\\n    aggregation_visualization='{'ignore_rule_styles':\
          \ False, 'layout_id': 'builtin_default', 'line_style': 'round'}' \\\n  \
          \  computation_options='{'disabled': False, 'use_hard_states': False, 'escalate_downtimes_as_warn':\
          \ False}' \\\n    pack_id='pack1' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request POST\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"aggregation_visualization\": {\n      \
          \      \"ignore_rule_styles\": false,\n            \"layout_id\": \"builtin_default\"\
          ,\n            \"line_style\": \"round\"\n          },\n          \"comment\"\
          : \"Rule comment\",\n          \"computation_options\": {\n            \"\
          disabled\": false,\n            \"escalate_downtimes_as_warn\": false,\n\
          \            \"use_hard_states\": false\n          },\n          \"customer\"\
          : \"customer1\",\n          \"groups\": {\n            \"names\": [\n  \
          \            \"groupA\",\n              \"groupB\"\n            ],\n   \
          \         \"paths\": [\n              [\n                \"path\",\n   \
          \             \"group\",\n                \"a\"\n              ],\n    \
          \          [\n                \"path\",\n                \"group\",\n  \
          \              \"b\"\n              ]\n            ]\n          },\n   \
          \       \"id\": \"aggr1\",\n          \"node\": {\n            \"action\"\
          : {\n              \"host_regex\": \"\",\n              \"type\": \"state_of_host\"\
          \n            },\n            \"search\": {\n              \"type\": \"\
          empty\"\n            }\n          },\n          \"pack_id\": \"pack1\"\n\
          \        }' \\\n    \"$API_URL/objects/bi_aggregation/aggregation1\")\n\n\
          resp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo \"\
          ${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
    put:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.bi_rules`: Use the WATO BI module, create, modify and delete\
        \ BI rules and aggregations in packs that you are a contact of.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.bi.put_bi_aggregation
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      - description: The unique id for the aggregation
        in: path
        name: aggregation_id
        required: true
        schema:
          example: aggregation1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BIAggregationEndpoint'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BIAggregationEndpoint'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Update an existing BI aggregation
      tags:
      - Business intelligence (BI)
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.put(\n    f\"{API_URL}/objects/bi_aggregation/aggregation1\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={\n        'id': 'aggr1',\n        'comment': 'Rule comment',\n\
          \        'customer': 'customer1',\n        'groups': {\n            'names':\
          \ ['groupA', 'groupB'],\n            'paths': [['path', 'group', 'a'],\n\
          \                      ['path', 'group', 'b']]\n        },\n        'node':\
          \ {\n            'search': {\n                'type': 'empty'\n        \
          \    },\n            'action': {\n                'type': 'state_of_host',\n\
          \                'host_regex': ''\n            }\n        },\n        'aggregation_visualization':\
          \ {\n            'ignore_rule_styles': False,\n            'layout_id':\
          \ 'builtin_default',\n            'line_style': 'round'\n        },\n  \
          \      'computation_options': {\n            'disabled': False,\n      \
          \      'use_hard_states': False,\n            'escalate_downtimes_as_warn':\
          \ False\n        },\n        'pack_id': 'pack1'\n    },\n)\nif resp.status_code\
          \ == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code == 204:\n\
          \    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/bi_aggregation/aggregation1\",\n    method=\"\
          PUT\",\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n        \"Content-Type\":\
          \ 'application/json',  # (required) A header specifying which type of content\
          \ is in the request/response body.\n    },\n    data=json.dumps({\n    \
          \    'id': 'aggr1',\n        'comment': 'Rule comment',\n        'customer':\
          \ 'customer1',\n        'groups': {\n            'names': ['groupA', 'groupB'],\n\
          \            'paths': [['path', 'group', 'a'],\n                      ['path',\
          \ 'group', 'b']]\n        },\n        'node': {\n            'search': {\n\
          \                'type': 'empty'\n            },\n            'action':\
          \ {\n                'type': 'state_of_host',\n                'host_regex':\
          \ ''\n            }\n        },\n        'aggregation_visualization': {\n\
          \            'ignore_rule_styles': False,\n            'layout_id': 'builtin_default',\n\
          \            'line_style': 'round'\n        },\n        'computation_options':\
          \ {\n            'disabled': False,\n            'use_hard_states': False,\n\
          \            'escalate_downtimes_as_warn': False\n        },\n        'pack_id':\
          \ 'pack1'\n    }).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp PUT \"$API_URL/objects/bi_aggregation/aggregation1\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    id='aggr1'\
          \ \\\n    comment='Rule comment' \\\n    customer='customer1' \\\n    groups='{'names':\
          \ ['groupA', 'groupB'], 'paths': [['path', 'group', 'a'], ['path', 'group',\
          \ 'b']]}' \\\n    node='{'search': {'type': 'empty'}, 'action': {'type':\
          \ 'state_of_host', 'host_regex': ''}}' \\\n    aggregation_visualization='{'ignore_rule_styles':\
          \ False, 'layout_id': 'builtin_default', 'line_style': 'round'}' \\\n  \
          \  computation_options='{'disabled': False, 'use_hard_states': False, 'escalate_downtimes_as_warn':\
          \ False}' \\\n    pack_id='pack1' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request PUT\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"aggregation_visualization\": {\n      \
          \      \"ignore_rule_styles\": false,\n            \"layout_id\": \"builtin_default\"\
          ,\n            \"line_style\": \"round\"\n          },\n          \"comment\"\
          : \"Rule comment\",\n          \"computation_options\": {\n            \"\
          disabled\": false,\n            \"escalate_downtimes_as_warn\": false,\n\
          \            \"use_hard_states\": false\n          },\n          \"customer\"\
          : \"customer1\",\n          \"groups\": {\n            \"names\": [\n  \
          \            \"groupA\",\n              \"groupB\"\n            ],\n   \
          \         \"paths\": [\n              [\n                \"path\",\n   \
          \             \"group\",\n                \"a\"\n              ],\n    \
          \          [\n                \"path\",\n                \"group\",\n  \
          \              \"b\"\n              ]\n            ]\n          },\n   \
          \       \"id\": \"aggr1\",\n          \"node\": {\n            \"action\"\
          : {\n              \"host_regex\": \"\",\n              \"type\": \"state_of_host\"\
          \n            },\n            \"search\": {\n              \"type\": \"\
          empty\"\n            }\n          },\n          \"pack_id\": \"pack1\"\n\
          \        }' \\\n    \"$API_URL/objects/bi_aggregation/aggregation1\")\n\n\
          resp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo \"\
          ${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/bi_pack/collections/all:
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * `wato.bi_rules`:\
        \ Use the WATO BI module, create, modify and delete BI rules and aggregations\
        \ in packs that you are a contact of.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.bi.get_bi_packs
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainObjectCollection'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Show all BI packs
      tags:
      - Business intelligence (BI)
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/domain-types/bi_pack/collections/all\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/bi_pack/collections/all\",\n    method=\"\
          GET\",\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n    },\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/domain-types/bi_pack/collections/all\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request GET\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/domain-types/bi_pack/collections/all\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /objects/bi_pack/{pack_id}:
    delete:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.bi_rules`: Use the WATO BI module, create, modify and delete\
        \ BI rules and aggregations in packs that you are a contact of.\n   * `wato.bi_admin`:\
        \ Edit all rules and aggregations for Business Intelligence, create, modify\
        \ and delete rule packs.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.bi.delete_bi_pack
      parameters:
      - description: The unique id for the aggregation pack
        in: path
        name: pack_id
        required: true
        schema:
          example: pack1
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '204':
          content: {}
          description: 'No Content: Operation done successfully. No further output.'
      summary: Delete BI pack
      tags:
      - Business intelligence (BI)
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.delete(\n    f\"{API_URL}/objects/bi_pack/pack1\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/bi_pack/pack1\",\n    method=\"DELETE\",\n   \
          \ headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n    },\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp DELETE \"$API_URL/objects/bi_pack/pack1\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request DELETE\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/objects/bi_pack/pack1\")\n\nresp=$(\
          \ echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo \"${out}\"\
          \ | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation, please\
          \ install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"$resp\"\n\
          \nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n    echo\
          \ \"Request error\"\n    exit 1\nfi"
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * `wato.bi_rules`:\
        \ Use the WATO BI module, create, modify and delete BI rules and aggregations\
        \ in packs that you are a contact of.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.bi.get_bi_pack
      parameters:
      - description: The unique id for the aggregation pack
        in: path
        name: pack_id
        required: true
        schema:
          example: pack1
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainObject'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Get a BI pack and its rules and aggregations
      tags:
      - Business intelligence (BI)
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/objects/bi_pack/pack1\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/bi_pack/pack1\",\n    method=\"GET\",\n    headers={\n\
          \        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\",\n       \
          \ \"Accept\": \"application/json\",\n    },\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/objects/bi_pack/pack1\" \\\
          \n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept: application/json\"\
          \ \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request GET\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/objects/bi_pack/pack1\")\n\nresp=$(\
          \ echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo \"${out}\"\
          \ | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation, please\
          \ install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"$resp\"\n\
          \nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n    echo\
          \ \"Request error\"\n    exit 1\nfi"
    post:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.bi_rules`: Use the WATO BI module, create, modify and delete\
        \ BI rules and aggregations in packs that you are a contact of.\n   * `wato.bi_admin`:\
        \ Edit all rules and aggregations for Business Intelligence, create, modify\
        \ and delete rule packs.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.bi.post_bi_pack
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      - description: The unique id for the aggregation pack
        in: path
        name: pack_id
        required: true
        schema:
          example: pack1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BIPackEndpoint'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BIPackEndpoint'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Create a new BI pack
      tags:
      - Business intelligence (BI)
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/objects/bi_pack/pack1\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={\n        'title': 'BI Title',\n        'contact_groups':\
          \ [\n            'contact', 'contactgroup_b'\n        ],\n        'public':\
          \ 'false'\n    },\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\n\
          elif resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/bi_pack/pack1\",\n    method=\"POST\",\n    headers={\n\
          \        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\",\n       \
          \ \"Accept\": \"application/json\",\n        \"Content-Type\": 'application/json',\
          \  # (required) A header specifying which type of content is in the request/response\
          \ body.\n    },\n    data=json.dumps({\n        'title': 'BI Title',\n \
          \       'contact_groups': [\n            'contact', 'contactgroup_b'\n \
          \       ],\n        'public': 'false'\n    }).encode('utf-8'),\n)\nresponse\
          \ = urllib.request.urlopen(request)\nif response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp POST \"$API_URL/objects/bi_pack/pack1\" \\\
          \n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept: application/json\"\
          \ \\\n    'Content-Type:application/json' \\\n    title='BI Title' \\\n\
          \    contact_groups='['contact', 'contactgroup_b']' \\\n    public='false'\
          \ \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request POST\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"contact_groups\": [\n            \"contact\"\
          ,\n            \"contactgroup_b\"\n          ],\n          \"public\": \"\
          false\",\n          \"title\": \"BI Title\"\n        }' \\\n    \"$API_URL/objects/bi_pack/pack1\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
    put:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.bi_rules`: Use the WATO BI module, create, modify and delete\
        \ BI rules and aggregations in packs that you are a contact of.\n   * `wato.bi_admin`:\
        \ Edit all rules and aggregations for Business Intelligence, create, modify\
        \ and delete rule packs.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.bi.put_bi_pack
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      - description: The unique id for the aggregation pack
        in: path
        name: pack_id
        required: true
        schema:
          example: pack1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BIPackEndpoint'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BIPackEndpoint'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Update an existing BI pack
      tags:
      - Business intelligence (BI)
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.put(\n    f\"{API_URL}/objects/bi_pack/pack1\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={\n        'title': 'BI Title',\n        'contact_groups':\
          \ [\n            'contact', 'contactgroup_b'\n        ],\n        'public':\
          \ 'false'\n    },\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\n\
          elif resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/bi_pack/pack1\",\n    method=\"PUT\",\n    headers={\n\
          \        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\",\n       \
          \ \"Accept\": \"application/json\",\n        \"Content-Type\": 'application/json',\
          \  # (required) A header specifying which type of content is in the request/response\
          \ body.\n    },\n    data=json.dumps({\n        'title': 'BI Title',\n \
          \       'contact_groups': [\n            'contact', 'contactgroup_b'\n \
          \       ],\n        'public': 'false'\n    }).encode('utf-8'),\n)\nresponse\
          \ = urllib.request.urlopen(request)\nif response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp PUT \"$API_URL/objects/bi_pack/pack1\" \\\
          \n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept: application/json\"\
          \ \\\n    'Content-Type:application/json' \\\n    title='BI Title' \\\n\
          \    contact_groups='['contact', 'contactgroup_b']' \\\n    public='false'\
          \ \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request PUT\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"contact_groups\": [\n            \"contact\"\
          ,\n            \"contactgroup_b\"\n          ],\n          \"public\": \"\
          false\",\n          \"title\": \"BI Title\"\n        }' \\\n    \"$API_URL/objects/bi_pack/pack1\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/bi_aggregation/actions/aggregation_state/invoke:
    post:
      description: "\n\nThis endpoint requires the following permissions: \n * `wato.bi_rules`:\
        \ Use the WATO BI module, create, modify and delete BI rules and aggregations\
        \ in packs that you are a contact of.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.bi.get_bi_aggregation_state
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BIAggregationStateRequest'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BIAggregationStateResponse'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Get the state of BI aggregations
      tags:
      - Business intelligence (BI)
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/domain-types/bi_aggregation/actions/aggregation_state/invoke\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={\n        'filter_names': ['Host foo'],\n        'filter_groups':\
          \ ['My Group']\n    },\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\n\
          elif resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/bi_aggregation/actions/aggregation_state/invoke\"\
          ,\n    method=\"POST\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \        \"Content-Type\": 'application/json',  # (required) A header specifying\
          \ which type of content is in the request/response body.\n    },\n    data=json.dumps({\n\
          \        'filter_names': ['Host foo'],\n        'filter_groups': ['My Group']\n\
          \    }).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp POST \"$API_URL/domain-types/bi_aggregation/actions/aggregation_state/invoke\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    filter_names='['Host\
          \ foo']' \\\n    filter_groups='['My Group']' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request POST\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"filter_groups\": [\n            \"My Group\"\
          \n          ],\n          \"filter_names\": [\n            \"Host foo\"\n\
          \          ]\n        }' \\\n    \"$API_URL/domain-types/bi_aggregation/actions/aggregation_state/invoke\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /root_cert:
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * `general.agent_pairing`:\
        \ Pairing of Checkmk agents with the monitoring site. This step establishes\
        \ trust between the agent and the monitoring site.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.certs.root_cert
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: You do not have the permission for agent pairing.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/X509PEM'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: X.509 PEM-encoded root certificate
      tags:
      - Certificates
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/root_cert\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/root_cert\",\n    method=\"GET\",\n    headers={\n   \
          \     \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\",\n        \"\
          Accept\": \"application/json\",\n    },\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/root_cert\" \\\n    \"Authorization:\
          \ Bearer $USERNAME $PASSWORD\" \\\n    \"Accept: application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request GET\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/root_cert\")\n\nresp=$( echo \"\
          ${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo \"${out}\" | awk\
          \ -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation, please\
          \ install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"$resp\"\n\
          \nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n    echo\
          \ \"Request error\"\n    exit 1\nfi"
  /csr:
    post:
      description: "\n\nThis endpoint requires the following permissions: \n * `general.agent_pairing`:\
        \ Pairing of Checkmk agents with the monitoring site. This step establishes\
        \ trust between the agent and the monitoring site.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.certs.make_certificate
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/X509ReqPEMUUID'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: You do not have the permission for agent pairing.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/X509PEM'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: X.509 PEM-encoded Certificate Signing Requests (CSRs)
      tags:
      - Certificates
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/csr\",\n\
          \    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={\n        'csr': '-----BEGIN CERTIFICATE REQUEST-----\\\
          n...\\n-----END CERTIFICATE REQUEST-----\\n'\n    },\n)\nif resp.status_code\
          \ == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code == 204:\n\
          \    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/csr\",\n    method=\"POST\",\n    headers={\n        \"\
          Authorization\": f\"Bearer {USERNAME} {PASSWORD}\",\n        \"Accept\"\
          : \"application/json\",\n        \"Content-Type\": 'application/json', \
          \ # (required) A header specifying which type of content is in the request/response\
          \ body.\n    },\n    data=json.dumps({\n        'csr': '-----BEGIN CERTIFICATE\
          \ REQUEST-----\\n...\\n-----END CERTIFICATE REQUEST-----\\n'\n    }).encode('utf-8'),\n\
          )\nresponse = urllib.request.urlopen(request)\nif response.status == 200:\n\
          \    pprint.pprint(json.loads(response.read()))\nelif response.status ==\
          \ 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp POST \"$API_URL/csr\" \\\n    \"Authorization:\
          \ Bearer $USERNAME $PASSWORD\" \\\n    \"Accept: application/json\" \\\n\
          \    'Content-Type:application/json' \\\n    csr='-----BEGIN CERTIFICATE\
          \ REQUEST-----\n...\n-----END CERTIFICATE REQUEST-----\n' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request POST\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"csr\": \"-----BEGIN CERTIFICATE REQUEST-----\\\
          n...\\n-----END CERTIFICATE REQUEST-----\\n\"\n        }' \\\n    \"$API_URL/csr\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/contact_group_config/collections/all:
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * `wato.users`:\
        \ This permission is needed for the modules <b>Users</b>, <b>Roles</b> and\
        \ <b>Contact Groups</b>\n"
      operationId: cmk.gui.plugins.openapi.endpoints.contact_group_config.list_group
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkedValueDomainObjectCollection'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Show all contact groups
      tags:
      - Contact groups
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/domain-types/contact_group_config/collections/all\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/contact_group_config/collections/all\",\n\
          \    method=\"GET\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \    },\n)\nresponse = urllib.request.urlopen(request)\nif response.status\
          \ == 200:\n    pprint.pprint(json.loads(response.read()))\nelif response.status\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/domain-types/contact_group_config/collections/all\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request GET\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/domain-types/contact_group_config/collections/all\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
    post:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.users`: This permission is needed for the modules <b>Users</b>,\
        \ <b>Roles</b> and <b>Contact Groups</b>\n"
      operationId: cmk.gui.plugins.openapi.endpoints.contact_group_config.create
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputContactGroup'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainObject'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
            ETag:
              allowEmptyValue: false
              description: The HTTP ETag header for this resource. It identifies the
                current state of the object and needs to be sent along in the "If-Match"
                request-header for subsequent modifications. Please note that the
                actual ETag returned by some endpoints may look different than the
                one shown in this example.
              example: '"a20ceacf346041dc"'
              required: false
              schema:
                type: string
      summary: Create a contact group
      tags:
      - Contact groups
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/domain-types/contact_group_config/collections/all\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={'name': 'OnCall', 'alias': 'Not on Sundays.'},\n)\nif\
          \ resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/contact_group_config/collections/all\",\n\
          \    method=\"POST\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \        \"Content-Type\": 'application/json',  # (required) A header specifying\
          \ which type of content is in the request/response body.\n    },\n    data=json.dumps({'name':\
          \ 'OnCall', 'alias': 'Not on Sundays.'}).encode('utf-8'),\n)\nresponse =\
          \ urllib.request.urlopen(request)\nif response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp POST \"$API_URL/domain-types/contact_group_config/collections/all\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    name='OnCall'\
          \ \\\n    alias='Not on Sundays.' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request POST\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"alias\": \"Not on Sundays.\",\n       \
          \   \"name\": \"OnCall\"\n        }' \\\n    \"$API_URL/domain-types/contact_group_config/collections/all\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /objects/contact_group_config/{name}:
    delete:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.users`: This permission is needed for the modules <b>Users</b>,\
        \ <b>Roles</b> and <b>Contact Groups</b>\n"
      operationId: cmk.gui.plugins.openapi.endpoints.contact_group_config.delete
      parameters:
      - description: A name used as an identifier. Can be of arbitrary (sensible)
          length.
        in: path
        name: name
        required: true
        schema:
          example: pathname
          pattern: '[a-zA-Z0-9][a-zA-Z0-9_-]+'
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '204':
          content: {}
          description: 'No Content: Operation done successfully. No further output.'
      summary: Delete a contact group
      tags:
      - Contact groups
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.delete(\n    f\"{API_URL}/objects/contact_group_config/pathname\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/contact_group_config/pathname\",\n    method=\"\
          DELETE\",\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME}\
          \ {PASSWORD}\",\n        \"Accept\": \"application/json\",\n    },\n)\n\
          response = urllib.request.urlopen(request)\nif response.status == 200:\n\
          \    pprint.pprint(json.loads(response.read()))\nelif response.status ==\
          \ 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp DELETE \"$API_URL/objects/contact_group_config/pathname\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request DELETE\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/objects/contact_group_config/pathname\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * `wato.users`:\
        \ This permission is needed for the modules <b>Users</b>, <b>Roles</b> and\
        \ <b>Contact Groups</b>\n"
      operationId: cmk.gui.plugins.openapi.endpoints.contact_group_config.show
      parameters:
      - description: A name used as an identifier. Can be of arbitrary (sensible)
          length.
        in: path
        name: name
        required: true
        schema:
          example: pathname
          pattern: '[a-zA-Z0-9][a-zA-Z0-9_-]+'
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactGroup'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
            ETag:
              allowEmptyValue: false
              description: The HTTP ETag header for this resource. It identifies the
                current state of the object and needs to be sent along in the "If-Match"
                request-header for subsequent modifications. Please note that the
                actual ETag returned by some endpoints may look different than the
                one shown in this example.
              example: '"a20ceacf346041dc"'
              required: false
              schema:
                type: string
      summary: Show a contact group
      tags:
      - Contact groups
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/objects/contact_group_config/pathname\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/contact_group_config/pathname\",\n    method=\"\
          GET\",\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n    },\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/objects/contact_group_config/pathname\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request GET\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/objects/contact_group_config/pathname\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
    put:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.users`: This permission is needed for the modules <b>Users</b>,\
        \ <b>Roles</b> and <b>Contact Groups</b>\n"
      operationId: cmk.gui.plugins.openapi.endpoints.contact_group_config.update
      parameters:
      - description: The value of the, to be modified, object's ETag header. You can
          get this value by displaying the object it individually. To update this
          object the currently stored ETag needs to be the same as the one sent. The
          content of the ETag can potentially be anything and should be treated as
          semantically opaque.
        in: header
        name: If-Match
        required: true
        schema:
          example: '"a20ceacf346041dc"'
          type: string
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      - description: A name used as an identifier. Can be of arbitrary (sensible)
          length.
        in: path
        name: name
        required: true
        schema:
          example: pathname
          pattern: '[a-zA-Z0-9][a-zA-Z0-9_-]+'
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroup'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactGroup'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
            ETag:
              allowEmptyValue: false
              description: The HTTP ETag header for this resource. It identifies the
                current state of the object and needs to be sent along in the "If-Match"
                request-header for subsequent modifications. Please note that the
                actual ETag returned by some endpoints may look different than the
                one shown in this example.
              example: '"a20ceacf346041dc"'
              required: false
              schema:
                type: string
        '412':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Precondition Failed: The value of the If-Match header doesn''t
            match the object''s ETag.'
        '428':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Precondition Required: The required If-Match header is missing.'
      summary: Update a contact group
      tags:
      - Contact groups
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.put(\n    f\"{API_URL}/objects/contact_group_config/pathname\"\
          ,\n    headers={\n        \"If-Match\": '\"a20ceacf346041dc\"',  # (required)\
          \ The value of the, to be modified, object's ETag header.\n        \"Content-Type\"\
          : 'application/json',  # (required) A header specifying which type of content\
          \ is in the request/response body.\n    },\n    json={'alias': 'Example\
          \ Group'},\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\n\
          elif resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/contact_group_config/pathname\",\n    method=\"\
          PUT\",\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n        \"If-Match\": '\"\
          a20ceacf346041dc\"',  # (required) The value of the, to be modified, object's\
          \ ETag header.\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    data=json.dumps({'alias': 'Example Group'}).encode('utf-8'),\n\
          )\nresponse = urllib.request.urlopen(request)\nif response.status == 200:\n\
          \    pprint.pprint(json.loads(response.read()))\nelif response.status ==\
          \ 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp PUT \"$API_URL/objects/contact_group_config/pathname\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'If-Match:\"a20ceacf346041dc\"' \\\n    'Content-Type:application/json'\
          \ \\\n    alias='Example Group' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request PUT\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"If-Match: \"a20ceacf346041dc\"\"\
          \ \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\n\
          \          \"alias\": \"Example Group\"\n        }' \\\n    \"$API_URL/objects/contact_group_config/pathname\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/contact_group_config/actions/bulk-update/invoke:
    put:
      description: "Please be aware that when doing bulk updates, it is not possible\
        \ to prevent the\n[Updating Values](\"lost update problem\"), which is normally\
        \ prevented by the ETag locking\nmechanism. Use at your own risk.This endpoint\
        \ requires the following permissions: \n * All of:\n   * `wato.edit`: This\
        \ permission is needed in order to make any changes or perform any actions\
        \ at all. Without this permission, the user is only able to view data, and\
        \ that only in modules he has explicit permissions for.\n   * `wato.users`:\
        \ This permission is needed for the modules <b>Users</b>, <b>Roles</b> and\
        \ <b>Contact Groups</b>\n"
      operationId: cmk.gui.plugins.openapi.endpoints.contact_group_config.bulk_update
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkUpdateContactGroup'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainObjectCollection'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Bulk update contact groups
      tags:
      - Contact groups
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.put(\n    f\"{API_URL}/domain-types/contact_group_config/actions/bulk-update/invoke\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={\n        'entries': [{\n            'name': 'OnCall',\n\
          \            'attributes': {\n                'alias': 'Not on Sundays'\n\
          \            }\n        }]\n    },\n)\nif resp.status_code == 200:\n   \
          \ pprint.pprint(resp.json())\nelif resp.status_code == 204:\n    print(\"\
          Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/contact_group_config/actions/bulk-update/invoke\"\
          ,\n    method=\"PUT\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \        \"Content-Type\": 'application/json',  # (required) A header specifying\
          \ which type of content is in the request/response body.\n    },\n    data=json.dumps({\n\
          \        'entries': [{\n            'name': 'OnCall',\n            'attributes':\
          \ {\n                'alias': 'Not on Sundays'\n            }\n        }]\n\
          \    }).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp PUT \"$API_URL/domain-types/contact_group_config/actions/bulk-update/invoke\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    entries='[{'name':\
          \ 'OnCall', 'attributes': {'alias': 'Not on Sundays'}}]' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request PUT\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"entries\": [\n            {\n         \
          \     \"attributes\": {\n                \"alias\": \"Not on Sundays\"\n\
          \              },\n              \"name\": \"OnCall\"\n            }\n \
          \         ]\n        }' \\\n    \"$API_URL/domain-types/contact_group_config/actions/bulk-update/invoke\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/contact_group_config/actions/bulk-create/invoke:
    post:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.users`: This permission is needed for the modules <b>Users</b>,\
        \ <b>Roles</b> and <b>Contact Groups</b>\n"
      operationId: cmk.gui.plugins.openapi.endpoints.contact_group_config.bulk_create
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkInputContactGroup'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainObjectCollection'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Bulk create contact groups
      tags:
      - Contact groups
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/domain-types/contact_group_config/actions/bulk-create/invoke\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={\n        'entries': [{\n            'name': 'OnCall',\n\
          \            'alias': 'Not on Sundays'\n        }]\n    },\n)\nif resp.status_code\
          \ == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code == 204:\n\
          \    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/contact_group_config/actions/bulk-create/invoke\"\
          ,\n    method=\"POST\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \        \"Content-Type\": 'application/json',  # (required) A header specifying\
          \ which type of content is in the request/response body.\n    },\n    data=json.dumps({\n\
          \        'entries': [{\n            'name': 'OnCall',\n            'alias':\
          \ 'Not on Sundays'\n        }]\n    }).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp POST \"$API_URL/domain-types/contact_group_config/actions/bulk-create/invoke\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    entries='[{'name':\
          \ 'OnCall', 'alias': 'Not on Sundays'}]' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request POST\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"entries\": [\n            {\n         \
          \     \"alias\": \"Not on Sundays\",\n              \"name\": \"OnCall\"\
          \n            }\n          ]\n        }' \\\n    \"$API_URL/domain-types/contact_group_config/actions/bulk-create/invoke\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/contact_group_config/actions/bulk-delete/invoke:
    post:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.users`: This permission is needed for the modules <b>Users</b>,\
        \ <b>Roles</b> and <b>Contact Groups</b>\n"
      operationId: cmk.gui.plugins.openapi.endpoints.contact_group_config.bulk_delete
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkDeleteContactGroup'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '204':
          content: {}
          description: 'No Content: Operation done successfully. No further output.'
      summary: Bulk delete contact groups
      tags:
      - Contact groups
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/domain-types/contact_group_config/actions/bulk-delete/invoke\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={'entries': ['windows', 'panels']},\n)\nif resp.status_code\
          \ == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code == 204:\n\
          \    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/contact_group_config/actions/bulk-delete/invoke\"\
          ,\n    method=\"POST\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \        \"Content-Type\": 'application/json',  # (required) A header specifying\
          \ which type of content is in the request/response body.\n    },\n    data=json.dumps({'entries':\
          \ ['windows', 'panels']}).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp POST \"$API_URL/domain-types/contact_group_config/actions/bulk-delete/invoke\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    entries='['windows',\
          \ 'panels']' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request POST\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"entries\": [\n            \"windows\",\n\
          \            \"panels\"\n          ]\n        }' \\\n    \"$API_URL/domain-types/contact_group_config/actions/bulk-delete/invoke\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/downtime/collections/all:
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * Optionally:\n\
        \   * Any of:\n     * `general.see_all`: See all objects regardless of contacts\
        \ and contact groups. If combined with 'perform commands' then commands may\
        \ be done on all objects.\n     * `bi.see_all`: With this permission set,\
        \ the BI aggregation rules are applied to all hosts and services - not only\
        \ those the user is a contact for. If you remove this permissions then the\
        \ user will see incomplete aggregation trees with status based only on those\
        \ items.\n     * `mkeventd.seeall`: If a user lacks this permission then he/she\
        \ can see only those events that originate from a host that he/she is a contact\
        \ for.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.downtime.show_downtimes
      parameters:
      - description: An query expression of the Livestatus 'downtimes' table in nested
          dictionary form. If you want to use multiple expressions, nest them with
          the AND/OR operators.
        in: query
        name: query
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/Expr'
          example: '{"op": "and", "expr": [{"op": "=", "left": "host_name", "right":
            "example.com"}, {"op": "=", "left": "type", "right": "0"}]}'
      - description: The service description. No exception is raised when the specified
          service description does not exist
        in: query
        name: service_description
        required: false
        schema:
          example: Memory
          type: string
      - description: The host name. No exception is raised when the specified host
          name does not exist
        in: query
        name: host_name
        required: false
        schema:
          example: example.com
          pattern: '[-0-9a-zA-Z_.]+'
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainObjectCollection'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Show all scheduled downtimes
      tags:
      - Downtimes
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/domain-types/downtime/collections/all\"\
          ,\n    params={  # goes into query string\n        \"host_name\": 'example.com',\
          \  # The host name.\n        \"service_description\": 'Memory',  # The service\
          \ description.\n        \"query\": '{\"op\": \"and\", \"expr\": [{\"op\"\
          : \"=\", \"left\": \"host_name\", \"right\": \"example.com\"}, {\"op\":\
          \ \"=\", \"left\": \"type\", \"right\": \"0\"}]}',  # An query expression\
          \ of the Livestatus 'downtimes' table in nested dictionary form.\n    },\n\
          )\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.parse\nimport\
          \ urllib.request\n\nHOST_NAME = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL\
          \ = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\n\nUSERNAME = \"\
          automation\"\nPASSWORD = \"test123\"\n\nquery_string = urllib.parse.urlencode({\n\
          \    \"host_name\": 'example.com',  # The host name.\n    \"service_description\"\
          : 'Memory',  # The service description.\n    \"query\": '{\"op\": \"and\"\
          , \"expr\": [{\"op\": \"=\", \"left\": \"host_name\", \"right\": \"example.com\"\
          }, {\"op\": \"=\", \"left\": \"type\", \"right\": \"0\"}]}',  # An query\
          \ expression of the Livestatus 'downtimes' table in nested dictionary form.\n\
          })\n\nrequest = urllib.request.Request(\n    f\"{API_URL}/domain-types/downtime/collections/all?{query_string}\"\
          ,\n    method=\"GET\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \    },\n)\nresponse = urllib.request.urlopen(request)\nif response.status\
          \ == 200:\n    pprint.pprint(json.loads(response.read()))\nelif response.status\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/domain-types/downtime/collections/all\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    host_name=='example.com' \\\n    service_description=='Memory'\
          \ \\\n    query=='{\"op\": \"and\", \"expr\": [{\"op\": \"=\", \"left\"\
          : \"host_name\", \"right\": \"example.com\"}, {\"op\": \"=\", \"left\":\
          \ \"type\", \"right\": \"0\"}]}' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    -G \\\n   \
          \ --request GET \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\\
          n\" \\\n    --header \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n\
          \    --header \"Accept: application/json\" \\\n    --data-urlencode 'host_name=example.com'\
          \ \\\n    --data-urlencode 'service_description=Memory' \\\n    --data-urlencode\
          \ 'query={\"op\": \"and\", \"expr\": [{\"op\": \"=\", \"left\": \"host_name\"\
          , \"right\": \"example.com\"}, {\"op\": \"=\", \"left\": \"type\", \"right\"\
          : \"0\"}]}' \\\n    \"$API_URL/domain-types/downtime/collections/all\")\n\
          \nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /objects/downtime/{downtime_id}:
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * Optionally:\n\
        \   * Any of:\n     * `general.see_all`: See all objects regardless of contacts\
        \ and contact groups. If combined with 'perform commands' then commands may\
        \ be done on all objects.\n     * `bi.see_all`: With this permission set,\
        \ the BI aggregation rules are applied to all hosts and services - not only\
        \ those the user is a contact for. If you remove this permissions then the\
        \ user will see incomplete aggregation trees with status based only on those\
        \ items.\n     * `mkeventd.seeall`: If a user lacks this permission then he/she\
        \ can see only those events that originate from a host that he/she is a contact\
        \ for.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.downtime.show_downtime
      parameters:
      - description: The id of the downtime
        in: path
        name: downtime_id
        required: true
        schema:
          example: '1'
          type: integer
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainObject'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Show downtime
      tags:
      - Downtimes
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/objects/downtime/1\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/downtime/1\",\n    method=\"GET\",\n    headers={\n\
          \        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\",\n       \
          \ \"Accept\": \"application/json\",\n    },\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/objects/downtime/1\" \\\n\
          \    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept: application/json\"\
          \ \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request GET\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/objects/downtime/1\")\n\nresp=$(\
          \ echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo \"${out}\"\
          \ | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation, please\
          \ install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"$resp\"\n\
          \nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n    echo\
          \ \"Request error\"\n    exit 1\nfi"
  /domain-types/downtime/collections/host:
    post:
      description: "\n\nThis endpoint requires the following permissions: \n * `action.downtimes`:\
        \ Schedule and remove downtimes on hosts and services\n"
      operationId: cmk.gui.plugins.openapi.endpoints.downtime.create_host_related_downtime
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHostRelatedDowntime'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '422':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unprocessable Entity: The request could not be processed.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '204':
          content: {}
          description: 'No Content: Operation done successfully. No further output.'
      summary: Create a host related scheduled downtime
      tags:
      - Downtimes
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/domain-types/downtime/collections/host\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    # This schema has multiple variations. Please refer to\n  \
          \  # the 'Payload' section for details.\n    json={\n        'start_time':\
          \ '2017-07-21T17:32:28Z',\n        'end_time': '2017-07-21T17:32:28Z',\n\
          \        'recur': 'hour',\n        'duration': 3600,\n        'comment':\
          \ 'Security updates',\n        'downtime_type': 'host',\n        'host_name':\
          \ 'example.com'\n    },\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\n\
          elif resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/downtime/collections/host\",\n    method=\"\
          POST\",\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME}\
          \ {PASSWORD}\",\n        \"Accept\": \"application/json\",\n        \"Content-Type\"\
          : 'application/json',  # (required) A header specifying which type of content\
          \ is in the request/response body.\n    },\n    # This schema has multiple\
          \ variations. Please refer to\n    # the 'Payload' section for details.\n\
          \    data=json.dumps({\n        'start_time': '2017-07-21T17:32:28Z',\n\
          \        'end_time': '2017-07-21T17:32:28Z',\n        'recur': 'hour',\n\
          \        'duration': 3600,\n        'comment': 'Security updates',\n   \
          \     'downtime_type': 'host',\n        'host_name': 'example.com'\n   \
          \ }).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\nif\
          \ response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\n# This schema has multiple variations. Please\
          \ refer to the\n# 'Payload' section for details.\nhttp POST \"$API_URL/domain-types/downtime/collections/host\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    start_time='2017-07-21T17:32:28Z'\
          \ \\\n    end_time='2017-07-21T17:32:28Z' \\\n    recur='hour' \\\n    duration='3600'\
          \ \\\n    comment='Security updates' \\\n    downtime_type='host' \\\n \
          \   host_name='example.com' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\n# This schema has multiple variations.\
          \ Please refer to the\n# 'Payload' section for details.\nout=$(\n  curl\
          \ \\\n    --request POST \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\\
          n\" \\\n    --header \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n\
          \    --header \"Accept: application/json\" \\\n    --header \"Content-Type:\
          \ application/json\" \\\n    --data '{\n          \"comment\": \"Security\
          \ updates\",\n          \"downtime_type\": \"host\",\n          \"duration\"\
          : 3600,\n          \"end_time\": \"2017-07-21T17:32:28Z\",\n          \"\
          host_name\": \"example.com\",\n          \"recur\": \"hour\",\n        \
          \  \"start_time\": \"2017-07-21T17:32:28Z\"\n        }' \\\n    \"$API_URL/domain-types/downtime/collections/host\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/downtime/collections/service:
    post:
      description: "\n\nThis endpoint requires the following permissions: \n * `action.downtimes`:\
        \ Schedule and remove downtimes on hosts and services\n"
      operationId: cmk.gui.plugins.openapi.endpoints.downtime.create_service_related_downtime
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateServiceRelatedDowntime'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '422':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unprocessable Entity: The request could not be processed.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '204':
          content: {}
          description: 'No Content: Operation done successfully. No further output.'
      summary: Create a service related scheduled downtime
      tags:
      - Downtimes
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/domain-types/downtime/collections/service\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    # This schema has multiple variations. Please refer to\n  \
          \  # the 'Payload' section for details.\n    json={\n        'start_time':\
          \ '2017-07-21T17:32:28Z',\n        'end_time': '2017-07-21T17:32:28Z',\n\
          \        'recur': 'hour',\n        'duration': 3600,\n        'comment':\
          \ 'Security updates',\n        'downtime_type': 'service',\n        'host_name':\
          \ 'example.com',\n        'service_descriptions': [\n            'CPU utilization',\
          \ 'Memory'\n        ]\n    },\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\n\
          elif resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/downtime/collections/service\",\n    method=\"\
          POST\",\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME}\
          \ {PASSWORD}\",\n        \"Accept\": \"application/json\",\n        \"Content-Type\"\
          : 'application/json',  # (required) A header specifying which type of content\
          \ is in the request/response body.\n    },\n    # This schema has multiple\
          \ variations. Please refer to\n    # the 'Payload' section for details.\n\
          \    data=json.dumps({\n        'start_time': '2017-07-21T17:32:28Z',\n\
          \        'end_time': '2017-07-21T17:32:28Z',\n        'recur': 'hour',\n\
          \        'duration': 3600,\n        'comment': 'Security updates',\n   \
          \     'downtime_type': 'service',\n        'host_name': 'example.com',\n\
          \        'service_descriptions': [\n            'CPU utilization', 'Memory'\n\
          \        ]\n    }).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\n# This schema has multiple variations. Please\
          \ refer to the\n# 'Payload' section for details.\nhttp POST \"$API_URL/domain-types/downtime/collections/service\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    start_time='2017-07-21T17:32:28Z'\
          \ \\\n    end_time='2017-07-21T17:32:28Z' \\\n    recur='hour' \\\n    duration='3600'\
          \ \\\n    comment='Security updates' \\\n    downtime_type='service' \\\n\
          \    host_name='example.com' \\\n    service_descriptions='['CPU utilization',\
          \ 'Memory']' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\n# This schema has multiple variations.\
          \ Please refer to the\n# 'Payload' section for details.\nout=$(\n  curl\
          \ \\\n    --request POST \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\\
          n\" \\\n    --header \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n\
          \    --header \"Accept: application/json\" \\\n    --header \"Content-Type:\
          \ application/json\" \\\n    --data '{\n          \"comment\": \"Security\
          \ updates\",\n          \"downtime_type\": \"service\",\n          \"duration\"\
          : 3600,\n          \"end_time\": \"2017-07-21T17:32:28Z\",\n          \"\
          host_name\": \"example.com\",\n          \"recur\": \"hour\",\n        \
          \  \"service_descriptions\": [\n            \"CPU utilization\",\n     \
          \       \"Memory\"\n          ],\n          \"start_time\": \"2017-07-21T17:32:28Z\"\
          \n        }' \\\n    \"$API_URL/domain-types/downtime/collections/service\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/downtime/actions/delete/invoke:
    post:
      description: "\n\nThis endpoint requires the following permissions: \n * `action.downtimes`:\
        \ Schedule and remove downtimes on hosts and services\n"
      operationId: cmk.gui.plugins.openapi.endpoints.downtime.delete_downtime
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteDowntime'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '204':
          content: {}
          description: 'No Content: Operation done successfully. No further output.'
      summary: Delete a scheduled downtime
      tags:
      - Downtimes
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/domain-types/downtime/actions/delete/invoke\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    # This schema has multiple variations. Please refer to\n  \
          \  # the 'Payload' section for details.\n    json={'delete_type': 'params',\
          \ 'downtime_id': '54'},\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\n\
          elif resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/downtime/actions/delete/invoke\",\n    method=\"\
          POST\",\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME}\
          \ {PASSWORD}\",\n        \"Accept\": \"application/json\",\n        \"Content-Type\"\
          : 'application/json',  # (required) A header specifying which type of content\
          \ is in the request/response body.\n    },\n    # This schema has multiple\
          \ variations. Please refer to\n    # the 'Payload' section for details.\n\
          \    data=json.dumps({'delete_type': 'params', 'downtime_id': '54'}).encode('utf-8'),\n\
          )\nresponse = urllib.request.urlopen(request)\nif response.status == 200:\n\
          \    pprint.pprint(json.loads(response.read()))\nelif response.status ==\
          \ 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\n# This schema has multiple variations. Please\
          \ refer to the\n# 'Payload' section for details.\nhttp POST \"$API_URL/domain-types/downtime/actions/delete/invoke\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    delete_type='params'\
          \ \\\n    downtime_id='54' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\n# This schema has multiple variations.\
          \ Please refer to the\n# 'Payload' section for details.\nout=$(\n  curl\
          \ \\\n    --request POST \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\\
          n\" \\\n    --header \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n\
          \    --header \"Accept: application/json\" \\\n    --header \"Content-Type:\
          \ application/json\" \\\n    --data '{\n          \"delete_type\": \"params\"\
          ,\n          \"downtime_id\": \"54\"\n        }' \\\n    \"$API_URL/domain-types/downtime/actions/delete/invoke\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /objects/folder_config/{folder}/collections/hosts:
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * Optionally:\n\
        \   * `wato.see_all_folders`: Users without this permissions can only see\
        \ folders with a contact group they are in.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.folder_config.hosts_of_folder
      parameters:
      - description: 'The path of the folder being requested. Please be aware that
          slashes can''t be used in the URL. Also, escaping the slashes via %2f will
          not work. Please replace the path delimiters with the tilde character `~`.


          Path delimiters can be either `~`, `/` or `\`. Please use the one most appropriate
          for your quoting/escaping needs. A good default choice is `~`.'
        in: path
        name: folder
        required: true
        schema:
          example: ~my~fine~folder
          pattern: (?:(?:[~\\\/]|(?:[~\\\/][-_ a-zA-Z0-9.]+)+[~\\\/]?)|[0-9a-fA-F]{32})
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostConfigCollection'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Show all hosts in a folder
      tags:
      - Folders
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/objects/folder_config/~my~fine~folder/collections/hosts\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/folder_config/~my~fine~folder/collections/hosts\"\
          ,\n    method=\"GET\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \    },\n)\nresponse = urllib.request.urlopen(request)\nif response.status\
          \ == 200:\n    pprint.pprint(json.loads(response.read()))\nelif response.status\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/objects/folder_config/~my~fine~folder/collections/hosts\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request GET\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/objects/folder_config/~my~fine~folder/collections/hosts\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/folder_config/collections/all:
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * Optionally:\n\
        \   * `wato.see_all_folders`: Users without this permissions can only see\
        \ folders with a contact group they are in.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.folder_config.list_folders
      parameters:
      - description: 'Show all sub-folders of this folder. The default is the root-folder.


          Path delimiters can be either `~`, `/` or `\`. Please use the one most appropriate
          for your quoting/escaping needs. A good default choice is `~`.'
        in: query
        name: parent
        required: false
        schema:
          example: /servers
          pattern: (?:(?:[~\\\/]|(?:[~\\\/][-_ a-zA-Z0-9.]+)+[~\\\/]?)|[0-9a-fA-F]{32})
          type: string
      - description: 'List the folder (default: root) and all its sub-folders recursively.'
        in: query
        name: recursive
        required: false
        schema:
          default: false
          example: false
          type: boolean
      - description: When set, all hosts that are stored in each folder will also
          be shown. On large setups this may come at a performance cost, so by default
          this is switched off.
        in: query
        name: show_hosts
        required: false
        schema:
          default: false
          example: false
          type: boolean
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderCollection'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Show all folders
      tags:
      - Folders
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/domain-types/folder_config/collections/all\"\
          ,\n    params={  # goes into query string\n        \"parent\": '/servers',\
          \  # Show all sub-folders of this folder.\n        \"recursive\": False,\
          \  # List the folder (default: root) and all its sub-folders recursively.\n\
          \        \"show_hosts\": False,  # When set, all hosts that are stored in\
          \ each folder will also be shown.\n    },\n)\nif resp.status_code == 200:\n\
          \    pprint.pprint(resp.json())\nelif resp.status_code == 204:\n    print(\"\
          Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.parse\nimport\
          \ urllib.request\n\nHOST_NAME = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL\
          \ = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\n\nUSERNAME = \"\
          automation\"\nPASSWORD = \"test123\"\n\nquery_string = urllib.parse.urlencode({\n\
          \    \"parent\": '/servers',  # Show all sub-folders of this folder.\n \
          \   \"recursive\": False,  # List the folder (default: root) and all its\
          \ sub-folders recursively.\n    \"show_hosts\": False,  # When set, all\
          \ hosts that are stored in each folder will also be shown.\n})\n\nrequest\
          \ = urllib.request.Request(\n    f\"{API_URL}/domain-types/folder_config/collections/all?{query_string}\"\
          ,\n    method=\"GET\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \    },\n)\nresponse = urllib.request.urlopen(request)\nif response.status\
          \ == 200:\n    pprint.pprint(json.loads(response.read()))\nelif response.status\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/domain-types/folder_config/collections/all\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    parent=='/servers' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    -G \\\n   \
          \ --request GET \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\\
          n\" \\\n    --header \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n\
          \    --header \"Accept: application/json\" \\\n    --data-urlencode 'parent=/servers'\
          \ \\\n    \"$API_URL/domain-types/folder_config/collections/all\")\n\nresp=$(\
          \ echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo \"${out}\"\
          \ | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation, please\
          \ install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"$resp\"\n\
          \nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n    echo\
          \ \"Request error\"\n    exit 1\nfi"
    post:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.manage_folders`: Add new folders and delete existing folders.\
        \ If a folder to be deleted contains hosts then the permission to delete hosts\
        \ is also required.\n   * Optionally:\n     * `wato.all_folders`: Without\
        \ this permission, operations on folders can only be done by users that are\
        \ members of one of the folders contact groups. This permission grants full\
        \ access to all folders and hosts.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.folder_config.create
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFolder'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
            ETag:
              allowEmptyValue: false
              description: The HTTP ETag header for this resource. It identifies the
                current state of the object and needs to be sent along in the "If-Match"
                request-header for subsequent modifications. Please note that the
                actual ETag returned by some endpoints may look different than the
                one shown in this example.
              example: '"a20ceacf346041dc"'
              required: false
              schema:
                type: string
      summary: Create a folder
      tags:
      - Folders
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/domain-types/folder_config/collections/all\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={\n        'name': 'production',\n        'title': 'Production\
          \ Hosts',\n        'parent': '/',\n        'attributes': {\n           \
          \ 'tag_criticality': 'prod'\n        }\n    },\n)\nif resp.status_code ==\
          \ 200:\n    pprint.pprint(resp.json())\nelif resp.status_code == 204:\n\
          \    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/folder_config/collections/all\",\n    method=\"\
          POST\",\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME}\
          \ {PASSWORD}\",\n        \"Accept\": \"application/json\",\n        \"Content-Type\"\
          : 'application/json',  # (required) A header specifying which type of content\
          \ is in the request/response body.\n    },\n    data=json.dumps({\n    \
          \    'name': 'production',\n        'title': 'Production Hosts',\n     \
          \   'parent': '/',\n        'attributes': {\n            'tag_criticality':\
          \ 'prod'\n        }\n    }).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp POST \"$API_URL/domain-types/folder_config/collections/all\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    name='production'\
          \ \\\n    title='Production Hosts' \\\n    parent='/' \\\n    attributes='{'tag_criticality':\
          \ 'prod'}' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request POST\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"attributes\": {\n            \"tag_criticality\"\
          : \"prod\"\n          },\n          \"name\": \"production\",\n        \
          \  \"parent\": \"/\",\n          \"title\": \"Production Hosts\"\n     \
          \   }' \\\n    \"$API_URL/domain-types/folder_config/collections/all\")\n\
          \nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /objects/folder_config/{folder}:
    delete:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.manage_folders`: Add new folders and delete existing folders.\
        \ If a folder to be deleted contains hosts then the permission to delete hosts\
        \ is also required.\n   * Optionally:\n     * `wato.all_folders`: Without\
        \ this permission, operations on folders can only be done by users that are\
        \ members of one of the folders contact groups. This permission grants full\
        \ access to all folders and hosts.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.folder_config.delete
      parameters:
      - description: 'The path of the folder being requested. Please be aware that
          slashes can''t be used in the URL. Also, escaping the slashes via %2f will
          not work. Please replace the path delimiters with the tilde character `~`.


          Path delimiters can be either `~`, `/` or `\`. Please use the one most appropriate
          for your quoting/escaping needs. A good default choice is `~`.'
        in: path
        name: folder
        required: true
        schema:
          example: ~my~fine~folder
          pattern: (?:(?:[~\\\/]|(?:[~\\\/][-_ a-zA-Z0-9.]+)+[~\\\/]?)|[0-9a-fA-F]{32})
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '204':
          content: {}
          description: 'No Content: Operation done successfully. No further output.'
      summary: Delete a folder
      tags:
      - Folders
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.delete(\n    f\"{API_URL}/objects/folder_config/~my~fine~folder\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/folder_config/~my~fine~folder\",\n    method=\"\
          DELETE\",\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME}\
          \ {PASSWORD}\",\n        \"Accept\": \"application/json\",\n    },\n)\n\
          response = urllib.request.urlopen(request)\nif response.status == 200:\n\
          \    pprint.pprint(json.loads(response.read()))\nelif response.status ==\
          \ 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp DELETE \"$API_URL/objects/folder_config/~my~fine~folder\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request DELETE\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/objects/folder_config/~my~fine~folder\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * Optionally:\n\
        \   * `wato.see_all_folders`: Users without this permissions can only see\
        \ folders with a contact group they are in.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.folder_config.show_folder
      parameters:
      - description: When set, all hosts that are stored in this folder will also
          be shown. On large setups this may come at a performance cost, so by default
          this is switched off.
        in: query
        name: show_hosts
        required: false
        schema:
          default: false
          example: false
          type: boolean
      - description: 'The path of the folder being requested. Please be aware that
          slashes can''t be used in the URL. Also, escaping the slashes via %2f will
          not work. Please replace the path delimiters with the tilde character `~`.


          Path delimiters can be either `~`, `/` or `\`. Please use the one most appropriate
          for your quoting/escaping needs. A good default choice is `~`.'
        in: path
        name: folder
        required: true
        schema:
          example: ~my~fine~folder
          pattern: (?:(?:[~\\\/]|(?:[~\\\/][-_ a-zA-Z0-9.]+)+[~\\\/]?)|[0-9a-fA-F]{32})
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
            ETag:
              allowEmptyValue: false
              description: The HTTP ETag header for this resource. It identifies the
                current state of the object and needs to be sent along in the "If-Match"
                request-header for subsequent modifications. Please note that the
                actual ETag returned by some endpoints may look different than the
                one shown in this example.
              example: '"a20ceacf346041dc"'
              required: false
              schema:
                type: string
      summary: Show a folder
      tags:
      - Folders
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/objects/folder_config/~my~fine~folder\"\
          ,\n    params={  # goes into query string\n        \"show_hosts\": False,\
          \  # When set, all hosts that are stored in this folder will also be shown.\n\
          \    },\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\n\
          elif resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.parse\nimport\
          \ urllib.request\n\nHOST_NAME = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL\
          \ = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\n\nUSERNAME = \"\
          automation\"\nPASSWORD = \"test123\"\n\nquery_string = urllib.parse.urlencode({\n\
          \    \"show_hosts\": False,  # When set, all hosts that are stored in this\
          \ folder will also be shown.\n})\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/folder_config/~my~fine~folder?{query_string}\"\
          ,\n    method=\"GET\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \    },\n)\nresponse = urllib.request.urlopen(request)\nif response.status\
          \ == 200:\n    pprint.pprint(json.loads(response.read()))\nelif response.status\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/objects/folder_config/~my~fine~folder\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    -G \\\n   \
          \ --request GET \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\\
          n\" \\\n    --header \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n\
          \    --header \"Accept: application/json\" \\\n    \"$API_URL/objects/folder_config/~my~fine~folder\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
    put:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit_folders`: Modify the properties of existing folders.\n\
        \   * Optionally:\n     * `wato.all_folders`: Without this permission, operations\
        \ on folders can only be done by users that are members of one of the folders\
        \ contact groups. This permission grants full access to all folders and hosts.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.folder_config.update
      parameters:
      - description: The value of the, to be modified, object's ETag header. You can
          get this value by displaying the object it individually. To update this
          object the currently stored ETag needs to be the same as the one sent. The
          content of the ETag can potentially be anything and should be treated as
          semantically opaque.
        in: header
        name: If-Match
        required: true
        schema:
          example: '"a20ceacf346041dc"'
          type: string
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      - description: 'The path of the folder being requested. Please be aware that
          slashes can''t be used in the URL. Also, escaping the slashes via %2f will
          not work. Please replace the path delimiters with the tilde character `~`.


          Path delimiters can be either `~`, `/` or `\`. Please use the one most appropriate
          for your quoting/escaping needs. A good default choice is `~`.'
        in: path
        name: folder
        required: true
        schema:
          example: ~my~fine~folder
          pattern: (?:(?:[~\\\/]|(?:[~\\\/][-_ a-zA-Z0-9.]+)+[~\\\/]?)|[0-9a-fA-F]{32})
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFolder'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
            ETag:
              allowEmptyValue: false
              description: The HTTP ETag header for this resource. It identifies the
                current state of the object and needs to be sent along in the "If-Match"
                request-header for subsequent modifications. Please note that the
                actual ETag returned by some endpoints may look different than the
                one shown in this example.
              example: '"a20ceacf346041dc"'
              required: false
              schema:
                type: string
        '412':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Precondition Failed: The value of the If-Match header doesn''t
            match the object''s ETag.'
        '428':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Precondition Required: The required If-Match header is missing.'
      summary: Update a folder
      tags:
      - Folders
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.put(\n    f\"{API_URL}/objects/folder_config/~my~fine~folder\"\
          ,\n    headers={\n        \"If-Match\": '\"a20ceacf346041dc\"',  # (required)\
          \ The value of the, to be modified, object's ETag header.\n        \"Content-Type\"\
          : 'application/json',  # (required) A header specifying which type of content\
          \ is in the request/response body.\n    },\n    json={\n        'title':\
          \ 'Virtual Servers.',\n        'attributes': {\n            'networking':\
          \ 'wan'\n        },\n        'update_attributes': {\n            'tag_criticality':\
          \ 'prod'\n        },\n        'remove_attributes': ['tag_foobar']\n    },\n\
          )\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/folder_config/~my~fine~folder\",\n    method=\"\
          PUT\",\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n        \"If-Match\": '\"\
          a20ceacf346041dc\"',  # (required) The value of the, to be modified, object's\
          \ ETag header.\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    data=json.dumps({\n        'title': 'Virtual Servers.',\n \
          \       'attributes': {\n            'networking': 'wan'\n        },\n \
          \       'update_attributes': {\n            'tag_criticality': 'prod'\n\
          \        },\n        'remove_attributes': ['tag_foobar']\n    }).encode('utf-8'),\n\
          )\nresponse = urllib.request.urlopen(request)\nif response.status == 200:\n\
          \    pprint.pprint(json.loads(response.read()))\nelif response.status ==\
          \ 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp PUT \"$API_URL/objects/folder_config/~my~fine~folder\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'If-Match:\"a20ceacf346041dc\"' \\\n    'Content-Type:application/json'\
          \ \\\n    title='Virtual Servers.' \\\n    attributes='{'networking': 'wan'}'\
          \ \\\n    update_attributes='{'tag_criticality': 'prod'}' \\\n    remove_attributes='['tag_foobar']'\
          \ \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request PUT\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"If-Match: \"a20ceacf346041dc\"\"\
          \ \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\n\
          \          \"attributes\": {\n            \"networking\": \"wan\"\n    \
          \      },\n          \"remove_attributes\": [\n            \"tag_foobar\"\
          \n          ],\n          \"title\": \"Virtual Servers.\",\n          \"\
          update_attributes\": {\n            \"tag_criticality\": \"prod\"\n    \
          \      }\n        }' \\\n    \"$API_URL/objects/folder_config/~my~fine~folder\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/folder_config/actions/bulk-update/invoke:
    put:
      description: "Please be aware that when doing bulk updates, it is not possible\
        \ to prevent the\n[Updating Values](\"lost update problem\"), which is normally\
        \ prevented by the ETag locking\nmechanism. Use at your own riskThis endpoint\
        \ requires the following permissions: \n * All of:\n   * `wato.edit_folders`:\
        \ Modify the properties of existing folders.\n   * Optionally:\n     * `wato.all_folders`:\
        \ Without this permission, operations on folders can only be done by users\
        \ that are members of one of the folders contact groups. This permission grants\
        \ full access to all folders and hosts.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.folder_config.bulk_update
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkUpdateFolder'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderCollection'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Bulk update folders
      tags:
      - Folders
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.put(\n    f\"{API_URL}/domain-types/folder_config/actions/bulk-update/invoke\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={\n        'entries': [{\n            'remove_attributes':\
          \ ['tag_foobar']\n        }]\n    },\n)\nif resp.status_code == 200:\n \
          \   pprint.pprint(resp.json())\nelif resp.status_code == 204:\n    print(\"\
          Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/folder_config/actions/bulk-update/invoke\"\
          ,\n    method=\"PUT\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \        \"Content-Type\": 'application/json',  # (required) A header specifying\
          \ which type of content is in the request/response body.\n    },\n    data=json.dumps({\n\
          \        'entries': [{\n            'remove_attributes': ['tag_foobar']\n\
          \        }]\n    }).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp PUT \"$API_URL/domain-types/folder_config/actions/bulk-update/invoke\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    entries='[{'remove_attributes':\
          \ ['tag_foobar']}]' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request PUT\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"entries\": [\n            {\n         \
          \     \"remove_attributes\": [\n                \"tag_foobar\"\n       \
          \       ]\n            }\n          ]\n        }' \\\n    \"$API_URL/domain-types/folder_config/actions/bulk-update/invoke\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /objects/folder_config/{folder}/actions/move/invoke:
    post:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.manage_folders`: Add new folders and delete existing folders.\
        \ If a folder to be deleted contains hosts then the permission to delete hosts\
        \ is also required.\n   * Optionally:\n     * `wato.all_folders`: Without\
        \ this permission, operations on folders can only be done by users that are\
        \ members of one of the folders contact groups. This permission grants full\
        \ access to all folders and hosts.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.folder_config.move
      parameters:
      - description: The value of the, to be modified, object's ETag header. You can
          get this value by displaying the object it individually. To update this
          object the currently stored ETag needs to be the same as the one sent. The
          content of the ETag can potentially be anything and should be treated as
          semantically opaque.
        in: header
        name: If-Match
        required: true
        schema:
          example: '"a20ceacf346041dc"'
          type: string
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      - description: 'The path of the folder being requested. Please be aware that
          slashes can''t be used in the URL. Also, escaping the slashes via %2f will
          not work. Please replace the path delimiters with the tilde character `~`.


          Path delimiters can be either `~`, `/` or `\`. Please use the one most appropriate
          for your quoting/escaping needs. A good default choice is `~`.'
        in: path
        name: folder
        required: true
        schema:
          example: ~my~fine~folder
          pattern: (?:(?:[~\\\/]|(?:[~\\\/][-_ a-zA-Z0-9.]+)+[~\\\/]?)|[0-9a-fA-F]{32})
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveFolder'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
            ETag:
              allowEmptyValue: false
              description: The HTTP ETag header for this resource. It identifies the
                current state of the object and needs to be sent along in the "If-Match"
                request-header for subsequent modifications. Please note that the
                actual ETag returned by some endpoints may look different than the
                one shown in this example.
              example: '"a20ceacf346041dc"'
              required: false
              schema:
                type: string
        '412':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Precondition Failed: The value of the If-Match header doesn''t
            match the object''s ETag.'
        '428':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Precondition Required: The required If-Match header is missing.'
      summary: Move a folder
      tags:
      - Folders
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/objects/folder_config/~my~fine~folder/actions/move/invoke\"\
          ,\n    headers={\n        \"If-Match\": '\"a20ceacf346041dc\"',  # (required)\
          \ The value of the, to be modified, object's ETag header.\n        \"Content-Type\"\
          : 'application/json',  # (required) A header specifying which type of content\
          \ is in the request/response body.\n    },\n    json={'destination': '%2Fmy%2Ffine%2Ffolder'},\n\
          )\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/folder_config/~my~fine~folder/actions/move/invoke\"\
          ,\n    method=\"POST\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \        \"If-Match\": '\"a20ceacf346041dc\"',  # (required) The value of\
          \ the, to be modified, object's ETag header.\n        \"Content-Type\":\
          \ 'application/json',  # (required) A header specifying which type of content\
          \ is in the request/response body.\n    },\n    data=json.dumps({'destination':\
          \ '%2Fmy%2Ffine%2Ffolder'}).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp POST \"$API_URL/objects/folder_config/~my~fine~folder/actions/move/invoke\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'If-Match:\"a20ceacf346041dc\"' \\\n    'Content-Type:application/json'\
          \ \\\n    destination='%2Fmy%2Ffine%2Ffolder' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request POST\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"If-Match: \"a20ceacf346041dc\"\"\
          \ \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\n\
          \          \"destination\": \"%2Fmy%2Ffine%2Ffolder\"\n        }' \\\n \
          \   \"$API_URL/objects/folder_config/~my~fine~folder/actions/move/invoke\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/host/collections/all:
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * Optionally:\n\
        \   * Any of:\n     * `general.see_all`: See all objects regardless of contacts\
        \ and contact groups. If combined with 'perform commands' then commands may\
        \ be done on all objects.\n     * `bi.see_all`: With this permission set,\
        \ the BI aggregation rules are applied to all hosts and services - not only\
        \ those the user is a contact for. If you remove this permissions then the\
        \ user will see incomplete aggregation trees with status based only on those\
        \ items.\n     * `mkeventd.seeall`: If a user lacks this permission then he/she\
        \ can see only those events that originate from a host that he/she is a contact\
        \ for.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.host.list_hosts
      parameters:
      - description: Restrict the query to this particular site.
        explode: true
        in: query
        name: sites
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      - description: An query expression of the Livestatus 'hosts' table in nested
          dictionary form. If you want to use multiple expressions, nest them with
          the AND/OR operators.
        in: query
        name: query
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/Expr'
          example: '{"op": "and", "expr": [{"op": "=", "left": "name", "right": "example.com"},
            {"op": "!=", "left": "state", "right": "0"}]}'
      - description: The desired columns of the `hosts` table. If left empty, a default
          set of columns is used.
        explode: true
        in: query
        name: columns
        required: false
        schema:
          default:
          - name
          example:
          - name
          items:
            type: string
          type: array
        style: form
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainObjectCollection'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Show hosts of specific condition
      tags:
      - Host status
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/domain-types/host/collections/all\"\
          ,\n    params={  # goes into query string\n        \"query\": '{\"op\":\
          \ \"and\", \"expr\": [{\"op\": \"=\", \"left\": \"name\", \"right\": \"\
          example.com\"}, {\"op\": \"!=\", \"left\": \"state\", \"right\": \"0\"}]}',\
          \  # An query expression of the Livestatus 'hosts' table in nested dictionary\
          \ form.\n        \"columns\": ['name'],  # The desired columns of the `hosts`\
          \ table.\n    },\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\n\
          elif resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.parse\nimport\
          \ urllib.request\n\nHOST_NAME = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL\
          \ = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\n\nUSERNAME = \"\
          automation\"\nPASSWORD = \"test123\"\n\nquery_string = urllib.parse.urlencode({\n\
          \    \"query\": '{\"op\": \"and\", \"expr\": [{\"op\": \"=\", \"left\":\
          \ \"name\", \"right\": \"example.com\"}, {\"op\": \"!=\", \"left\": \"state\"\
          , \"right\": \"0\"}]}',  # An query expression of the Livestatus 'hosts'\
          \ table in nested dictionary form.\n    \"columns\": ['name'],  # The desired\
          \ columns of the `hosts` table.\n})\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/host/collections/all?{query_string}\",\n\
          \    method=\"GET\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \    },\n)\nresponse = urllib.request.urlopen(request)\nif response.status\
          \ == 200:\n    pprint.pprint(json.loads(response.read()))\nelif response.status\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/domain-types/host/collections/all\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    query=='{\"op\": \"and\", \"expr\": [{\"op\"\
          : \"=\", \"left\": \"name\", \"right\": \"example.com\"}, {\"op\": \"!=\"\
          , \"left\": \"state\", \"right\": \"0\"}]}' \\\n    columns=='['name']'\
          \ \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    -G \\\n   \
          \ --request GET \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\\
          n\" \\\n    --header \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n\
          \    --header \"Accept: application/json\" \\\n    --data-urlencode 'query={\"\
          op\": \"and\", \"expr\": [{\"op\": \"=\", \"left\": \"name\", \"right\"\
          : \"example.com\"}, {\"op\": \"!=\", \"left\": \"state\", \"right\": \"\
          0\"}]}' \\\n    --data-urlencode 'columns=name' \\\n    \"$API_URL/domain-types/host/collections/all\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/host_config/collections/all:
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * Optionally:\n\
        \   * `wato.see_all_folders`: Users without this permissions can only see\
        \ folders with a contact group they are in.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.host_config.list_hosts
      parameters:
      - description: Show all effective attributes on hosts, not just the attributes
          which were set on this host specifically. This includes all attributes of
          all of this host's parent folders.
        in: query
        name: effective_attributes
        required: false
        schema:
          default: false
          example: false
          type: boolean
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostConfigCollection'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Show all hosts
      tags:
      - Hosts
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/domain-types/host_config/collections/all\"\
          ,\n    params={  # goes into query string\n        \"effective_attributes\"\
          : False,  # Show all effective attributes on hosts, not just the attributes\
          \ which were set on this host specifically.\n    },\n)\nif resp.status_code\
          \ == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code == 204:\n\
          \    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.parse\nimport\
          \ urllib.request\n\nHOST_NAME = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL\
          \ = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\n\nUSERNAME = \"\
          automation\"\nPASSWORD = \"test123\"\n\nquery_string = urllib.parse.urlencode({\n\
          \    \"effective_attributes\": False,  # Show all effective attributes on\
          \ hosts, not just the attributes which were set on this host specifically.\n\
          })\n\nrequest = urllib.request.Request(\n    f\"{API_URL}/domain-types/host_config/collections/all?{query_string}\"\
          ,\n    method=\"GET\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \    },\n)\nresponse = urllib.request.urlopen(request)\nif response.status\
          \ == 200:\n    pprint.pprint(json.loads(response.read()))\nelif response.status\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/domain-types/host_config/collections/all\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    -G \\\n   \
          \ --request GET \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\\
          n\" \\\n    --header \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n\
          \    --header \"Accept: application/json\" \\\n    \"$API_URL/domain-types/host_config/collections/all\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
    post:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.manage_hosts`: Add hosts to the monitoring and remove hosts\
        \ from the monitoring. Please also add the permission <i>Modify existing hosts</i>.\n\
        \   * Optionally:\n     * `wato.all_folders`: Without this permission, operations\
        \ on folders can only be done by users that are members of one of the folders\
        \ contact groups. This permission grants full access to all folders and hosts.\n\
        \   * Optionally:\n     * Any of:\n       * `bi.see_all`: With this permission\
        \ set, the BI aggregation rules are applied to all hosts and services - not\
        \ only those the user is a contact for. If you remove this permissions then\
        \ the user will see incomplete aggregation trees with status based only on\
        \ those items.\n       * `general.see_all`: See all objects regardless of\
        \ contacts and contact groups. If combined with 'perform commands' then commands\
        \ may be done on all objects.\n       * `mkeventd.seeall`: If a user lacks\
        \ this permission then he/she can see only those events that originate from\
        \ a host that he/she is a contact for.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.host_config.create_host
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      - description: Tries to bake the agents for the just created hosts. This process
          is started in the background after configuring the host. Please note that
          the backing may take some time and might block subsequent API calls. This
          only works when using the Enterprise Editions.
        in: query
        name: bake_agent
        required: false
        schema:
          default: false
          example: false
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHost'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostConfig'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
            ETag:
              allowEmptyValue: false
              description: The HTTP ETag header for this resource. It identifies the
                current state of the object and needs to be sent along in the "If-Match"
                request-header for subsequent modifications. Please note that the
                actual ETag returned by some endpoints may look different than the
                one shown in this example.
              example: '"a20ceacf346041dc"'
              required: false
              schema:
                type: string
      summary: Create a host
      tags:
      - Hosts
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/domain-types/host_config/collections/all\"\
          ,\n    params={  # goes into query string\n        \"bake_agent\": False,\
          \  # Tries to bake the agents for the just created hosts.\n    },\n    headers={\n\
          \        \"Content-Type\": 'application/json',  # (required) A header specifying\
          \ which type of content is in the request/response body.\n    },\n    json={\n\
          \        'folder': '/',\n        'host_name': 'example.com',\n        'attributes':\
          \ {\n            'ipaddress': '192.168.0.123'\n        }\n    },\n)\nif\
          \ resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.parse\nimport\
          \ urllib.request\n\nHOST_NAME = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL\
          \ = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\n\nUSERNAME = \"\
          automation\"\nPASSWORD = \"test123\"\n\nquery_string = urllib.parse.urlencode({\n\
          \    \"bake_agent\": False,  # Tries to bake the agents for the just created\
          \ hosts.\n})\n\nrequest = urllib.request.Request(\n    f\"{API_URL}/domain-types/host_config/collections/all?{query_string}\"\
          ,\n    method=\"POST\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \        \"Content-Type\": 'application/json',  # (required) A header specifying\
          \ which type of content is in the request/response body.\n    },\n    data=json.dumps({\n\
          \        'folder': '/',\n        'host_name': 'example.com',\n        'attributes':\
          \ {\n            'ipaddress': '192.168.0.123'\n        }\n    }).encode('utf-8'),\n\
          )\nresponse = urllib.request.urlopen(request)\nif response.status == 200:\n\
          \    pprint.pprint(json.loads(response.read()))\nelif response.status ==\
          \ 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp POST \"$API_URL/domain-types/host_config/collections/all\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    folder='/'\
          \ \\\n    host_name='example.com' \\\n    attributes='{'ipaddress': '192.168.0.123'}'\
          \ \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    -G \\\n   \
          \ --request POST \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\\
          n\" \\\n    --header \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n\
          \    --header \"Accept: application/json\" \\\n    --header \"Content-Type:\
          \ application/json\" \\\n    --data '{\n          \"attributes\": {\n  \
          \          \"ipaddress\": \"192.168.0.123\"\n          },\n          \"\
          folder\": \"/\",\n          \"host_name\": \"example.com\"\n        }' \\\
          \n    \"$API_URL/domain-types/host_config/collections/all\")\n\nresp=$(\
          \ echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo \"${out}\"\
          \ | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation, please\
          \ install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"$resp\"\n\
          \nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n    echo\
          \ \"Request error\"\n    exit 1\nfi"
  /objects/host_config/{host_name}:
    delete:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.manage_hosts`: Add hosts to the monitoring and remove hosts\
        \ from the monitoring. Please also add the permission <i>Modify existing hosts</i>.\n\
        \   * Optionally:\n     * `wato.all_folders`: Without this permission, operations\
        \ on folders can only be done by users that are members of one of the folders\
        \ contact groups. This permission grants full access to all folders and hosts.\n\
        \   * Optionally:\n     * Any of:\n       * `bi.see_all`: With this permission\
        \ set, the BI aggregation rules are applied to all hosts and services - not\
        \ only those the user is a contact for. If you remove this permissions then\
        \ the user will see incomplete aggregation trees with status based only on\
        \ those items.\n       * `general.see_all`: See all objects regardless of\
        \ contacts and contact groups. If combined with 'perform commands' then commands\
        \ may be done on all objects.\n       * `mkeventd.seeall`: If a user lacks\
        \ this permission then he/she can see only those events that originate from\
        \ a host that he/she is a contact for.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.host_config.delete
      parameters:
      - description: A hostname.
        in: path
        name: host_name
        required: true
        schema:
          example: example.com
          pattern: '[-0-9a-zA-Z_.]+'
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '204':
          content: {}
          description: 'No Content: Operation done successfully. No further output.'
      summary: Delete a host
      tags:
      - Hosts
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.delete(\n    f\"{API_URL}/objects/host_config/example.com\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/host_config/example.com\",\n    method=\"DELETE\"\
          ,\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n    },\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp DELETE \"$API_URL/objects/host_config/example.com\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request DELETE\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/objects/host_config/example.com\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * Optionally:\n\
        \   * `wato.see_all_folders`: Users without this permissions can only see\
        \ folders with a contact group they are in.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.host_config.show_host
      parameters:
      - description: Show all effective attributes on hosts, not just the attributes
          which were set on this host specifically. This includes all attributes of
          all of this host's parent folders.
        in: query
        name: effective_attributes
        required: false
        schema:
          default: false
          example: false
          type: boolean
      - description: A hostname.
        in: path
        name: host_name
        required: true
        schema:
          example: example.com
          pattern: '[-0-9a-zA-Z_.]+'
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostConfig'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
            ETag:
              allowEmptyValue: false
              description: The HTTP ETag header for this resource. It identifies the
                current state of the object and needs to be sent along in the "If-Match"
                request-header for subsequent modifications. Please note that the
                actual ETag returned by some endpoints may look different than the
                one shown in this example.
              example: '"a20ceacf346041dc"'
              required: false
              schema:
                type: string
      summary: Show a host
      tags:
      - Hosts
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/objects/host_config/example.com\"\
          ,\n    params={  # goes into query string\n        \"effective_attributes\"\
          : False,  # Show all effective attributes on hosts, not just the attributes\
          \ which were set on this host specifically.\n    },\n)\nif resp.status_code\
          \ == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code == 204:\n\
          \    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.parse\nimport\
          \ urllib.request\n\nHOST_NAME = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL\
          \ = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\n\nUSERNAME = \"\
          automation\"\nPASSWORD = \"test123\"\n\nquery_string = urllib.parse.urlencode({\n\
          \    \"effective_attributes\": False,  # Show all effective attributes on\
          \ hosts, not just the attributes which were set on this host specifically.\n\
          })\n\nrequest = urllib.request.Request(\n    f\"{API_URL}/objects/host_config/example.com?{query_string}\"\
          ,\n    method=\"GET\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \    },\n)\nresponse = urllib.request.urlopen(request)\nif response.status\
          \ == 200:\n    pprint.pprint(json.loads(response.read()))\nelif response.status\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/objects/host_config/example.com\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    -G \\\n   \
          \ --request GET \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\\
          n\" \\\n    --header \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n\
          \    --header \"Accept: application/json\" \\\n    \"$API_URL/objects/host_config/example.com\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
    put:
      description: "\n\nThis endpoint requires the following permissions: \n * `wato.all_folders`:\
        \ Without this permission, operations on folders can only be done by users\
        \ that are members of one of the folders contact groups. This permission grants\
        \ full access to all folders and hosts.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.host_config.update_host
      parameters:
      - description: The value of the, to be modified, object's ETag header. You can
          get this value by displaying the object it individually. To update this
          object the currently stored ETag needs to be the same as the one sent. The
          content of the ETag can potentially be anything and should be treated as
          semantically opaque.
        in: header
        name: If-Match
        required: true
        schema:
          example: '"a20ceacf346041dc"'
          type: string
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      - description: A hostname.
        in: path
        name: host_name
        required: true
        schema:
          example: example.com
          pattern: '[-0-9a-zA-Z_.]+'
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateHost'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostConfig'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
            ETag:
              allowEmptyValue: false
              description: The HTTP ETag header for this resource. It identifies the
                current state of the object and needs to be sent along in the "If-Match"
                request-header for subsequent modifications. Please note that the
                actual ETag returned by some endpoints may look different than the
                one shown in this example.
              example: '"a20ceacf346041dc"'
              required: false
              schema:
                type: string
        '412':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Precondition Failed: The value of the If-Match header doesn''t
            match the object''s ETag.'
        '428':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Precondition Required: The required If-Match header is missing.'
      summary: Update a host
      tags:
      - Hosts
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.put(\n    f\"{API_URL}/objects/host_config/example.com\"\
          ,\n    headers={\n        \"If-Match\": '\"a20ceacf346041dc\"',  # (required)\
          \ The value of the, to be modified, object's ETag header.\n        \"Content-Type\"\
          : 'application/json',  # (required) A header specifying which type of content\
          \ is in the request/response body.\n    },\n    json={\n        'attributes':\
          \ {\n            'ipaddress': '192.168.0.123'\n        },\n        'update_attributes':\
          \ {\n            'ipaddress': '192.168.0.123'\n        },\n        'remove_attributes':\
          \ ['tag_foobar']\n    },\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\n\
          elif resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/host_config/example.com\",\n    method=\"PUT\"\
          ,\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n        \"If-Match\": '\"\
          a20ceacf346041dc\"',  # (required) The value of the, to be modified, object's\
          \ ETag header.\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    data=json.dumps({\n        'attributes': {\n            'ipaddress':\
          \ '192.168.0.123'\n        },\n        'update_attributes': {\n        \
          \    'ipaddress': '192.168.0.123'\n        },\n        'remove_attributes':\
          \ ['tag_foobar']\n    }).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp PUT \"$API_URL/objects/host_config/example.com\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'If-Match:\"a20ceacf346041dc\"' \\\n    'Content-Type:application/json'\
          \ \\\n    attributes='{'ipaddress': '192.168.0.123'}' \\\n    update_attributes='{'ipaddress':\
          \ '192.168.0.123'}' \\\n    remove_attributes='['tag_foobar']' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request PUT\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"If-Match: \"a20ceacf346041dc\"\"\
          \ \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\n\
          \          \"attributes\": {\n            \"ipaddress\": \"192.168.0.123\"\
          \n          },\n          \"remove_attributes\": [\n            \"tag_foobar\"\
          \n          ],\n          \"update_attributes\": {\n            \"ipaddress\"\
          : \"192.168.0.123\"\n          }\n        }' \\\n    \"$API_URL/objects/host_config/example.com\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /objects/host_config/{host_name}/properties/nodes:
    put:
      description: "\n\nThis endpoint requires the following permissions: \n * `wato.all_folders`:\
        \ Without this permission, operations on folders can only be done by users\
        \ that are members of one of the folders contact groups. This permission grants\
        \ full access to all folders and hosts.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.host_config.update_nodes
      parameters:
      - description: The value of the, to be modified, object's ETag header. You can
          get this value by displaying the object it individually. To update this
          object the currently stored ETag needs to be the same as the one sent. The
          content of the ETag can potentially be anything and should be treated as
          semantically opaque.
        in: header
        name: If-Match
        required: true
        schema:
          example: '"a20ceacf346041dc"'
          type: string
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      - description: A cluster host.
        in: path
        name: host_name
        required: true
        schema:
          example: example.com
          pattern: '[-0-9a-zA-Z_.]+'
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNodes'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectProperty'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
            ETag:
              allowEmptyValue: false
              description: The HTTP ETag header for this resource. It identifies the
                current state of the object and needs to be sent along in the "If-Match"
                request-header for subsequent modifications. Please note that the
                actual ETag returned by some endpoints may look different than the
                one shown in this example.
              example: '"a20ceacf346041dc"'
              required: false
              schema:
                type: string
        '412':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Precondition Failed: The value of the If-Match header doesn''t
            match the object''s ETag.'
        '428':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Precondition Required: The required If-Match header is missing.'
      summary: Update the nodes of a cluster host
      tags:
      - Hosts
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.put(\n    f\"{API_URL}/objects/host_config/example.com/properties/nodes\"\
          ,\n    headers={\n        \"If-Match\": '\"a20ceacf346041dc\"',  # (required)\
          \ The value of the, to be modified, object's ETag header.\n        \"Content-Type\"\
          : 'application/json',  # (required) A header specifying which type of content\
          \ is in the request/response body.\n    },\n    json={'nodes': ['host1',\
          \ 'host2', 'host3']},\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\n\
          elif resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/host_config/example.com/properties/nodes\",\n\
          \    method=\"PUT\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \        \"If-Match\": '\"a20ceacf346041dc\"',  # (required) The value of\
          \ the, to be modified, object's ETag header.\n        \"Content-Type\":\
          \ 'application/json',  # (required) A header specifying which type of content\
          \ is in the request/response body.\n    },\n    data=json.dumps({'nodes':\
          \ ['host1', 'host2', 'host3']}).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp PUT \"$API_URL/objects/host_config/example.com/properties/nodes\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'If-Match:\"a20ceacf346041dc\"' \\\n    'Content-Type:application/json'\
          \ \\\n    nodes='['host1', 'host2', 'host3']' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request PUT\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"If-Match: \"a20ceacf346041dc\"\"\
          \ \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\n\
          \          \"nodes\": [\n            \"host1\",\n            \"host2\",\n\
          \            \"host3\"\n          ]\n        }' \\\n    \"$API_URL/objects/host_config/example.com/properties/nodes\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/host_config/actions/bulk-update/invoke:
    put:
      description: "Please be aware that when doing bulk updates, it is not possible\
        \ to prevent the\n[Updating Values](\"lost update problem\"), which is normally\
        \ prevented by the ETag locking\nmechanism. Use at your own risk.This endpoint\
        \ requires the following permissions: \n * `wato.all_folders`: Without this\
        \ permission, operations on folders can only be done by users that are members\
        \ of one of the folders contact groups. This permission grants full access\
        \ to all folders and hosts.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.host_config.bulk_update_hosts
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkUpdateHost'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BulkHostActionWithFailedHosts'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostConfigCollection'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Bulk update hosts
      tags:
      - Hosts
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.put(\n    f\"{API_URL}/domain-types/host_config/actions/bulk-update/invoke\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={\n        'entries': [{\n            'host_name': 'example.com',\n\
          \            'attributes': {}\n        }]\n    },\n)\nif resp.status_code\
          \ == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code == 204:\n\
          \    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/host_config/actions/bulk-update/invoke\"\
          ,\n    method=\"PUT\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \        \"Content-Type\": 'application/json',  # (required) A header specifying\
          \ which type of content is in the request/response body.\n    },\n    data=json.dumps({\n\
          \        'entries': [{\n            'host_name': 'example.com',\n      \
          \      'attributes': {}\n        }]\n    }).encode('utf-8'),\n)\nresponse\
          \ = urllib.request.urlopen(request)\nif response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp PUT \"$API_URL/domain-types/host_config/actions/bulk-update/invoke\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    entries='[{'host_name':\
          \ 'example.com', 'attributes': {}}]' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request PUT\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"entries\": [\n            {\n         \
          \     \"attributes\": {},\n              \"host_name\": \"example.com\"\n\
          \            }\n          ]\n        }' \\\n    \"$API_URL/domain-types/host_config/actions/bulk-update/invoke\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /objects/host_config/{host_name}/actions/rename/invoke:
    put:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.manage_hosts`: Add hosts to the monitoring and remove hosts\
        \ from the monitoring. Please also add the permission <i>Modify existing hosts</i>.\n\
        \   * Optionally:\n     * `wato.all_folders`: Without this permission, operations\
        \ on folders can only be done by users that are members of one of the folders\
        \ contact groups. This permission grants full access to all folders and hosts.\n\
        \   * Optionally:\n     * Any of:\n       * `bi.see_all`: With this permission\
        \ set, the BI aggregation rules are applied to all hosts and services - not\
        \ only those the user is a contact for. If you remove this permissions then\
        \ the user will see incomplete aggregation trees with status based only on\
        \ those items.\n       * `general.see_all`: See all objects regardless of\
        \ contacts and contact groups. If combined with 'perform commands' then commands\
        \ may be done on all objects.\n       * `mkeventd.seeall`: If a user lacks\
        \ this permission then he/she can see only those events that originate from\
        \ a host that he/she is a contact for.\n   * `wato.edit_hosts`: Modify the\
        \ properties of existing hosts. Please note: for the management of services\
        \ (inventory) there is a separate permission (see below)\n   * `wato.rename_hosts`:\
        \ Rename existing hosts. Please also add the permission <i>Modify existing\
        \ hosts</i>.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.host_config.rename_host
      parameters:
      - description: The value of the, to be modified, object's ETag header. You can
          get this value by displaying the object it individually. To update this
          object the currently stored ETag needs to be the same as the one sent. The
          content of the ETag can potentially be anything and should be treated as
          semantically opaque.
        in: header
        name: If-Match
        required: true
        schema:
          example: '"a20ceacf346041dc"'
          type: string
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      - description: A hostname.
        in: path
        name: host_name
        required: true
        schema:
          example: example.com
          pattern: '[-0-9a-zA-Z_.]+'
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenameHost'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '422':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unprocessable Entity: The host could not be renamed.'
        '409':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Conflict: There are pending changes not yet activated.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostConfig'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
            ETag:
              allowEmptyValue: false
              description: The HTTP ETag header for this resource. It identifies the
                current state of the object and needs to be sent along in the "If-Match"
                request-header for subsequent modifications. Please note that the
                actual ETag returned by some endpoints may look different than the
                one shown in this example.
              example: '"a20ceacf346041dc"'
              required: false
              schema:
                type: string
        '412':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Precondition Failed: The value of the If-Match header doesn''t
            match the object''s ETag.'
        '428':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Precondition Required: The required If-Match header is missing.'
      summary: Rename a host
      tags:
      - Hosts
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.put(\n    f\"{API_URL}/objects/host_config/example.com/actions/rename/invoke\"\
          ,\n    headers={\n        \"If-Match\": '\"a20ceacf346041dc\"',  # (required)\
          \ The value of the, to be modified, object's ETag header.\n        \"Content-Type\"\
          : 'application/json',  # (required) A header specifying which type of content\
          \ is in the request/response body.\n    },\n    json={'new_name': 'newhost'},\n\
          )\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/host_config/example.com/actions/rename/invoke\"\
          ,\n    method=\"PUT\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \        \"If-Match\": '\"a20ceacf346041dc\"',  # (required) The value of\
          \ the, to be modified, object's ETag header.\n        \"Content-Type\":\
          \ 'application/json',  # (required) A header specifying which type of content\
          \ is in the request/response body.\n    },\n    data=json.dumps({'new_name':\
          \ 'newhost'}).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp PUT \"$API_URL/objects/host_config/example.com/actions/rename/invoke\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'If-Match:\"a20ceacf346041dc\"' \\\n    'Content-Type:application/json'\
          \ \\\n    new_name='newhost' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request PUT\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"If-Match: \"a20ceacf346041dc\"\"\
          \ \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\n\
          \          \"new_name\": \"newhost\"\n        }' \\\n    \"$API_URL/objects/host_config/example.com/actions/rename/invoke\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/host_config/collections/clusters:
    post:
      description: "A cluster host groups many hosts (called nodes in this context)\
        \ into a conceptual cluster.\nAll the services of the individual nodes will\
        \ be collated on the cluster host.This endpoint requires the following permissions:\
        \ \n * All of:\n   * `wato.manage_hosts`: Add hosts to the monitoring and\
        \ remove hosts from the monitoring. Please also add the permission <i>Modify\
        \ existing hosts</i>.\n   * Optionally:\n     * `wato.all_folders`: Without\
        \ this permission, operations on folders can only be done by users that are\
        \ members of one of the folders contact groups. This permission grants full\
        \ access to all folders and hosts.\n   * Optionally:\n     * Any of:\n   \
        \    * `bi.see_all`: With this permission set, the BI aggregation rules are\
        \ applied to all hosts and services - not only those the user is a contact\
        \ for. If you remove this permissions then the user will see incomplete aggregation\
        \ trees with status based only on those items.\n       * `general.see_all`:\
        \ See all objects regardless of contacts and contact groups. If combined with\
        \ 'perform commands' then commands may be done on all objects.\n       * `mkeventd.seeall`:\
        \ If a user lacks this permission then he/she can see only those events that\
        \ originate from a host that he/she is a contact for.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.host_config.create_cluster_host
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      - description: Tries to bake the agents for the just created hosts. This process
          is started in the background after configuring the host. Please note that
          the backing may take some time and might block subsequent API calls. This
          only works when using the Enterprise Editions.
        in: query
        name: bake_agent
        required: false
        schema:
          default: false
          example: false
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClusterHost'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostConfig'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
            ETag:
              allowEmptyValue: false
              description: The HTTP ETag header for this resource. It identifies the
                current state of the object and needs to be sent along in the "If-Match"
                request-header for subsequent modifications. Please note that the
                actual ETag returned by some endpoints may look different than the
                one shown in this example.
              example: '"a20ceacf346041dc"'
              required: false
              schema:
                type: string
      summary: Create a cluster host
      tags:
      - Hosts
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/domain-types/host_config/collections/clusters\"\
          ,\n    params={  # goes into query string\n        \"bake_agent\": False,\
          \  # Tries to bake the agents for the just created hosts.\n    },\n    headers={\n\
          \        \"Content-Type\": 'application/json',  # (required) A header specifying\
          \ which type of content is in the request/response body.\n    },\n    json={\n\
          \        'folder': '/',\n        'host_name': 'example.com',\n        'attributes':\
          \ {\n            'ipaddress': '192.168.0.123'\n        },\n        'nodes':\
          \ ['host1', 'host2', 'host3']\n    },\n)\nif resp.status_code == 200:\n\
          \    pprint.pprint(resp.json())\nelif resp.status_code == 204:\n    print(\"\
          Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.parse\nimport\
          \ urllib.request\n\nHOST_NAME = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL\
          \ = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\n\nUSERNAME = \"\
          automation\"\nPASSWORD = \"test123\"\n\nquery_string = urllib.parse.urlencode({\n\
          \    \"bake_agent\": False,  # Tries to bake the agents for the just created\
          \ hosts.\n})\n\nrequest = urllib.request.Request(\n    f\"{API_URL}/domain-types/host_config/collections/clusters?{query_string}\"\
          ,\n    method=\"POST\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \        \"Content-Type\": 'application/json',  # (required) A header specifying\
          \ which type of content is in the request/response body.\n    },\n    data=json.dumps({\n\
          \        'folder': '/',\n        'host_name': 'example.com',\n        'attributes':\
          \ {\n            'ipaddress': '192.168.0.123'\n        },\n        'nodes':\
          \ ['host1', 'host2', 'host3']\n    }).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp POST \"$API_URL/domain-types/host_config/collections/clusters\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    folder='/'\
          \ \\\n    host_name='example.com' \\\n    attributes='{'ipaddress': '192.168.0.123'}'\
          \ \\\n    nodes='['host1', 'host2', 'host3']' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    -G \\\n   \
          \ --request POST \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\\
          n\" \\\n    --header \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n\
          \    --header \"Accept: application/json\" \\\n    --header \"Content-Type:\
          \ application/json\" \\\n    --data '{\n          \"attributes\": {\n  \
          \          \"ipaddress\": \"192.168.0.123\"\n          },\n          \"\
          folder\": \"/\",\n          \"host_name\": \"example.com\",\n          \"\
          nodes\": [\n            \"host1\",\n            \"host2\",\n           \
          \ \"host3\"\n          ]\n        }' \\\n    \"$API_URL/domain-types/host_config/collections/clusters\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/host_config/actions/bulk-create/invoke:
    post:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.manage_hosts`: Add hosts to the monitoring and remove hosts\
        \ from the monitoring. Please also add the permission <i>Modify existing hosts</i>.\n\
        \   * Optionally:\n     * `wato.all_folders`: Without this permission, operations\
        \ on folders can only be done by users that are members of one of the folders\
        \ contact groups. This permission grants full access to all folders and hosts.\n\
        \   * Optionally:\n     * Any of:\n       * `bi.see_all`: With this permission\
        \ set, the BI aggregation rules are applied to all hosts and services - not\
        \ only those the user is a contact for. If you remove this permissions then\
        \ the user will see incomplete aggregation trees with status based only on\
        \ those items.\n       * `general.see_all`: See all objects regardless of\
        \ contacts and contact groups. If combined with 'perform commands' then commands\
        \ may be done on all objects.\n       * `mkeventd.seeall`: If a user lacks\
        \ this permission then he/she can see only those events that originate from\
        \ a host that he/she is a contact for.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.host_config.bulk_create_hosts
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      - description: Tries to bake the agents for the just created hosts. This process
          is started in the background after configuring the host. Please note that
          the backing may take some time and might block subsequent API calls. This
          only works when using the Enterprise Editions.
        in: query
        name: bake_agent
        required: false
        schema:
          default: false
          example: false
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkCreateHost'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BulkHostActionWithFailedHosts'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostConfigCollection'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Bulk create hosts
      tags:
      - Hosts
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/domain-types/host_config/actions/bulk-create/invoke\"\
          ,\n    params={  # goes into query string\n        \"bake_agent\": False,\
          \  # Tries to bake the agents for the just created hosts.\n    },\n    headers={\n\
          \        \"Content-Type\": 'application/json',  # (required) A header specifying\
          \ which type of content is in the request/response body.\n    },\n    json={\n\
          \        'entries': [{\n            'host_name': 'example.com',\n      \
          \      'folder': '/',\n            'attributes': {}\n        }]\n    },\n\
          )\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.parse\nimport\
          \ urllib.request\n\nHOST_NAME = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL\
          \ = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\n\nUSERNAME = \"\
          automation\"\nPASSWORD = \"test123\"\n\nquery_string = urllib.parse.urlencode({\n\
          \    \"bake_agent\": False,  # Tries to bake the agents for the just created\
          \ hosts.\n})\n\nrequest = urllib.request.Request(\n    f\"{API_URL}/domain-types/host_config/actions/bulk-create/invoke?{query_string}\"\
          ,\n    method=\"POST\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \        \"Content-Type\": 'application/json',  # (required) A header specifying\
          \ which type of content is in the request/response body.\n    },\n    data=json.dumps({\n\
          \        'entries': [{\n            'host_name': 'example.com',\n      \
          \      'folder': '/',\n            'attributes': {}\n        }]\n    }).encode('utf-8'),\n\
          )\nresponse = urllib.request.urlopen(request)\nif response.status == 200:\n\
          \    pprint.pprint(json.loads(response.read()))\nelif response.status ==\
          \ 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp POST \"$API_URL/domain-types/host_config/actions/bulk-create/invoke\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    entries='[{'host_name':\
          \ 'example.com', 'folder': '/', 'attributes': {}}]' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    -G \\\n   \
          \ --request POST \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\\
          n\" \\\n    --header \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n\
          \    --header \"Accept: application/json\" \\\n    --header \"Content-Type:\
          \ application/json\" \\\n    --data '{\n          \"entries\": [\n     \
          \       {\n              \"attributes\": {},\n              \"folder\":\
          \ \"/\",\n              \"host_name\": \"example.com\"\n            }\n\
          \          ]\n        }' \\\n    \"$API_URL/domain-types/host_config/actions/bulk-create/invoke\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /objects/host_config/{host_name}/actions/move/invoke:
    post:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.manage_hosts`: Add hosts to the monitoring and remove hosts\
        \ from the monitoring. Please also add the permission <i>Modify existing hosts</i>.\n\
        \   * Optionally:\n     * `wato.all_folders`: Without this permission, operations\
        \ on folders can only be done by users that are members of one of the folders\
        \ contact groups. This permission grants full access to all folders and hosts.\n\
        \   * Optionally:\n     * Any of:\n       * `bi.see_all`: With this permission\
        \ set, the BI aggregation rules are applied to all hosts and services - not\
        \ only those the user is a contact for. If you remove this permissions then\
        \ the user will see incomplete aggregation trees with status based only on\
        \ those items.\n       * `general.see_all`: See all objects regardless of\
        \ contacts and contact groups. If combined with 'perform commands' then commands\
        \ may be done on all objects.\n       * `mkeventd.seeall`: If a user lacks\
        \ this permission then he/she can see only those events that originate from\
        \ a host that he/she is a contact for.\n   * `wato.edit_hosts`: Modify the\
        \ properties of existing hosts. Please note: for the management of services\
        \ (inventory) there is a separate permission (see below)\n   * `wato.move_hosts`:\
        \ Move existing hosts to other folders. Please also add the permission <i>Modify\
        \ existing hosts</i>.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.host_config.move
      parameters:
      - description: The value of the, to be modified, object's ETag header. You can
          get this value by displaying the object it individually. To update this
          object the currently stored ETag needs to be the same as the one sent. The
          content of the ETag can potentially be anything and should be treated as
          semantically opaque.
        in: header
        name: If-Match
        required: true
        schema:
          example: '"a20ceacf346041dc"'
          type: string
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      - description: A hostname.
        in: path
        name: host_name
        required: true
        schema:
          example: example.com
          pattern: '[-0-9a-zA-Z_.]+'
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveHost'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostConfig'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
            ETag:
              allowEmptyValue: false
              description: The HTTP ETag header for this resource. It identifies the
                current state of the object and needs to be sent along in the "If-Match"
                request-header for subsequent modifications. Please note that the
                actual ETag returned by some endpoints may look different than the
                one shown in this example.
              example: '"a20ceacf346041dc"'
              required: false
              schema:
                type: string
        '412':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Precondition Failed: The value of the If-Match header doesn''t
            match the object''s ETag.'
        '428':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Precondition Required: The required If-Match header is missing.'
      summary: Move a host to another folder
      tags:
      - Hosts
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/objects/host_config/example.com/actions/move/invoke\"\
          ,\n    headers={\n        \"If-Match\": '\"a20ceacf346041dc\"',  # (required)\
          \ The value of the, to be modified, object's ETag header.\n        \"Content-Type\"\
          : 'application/json',  # (required) A header specifying which type of content\
          \ is in the request/response body.\n    },\n    json={'target_folder': '%2Fmy%2Ffine%2Ffolder'},\n\
          )\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/host_config/example.com/actions/move/invoke\"\
          ,\n    method=\"POST\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \        \"If-Match\": '\"a20ceacf346041dc\"',  # (required) The value of\
          \ the, to be modified, object's ETag header.\n        \"Content-Type\":\
          \ 'application/json',  # (required) A header specifying which type of content\
          \ is in the request/response body.\n    },\n    data=json.dumps({'target_folder':\
          \ '%2Fmy%2Ffine%2Ffolder'}).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp POST \"$API_URL/objects/host_config/example.com/actions/move/invoke\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'If-Match:\"a20ceacf346041dc\"' \\\n    'Content-Type:application/json'\
          \ \\\n    target_folder='%2Fmy%2Ffine%2Ffolder' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request POST\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"If-Match: \"a20ceacf346041dc\"\"\
          \ \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\n\
          \          \"target_folder\": \"%2Fmy%2Ffine%2Ffolder\"\n        }' \\\n\
          \    \"$API_URL/objects/host_config/example.com/actions/move/invoke\")\n\
          \nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/host_config/actions/bulk-delete/invoke:
    post:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.manage_hosts`: Add hosts to the monitoring and remove hosts\
        \ from the monitoring. Please also add the permission <i>Modify existing hosts</i>.\n\
        \   * Optionally:\n     * `wato.all_folders`: Without this permission, operations\
        \ on folders can only be done by users that are members of one of the folders\
        \ contact groups. This permission grants full access to all folders and hosts.\n\
        \   * Optionally:\n     * Any of:\n       * `bi.see_all`: With this permission\
        \ set, the BI aggregation rules are applied to all hosts and services - not\
        \ only those the user is a contact for. If you remove this permissions then\
        \ the user will see incomplete aggregation trees with status based only on\
        \ those items.\n       * `general.see_all`: See all objects regardless of\
        \ contacts and contact groups. If combined with 'perform commands' then commands\
        \ may be done on all objects.\n       * `mkeventd.seeall`: If a user lacks\
        \ this permission then he/she can see only those events that originate from\
        \ a host that he/she is a contact for.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.host_config.bulk_delete
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkDeleteHost'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '204':
          content: {}
          description: 'No Content: Operation done successfully. No further output.'
      summary: Bulk delete hosts
      tags:
      - Hosts
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/domain-types/host_config/actions/bulk-delete/invoke\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={'entries': ['example', 'sample']},\n)\nif resp.status_code\
          \ == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code == 204:\n\
          \    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/host_config/actions/bulk-delete/invoke\"\
          ,\n    method=\"POST\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \        \"Content-Type\": 'application/json',  # (required) A header specifying\
          \ which type of content is in the request/response body.\n    },\n    data=json.dumps({'entries':\
          \ ['example', 'sample']}).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp POST \"$API_URL/domain-types/host_config/actions/bulk-delete/invoke\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    entries='['example',\
          \ 'sample']' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request POST\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"entries\": [\n            \"example\",\n\
          \            \"sample\"\n          ]\n        }' \\\n    \"$API_URL/domain-types/host_config/actions/bulk-delete/invoke\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/host_group_config/collections/all:
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * `wato.groups`:\
        \ Access to the modules for managing host and service groups.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.host_group_config.list_groups
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkedValueDomainObjectCollection'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Show all host groups
      tags:
      - Host groups
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/domain-types/host_group_config/collections/all\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/host_group_config/collections/all\",\n  \
          \  method=\"GET\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \    },\n)\nresponse = urllib.request.urlopen(request)\nif response.status\
          \ == 200:\n    pprint.pprint(json.loads(response.read()))\nelif response.status\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/domain-types/host_group_config/collections/all\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request GET\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/domain-types/host_group_config/collections/all\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
    post:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.groups`: Access to the modules for managing host and service\
        \ groups.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.host_group_config.create
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputHostGroup'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostGroup'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
            ETag:
              allowEmptyValue: false
              description: The HTTP ETag header for this resource. It identifies the
                current state of the object and needs to be sent along in the "If-Match"
                request-header for subsequent modifications. Please note that the
                actual ETag returned by some endpoints may look different than the
                one shown in this example.
              example: '"a20ceacf346041dc"'
              required: false
              schema:
                type: string
      summary: Create a host group
      tags:
      - Host groups
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/domain-types/host_group_config/collections/all\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={'name': 'windows', 'alias': 'Windows Servers'},\n)\n\
          if resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/host_group_config/collections/all\",\n  \
          \  method=\"POST\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \        \"Content-Type\": 'application/json',  # (required) A header specifying\
          \ which type of content is in the request/response body.\n    },\n    data=json.dumps({'name':\
          \ 'windows', 'alias': 'Windows Servers'}).encode('utf-8'),\n)\nresponse\
          \ = urllib.request.urlopen(request)\nif response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp POST \"$API_URL/domain-types/host_group_config/collections/all\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    name='windows'\
          \ \\\n    alias='Windows Servers' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request POST\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"alias\": \"Windows Servers\",\n       \
          \   \"name\": \"windows\"\n        }' \\\n    \"$API_URL/domain-types/host_group_config/collections/all\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /objects/host_group_config/{name}:
    delete:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.groups`: Access to the modules for managing host and service\
        \ groups.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.host_group_config.delete
      parameters:
      - description: A name used as an identifier. Can be of arbitrary (sensible)
          length.
        in: path
        name: name
        required: true
        schema:
          example: pathname
          pattern: '[a-zA-Z0-9][a-zA-Z0-9_-]+'
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '204':
          content: {}
          description: 'No Content: Operation done successfully. No further output.'
      summary: Delete a host group
      tags:
      - Host groups
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.delete(\n    f\"{API_URL}/objects/host_group_config/pathname\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/host_group_config/pathname\",\n    method=\"DELETE\"\
          ,\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n    },\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp DELETE \"$API_URL/objects/host_group_config/pathname\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request DELETE\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/objects/host_group_config/pathname\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * `wato.groups`:\
        \ Access to the modules for managing host and service groups.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.host_group_config.get
      parameters:
      - description: A name used as an identifier. Can be of arbitrary (sensible)
          length.
        in: path
        name: name
        required: true
        schema:
          example: pathname
          pattern: '[a-zA-Z0-9][a-zA-Z0-9_-]+'
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostGroup'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
            ETag:
              allowEmptyValue: false
              description: The HTTP ETag header for this resource. It identifies the
                current state of the object and needs to be sent along in the "If-Match"
                request-header for subsequent modifications. Please note that the
                actual ETag returned by some endpoints may look different than the
                one shown in this example.
              example: '"a20ceacf346041dc"'
              required: false
              schema:
                type: string
      summary: Show a host group
      tags:
      - Host groups
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/objects/host_group_config/pathname\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/host_group_config/pathname\",\n    method=\"GET\"\
          ,\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n    },\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/objects/host_group_config/pathname\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request GET\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/objects/host_group_config/pathname\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
    put:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.groups`: Access to the modules for managing host and service\
        \ groups.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.host_group_config.update
      parameters:
      - description: The value of the, to be modified, object's ETag header. You can
          get this value by displaying the object it individually. To update this
          object the currently stored ETag needs to be the same as the one sent. The
          content of the ETag can potentially be anything and should be treated as
          semantically opaque.
        in: header
        name: If-Match
        required: true
        schema:
          example: '"a20ceacf346041dc"'
          type: string
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      - description: A name used as an identifier. Can be of arbitrary (sensible)
          length.
        in: path
        name: name
        required: true
        schema:
          example: pathname
          pattern: '[a-zA-Z0-9][a-zA-Z0-9_-]+'
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroup'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostGroup'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
            ETag:
              allowEmptyValue: false
              description: The HTTP ETag header for this resource. It identifies the
                current state of the object and needs to be sent along in the "If-Match"
                request-header for subsequent modifications. Please note that the
                actual ETag returned by some endpoints may look different than the
                one shown in this example.
              example: '"a20ceacf346041dc"'
              required: false
              schema:
                type: string
        '412':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Precondition Failed: The value of the If-Match header doesn''t
            match the object''s ETag.'
        '428':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Precondition Required: The required If-Match header is missing.'
      summary: Update a host group
      tags:
      - Host groups
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.put(\n    f\"{API_URL}/objects/host_group_config/pathname\"\
          ,\n    headers={\n        \"If-Match\": '\"a20ceacf346041dc\"',  # (required)\
          \ The value of the, to be modified, object's ETag header.\n        \"Content-Type\"\
          : 'application/json',  # (required) A header specifying which type of content\
          \ is in the request/response body.\n    },\n    json={'alias': 'Example\
          \ Group'},\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\n\
          elif resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/host_group_config/pathname\",\n    method=\"PUT\"\
          ,\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n        \"If-Match\": '\"\
          a20ceacf346041dc\"',  # (required) The value of the, to be modified, object's\
          \ ETag header.\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    data=json.dumps({'alias': 'Example Group'}).encode('utf-8'),\n\
          )\nresponse = urllib.request.urlopen(request)\nif response.status == 200:\n\
          \    pprint.pprint(json.loads(response.read()))\nelif response.status ==\
          \ 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp PUT \"$API_URL/objects/host_group_config/pathname\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'If-Match:\"a20ceacf346041dc\"' \\\n    'Content-Type:application/json'\
          \ \\\n    alias='Example Group' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request PUT\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"If-Match: \"a20ceacf346041dc\"\"\
          \ \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\n\
          \          \"alias\": \"Example Group\"\n        }' \\\n    \"$API_URL/objects/host_group_config/pathname\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/host_group_config/actions/bulk-update/invoke:
    put:
      description: "Please be aware that when doing bulk updates, it is not possible\
        \ to prevent the\n[Updating Values](\"lost update problem\"), which is normally\
        \ prevented by the ETag locking\nmechanism. Use at your own riskThis endpoint\
        \ requires the following permissions: \n * All of:\n   * `wato.edit`: This\
        \ permission is needed in order to make any changes or perform any actions\
        \ at all. Without this permission, the user is only able to view data, and\
        \ that only in modules he has explicit permissions for.\n   * `wato.groups`:\
        \ Access to the modules for managing host and service groups.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.host_group_config.bulk_update
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkUpdateHostGroup'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainObjectCollection'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Bulk update host groups
      tags:
      - Host groups
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.put(\n    f\"{API_URL}/domain-types/host_group_config/actions/bulk-update/invoke\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={\n        'entries': [{\n            'name': 'windows',\n\
          \            'attributes': {\n                'alias': 'Windows Servers'\n\
          \            }\n        }]\n    },\n)\nif resp.status_code == 200:\n   \
          \ pprint.pprint(resp.json())\nelif resp.status_code == 204:\n    print(\"\
          Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/host_group_config/actions/bulk-update/invoke\"\
          ,\n    method=\"PUT\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \        \"Content-Type\": 'application/json',  # (required) A header specifying\
          \ which type of content is in the request/response body.\n    },\n    data=json.dumps({\n\
          \        'entries': [{\n            'name': 'windows',\n            'attributes':\
          \ {\n                'alias': 'Windows Servers'\n            }\n       \
          \ }]\n    }).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp PUT \"$API_URL/domain-types/host_group_config/actions/bulk-update/invoke\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    entries='[{'name':\
          \ 'windows', 'attributes': {'alias': 'Windows Servers'}}]' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request PUT\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"entries\": [\n            {\n         \
          \     \"attributes\": {\n                \"alias\": \"Windows Servers\"\n\
          \              },\n              \"name\": \"windows\"\n            }\n\
          \          ]\n        }' \\\n    \"$API_URL/domain-types/host_group_config/actions/bulk-update/invoke\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/host_group_config/actions/bulk-create/invoke:
    post:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.groups`: Access to the modules for managing host and service\
        \ groups.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.host_group_config.bulk_create
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkInputHostGroup'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainObjectCollection'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Bulk create host groups
      tags:
      - Host groups
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/domain-types/host_group_config/actions/bulk-create/invoke\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={\n        'entries': [{\n            'name': 'windows',\n\
          \            'alias': 'Windows Servers'\n        }]\n    },\n)\nif resp.status_code\
          \ == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code == 204:\n\
          \    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/host_group_config/actions/bulk-create/invoke\"\
          ,\n    method=\"POST\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \        \"Content-Type\": 'application/json',  # (required) A header specifying\
          \ which type of content is in the request/response body.\n    },\n    data=json.dumps({\n\
          \        'entries': [{\n            'name': 'windows',\n            'alias':\
          \ 'Windows Servers'\n        }]\n    }).encode('utf-8'),\n)\nresponse =\
          \ urllib.request.urlopen(request)\nif response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp POST \"$API_URL/domain-types/host_group_config/actions/bulk-create/invoke\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    entries='[{'name':\
          \ 'windows', 'alias': 'Windows Servers'}]' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request POST\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"entries\": [\n            {\n         \
          \     \"alias\": \"Windows Servers\",\n              \"name\": \"windows\"\
          \n            }\n          ]\n        }' \\\n    \"$API_URL/domain-types/host_group_config/actions/bulk-create/invoke\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/host_group_config/actions/bulk-delete/invoke:
    post:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.groups`: Access to the modules for managing host and service\
        \ groups.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.host_group_config.bulk_delete
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkDeleteHostGroup'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '204':
          content: {}
          description: 'No Content: Operation done successfully. No further output.'
      summary: Bulk delete host groups
      tags:
      - Host groups
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/domain-types/host_group_config/actions/bulk-delete/invoke\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={'entries': ['windows', 'panels']},\n)\nif resp.status_code\
          \ == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code == 204:\n\
          \    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/host_group_config/actions/bulk-delete/invoke\"\
          ,\n    method=\"POST\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \        \"Content-Type\": 'application/json',  # (required) A header specifying\
          \ which type of content is in the request/response body.\n    },\n    data=json.dumps({'entries':\
          \ ['windows', 'panels']}).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp POST \"$API_URL/domain-types/host_group_config/actions/bulk-delete/invoke\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    entries='['windows',\
          \ 'panels']' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request POST\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"entries\": [\n            \"windows\",\n\
          \            \"panels\"\n          ]\n        }' \\\n    \"$API_URL/domain-types/host_group_config/actions/bulk-delete/invoke\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /objects/host_config_internal/{host_name}:
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * Optionally:\n\
        \   * `wato.see_all_folders`: Users without this permissions can only see\
        \ folders with a contact group they are in.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.host_internal.show_host
      parameters:
      - description: A hostname.
        in: path
        name: host_name
        required: true
        schema:
          example: example.com
          pattern: '[-0-9a-zA-Z_.]+'
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '401':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unauthorized: You do not have read access to this host.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostConfigSchemaInternal'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Show a host
      tags:
      - Hosts (internal)
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/objects/host_config_internal/example.com\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/host_config_internal/example.com\",\n    method=\"\
          GET\",\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n    },\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/objects/host_config_internal/example.com\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request GET\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/objects/host_config_internal/example.com\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /objects/host_config_internal/{host_name}/actions/link_uuid/invoke:
    put:
      description: "\n\nThis endpoint requires the following permissions: \n * Any\
        \ of:\n   * `wato.all_folders`: Without this permission, operations on folders\
        \ can only be done by users that are members of one of the folders contact\
        \ groups. This permission grants full access to all folders and hosts.\n \
        \  * `wato.edit_hosts`: Modify the properties of existing hosts. Please note:\
        \ for the management of services (inventory) there is a separate permission\
        \ (see below)\n"
      operationId: cmk.gui.plugins.openapi.endpoints.host_internal.link_with_uuid
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      - description: A hostname.
        in: path
        name: host_name
        required: true
        schema:
          example: example.com
          pattern: '[-0-9a-zA-Z_.]+'
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkHostUUID'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '401':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unauthorized: You do not have the permissions to edit this
            host.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '204':
          content: {}
          description: 'No Content: Operation done successfully. No further output.'
      summary: Link a host to a UUID
      tags:
      - Hosts (internal)
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.put(\n    f\"{API_URL}/objects/host_config_internal/example.com/actions/link_uuid/invoke\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={'uuid': '34e4c967-1591-4883-8cdf-0e335b09618d'},\n)\n\
          if resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/host_config_internal/example.com/actions/link_uuid/invoke\"\
          ,\n    method=\"PUT\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \        \"Content-Type\": 'application/json',  # (required) A header specifying\
          \ which type of content is in the request/response body.\n    },\n    data=json.dumps({'uuid':\
          \ '34e4c967-1591-4883-8cdf-0e335b09618d'}).encode('utf-8'),\n)\nresponse\
          \ = urllib.request.urlopen(request)\nif response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp PUT \"$API_URL/objects/host_config_internal/example.com/actions/link_uuid/invoke\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    uuid='34e4c967-1591-4883-8cdf-0e335b09618d'\
          \ \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request PUT\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"uuid\": \"34e4c967-1591-4883-8cdf-0e335b09618d\"\
          \n        }' \\\n    \"$API_URL/objects/host_config_internal/example.com/actions/link_uuid/invoke\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /objects/host_tag_group/{name}:
    delete:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.hosttags`: Create, remove and edit tags. Removing tags\
        \ also might remove rules, so this permission should not be available to normal\
        \ users.\n   * Optionally:\n     * `wato.all_folders`: Without this permission,\
        \ operations on folders can only be done by users that are members of one\
        \ of the folders contact groups. This permission grants full access to all\
        \ folders and hosts.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.host_tag.delete_host_tag_group
      parameters:
      - description: The host tag group can still be in use. Setting repair to True
          gives permission to automatically remove the tag from the affected hosts.
        in: query
        name: repair
        required: false
        schema:
          default: false
          example: false
          type: boolean
      - description: The name of the host tag group
        in: path
        name: name
        required: true
        schema:
          example: datasource
          pattern: '[a-zA-Z_]+[-0-9a-zA-Z_]*'
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '405':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Method Not Allowed: Method not allowed: This request is only
            allowed with other HTTP methods'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '204':
          content: {}
          description: 'No Content: Operation done successfully. No further output.'
      summary: Delete a host tag group
      tags:
      - Host tag groups
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.delete(\n    f\"{API_URL}/objects/host_tag_group/datasource\"\
          ,\n    params={  # goes into query string\n        \"repair\": False,  #\
          \ The host tag group can still be in use.\n    },\n)\nif resp.status_code\
          \ == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code == 204:\n\
          \    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.parse\nimport\
          \ urllib.request\n\nHOST_NAME = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL\
          \ = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\n\nUSERNAME = \"\
          automation\"\nPASSWORD = \"test123\"\n\nquery_string = urllib.parse.urlencode({\n\
          \    \"repair\": False,  # The host tag group can still be in use.\n})\n\
          \nrequest = urllib.request.Request(\n    f\"{API_URL}/objects/host_tag_group/datasource?{query_string}\"\
          ,\n    method=\"DELETE\",\n    headers={\n        \"Authorization\": f\"\
          Bearer {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\"\
          ,\n    },\n)\nresponse = urllib.request.urlopen(request)\nif response.status\
          \ == 200:\n    pprint.pprint(json.loads(response.read()))\nelif response.status\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp DELETE \"$API_URL/objects/host_tag_group/datasource\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    -G \\\n   \
          \ --request DELETE \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\\
          n\" \\\n    --header \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n\
          \    --header \"Accept: application/json\" \\\n    \"$API_URL/objects/host_tag_group/datasource\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.hosttags`: Create, remove and edit tags. Removing tags also\
        \ might remove rules, so this permission should not be available to normal\
        \ users.\n   * Optionally:\n     * `wato.all_folders`: Without this permission,\
        \ operations on folders can only be done by users that are members of one\
        \ of the folders contact groups. This permission grants full access to all\
        \ folders and hosts.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.host_tag.show_host_tag_group
      parameters:
      - description: The name of the host tag group
        in: path
        name: name
        required: true
        schema:
          example: datasource
          pattern: '[a-zA-Z_]+[-0-9a-zA-Z_]*'
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcreteHostTagGroup'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
            ETag:
              allowEmptyValue: false
              description: The HTTP ETag header for this resource. It identifies the
                current state of the object and needs to be sent along in the "If-Match"
                request-header for subsequent modifications. Please note that the
                actual ETag returned by some endpoints may look different than the
                one shown in this example.
              example: '"a20ceacf346041dc"'
              required: false
              schema:
                type: string
      summary: Show a host tag group
      tags:
      - Host tag groups
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/objects/host_tag_group/datasource\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/host_tag_group/datasource\",\n    method=\"GET\"\
          ,\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n    },\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/objects/host_tag_group/datasource\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request GET\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/objects/host_tag_group/datasource\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
    put:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.hosttags`: Create, remove and edit tags. Removing tags\
        \ also might remove rules, so this permission should not be available to normal\
        \ users.\n   * Optionally:\n     * `wato.all_folders`: Without this permission,\
        \ operations on folders can only be done by users that are members of one\
        \ of the folders contact groups. This permission grants full access to all\
        \ folders and hosts.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.host_tag.update_host_tag_group
      parameters:
      - description: The value of the, to be modified, object's ETag header. You can
          get this value by displaying the object it individually. To update this
          object the currently stored ETag needs to be the same as the one sent. The
          content of the ETag can potentially be anything and should be treated as
          semantically opaque.
        in: header
        name: If-Match
        required: true
        schema:
          example: '"a20ceacf346041dc"'
          type: string
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      - description: The name of the host tag group
        in: path
        name: name
        required: true
        schema:
          example: datasource
          pattern: '[a-zA-Z_]+[-0-9a-zA-Z_]*'
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateHostTagGroup'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '401':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unauthorized: The user is not authorized to do this request.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '405':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Method Not Allowed: Method not allowed: This request is only
            allowed with other HTTP methods'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcreteHostTagGroup'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
            ETag:
              allowEmptyValue: false
              description: The HTTP ETag header for this resource. It identifies the
                current state of the object and needs to be sent along in the "If-Match"
                request-header for subsequent modifications. Please note that the
                actual ETag returned by some endpoints may look different than the
                one shown in this example.
              example: '"a20ceacf346041dc"'
              required: false
              schema:
                type: string
        '412':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Precondition Failed: The value of the If-Match header doesn''t
            match the object''s ETag.'
        '428':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Precondition Required: The required If-Match header is missing.'
      summary: Update a host tag group
      tags:
      - Host tag groups
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.put(\n    f\"{API_URL}/objects/host_tag_group/datasource\"\
          ,\n    headers={\n        \"If-Match\": '\"a20ceacf346041dc\"',  # (required)\
          \ The value of the, to be modified, object's ETag header.\n        \"Content-Type\"\
          : 'application/json',  # (required) A header specifying which type of content\
          \ is in the request/response body.\n    },\n    json={\n        'title':\
          \ 'Kubernetes',\n        'topic': 'Data Sources',\n        'help': 'Kubernetes\
          \ Pods',\n        'tags': [{\n            'ident': 'pod',\n            'title':\
          \ 'Pod'\n        }],\n        'repair': False\n    },\n)\nif resp.status_code\
          \ == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code == 204:\n\
          \    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/host_tag_group/datasource\",\n    method=\"PUT\"\
          ,\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n        \"If-Match\": '\"\
          a20ceacf346041dc\"',  # (required) The value of the, to be modified, object's\
          \ ETag header.\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    data=json.dumps({\n        'title': 'Kubernetes',\n       \
          \ 'topic': 'Data Sources',\n        'help': 'Kubernetes Pods',\n       \
          \ 'tags': [{\n            'ident': 'pod',\n            'title': 'Pod'\n\
          \        }],\n        'repair': False\n    }).encode('utf-8'),\n)\nresponse\
          \ = urllib.request.urlopen(request)\nif response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp PUT \"$API_URL/objects/host_tag_group/datasource\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'If-Match:\"a20ceacf346041dc\"' \\\n    'Content-Type:application/json'\
          \ \\\n    title='Kubernetes' \\\n    topic='Data Sources' \\\n    help='Kubernetes\
          \ Pods' \\\n    tags='[{'ident': 'pod', 'title': 'Pod'}]' \\\n    repair='False'\
          \ \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request PUT\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"If-Match: \"a20ceacf346041dc\"\"\
          \ \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\n\
          \          \"help\": \"Kubernetes Pods\",\n          \"repair\": false,\n\
          \          \"tags\": [\n            {\n              \"ident\": \"pod\"\
          ,\n              \"title\": \"Pod\"\n            }\n          ],\n     \
          \     \"title\": \"Kubernetes\",\n          \"topic\": \"Data Sources\"\n\
          \        }' \\\n    \"$API_URL/objects/host_tag_group/datasource\")\n\n\
          resp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo \"\
          ${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/host_tag_group/collections/all:
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.hosttags`: Create, remove and edit tags. Removing tags also\
        \ might remove rules, so this permission should not be available to normal\
        \ users.\n   * Optionally:\n     * `wato.all_folders`: Without this permission,\
        \ operations on folders can only be done by users that are members of one\
        \ of the folders contact groups. This permission grants full access to all\
        \ folders and hosts.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.host_tag.list_host_tag_groups
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostTagGroupCollection'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Show all host tag groups
      tags:
      - Host tag groups
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/domain-types/host_tag_group/collections/all\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/host_tag_group/collections/all\",\n    method=\"\
          GET\",\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n    },\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/domain-types/host_tag_group/collections/all\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request GET\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/domain-types/host_tag_group/collections/all\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
    post:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.hosttags`: Create, remove and edit tags. Removing tags\
        \ also might remove rules, so this permission should not be available to normal\
        \ users.\n   * Optionally:\n     * `wato.all_folders`: Without this permission,\
        \ operations on folders can only be done by users that are members of one\
        \ of the folders contact groups. This permission grants full access to all\
        \ folders and hosts.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.host_tag.create_host_tag_group
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputHostTagGroup'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainObject'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
            ETag:
              allowEmptyValue: false
              description: The HTTP ETag header for this resource. It identifies the
                current state of the object and needs to be sent along in the "If-Match"
                request-header for subsequent modifications. Please note that the
                actual ETag returned by some endpoints may look different than the
                one shown in this example.
              example: '"a20ceacf346041dc"'
              required: false
              schema:
                type: string
      summary: Create a host tag group
      tags:
      - Host tag groups
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/domain-types/host_tag_group/collections/all\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={\n        'ident': 'group_id',\n        'title': 'Kubernetes',\n\
          \        'topic': 'Data Sources',\n        'help': 'Kubernetes Pods',\n\
          \        'tags': [{\n            'ident': 'pod',\n            'title': 'Pod'\n\
          \        }]\n    },\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\n\
          elif resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/host_tag_group/collections/all\",\n    method=\"\
          POST\",\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME}\
          \ {PASSWORD}\",\n        \"Accept\": \"application/json\",\n        \"Content-Type\"\
          : 'application/json',  # (required) A header specifying which type of content\
          \ is in the request/response body.\n    },\n    data=json.dumps({\n    \
          \    'ident': 'group_id',\n        'title': 'Kubernetes',\n        'topic':\
          \ 'Data Sources',\n        'help': 'Kubernetes Pods',\n        'tags': [{\n\
          \            'ident': 'pod',\n            'title': 'Pod'\n        }]\n \
          \   }).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp POST \"$API_URL/domain-types/host_tag_group/collections/all\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    ident='group_id'\
          \ \\\n    title='Kubernetes' \\\n    topic='Data Sources' \\\n    help='Kubernetes\
          \ Pods' \\\n    tags='[{'ident': 'pod', 'title': 'Pod'}]' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request POST\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"help\": \"Kubernetes Pods\",\n        \
          \  \"ident\": \"group_id\",\n          \"tags\": [\n            {\n    \
          \          \"ident\": \"pod\",\n              \"title\": \"Pod\"\n     \
          \       }\n          ],\n          \"title\": \"Kubernetes\",\n        \
          \  \"topic\": \"Data Sources\"\n        }' \\\n    \"$API_URL/domain-types/host_tag_group/collections/all\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /objects/password/{name}:
    delete:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.passwords`: This permission is needed for the module <i>Passwords</i>.\n\
        \   * Optionally:\n     * `wato.edit_all_passwords`: Without this permission,\
        \ users can only edit passwords which are shared with a contact group they\
        \ are member of. This permission grants full access to all passwords.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.password.delete_password
      parameters:
      - description: A name used as an identifier. Can be of arbitrary (sensible)
          length.
        in: path
        name: name
        required: true
        schema:
          example: pathname
          pattern: '[a-zA-Z0-9][a-zA-Z0-9_-]+'
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '204':
          content: {}
          description: 'No Content: Operation done successfully. No further output.'
      summary: Delete a password
      tags:
      - Passwords
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.delete(\n    f\"{API_URL}/objects/password/pathname\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/password/pathname\",\n    method=\"DELETE\",\n\
          \    headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n    },\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp DELETE \"$API_URL/objects/password/pathname\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request DELETE\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/objects/password/pathname\")\n\n\
          resp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo \"\
          ${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.passwords`: This permission is needed for the module <i>Passwords</i>.\n\
        \   * Optionally:\n     * `wato.edit_all_passwords`: Without this permission,\
        \ users can only edit passwords which are shared with a contact group they\
        \ are member of. This permission grants full access to all passwords.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.password.show_password
      parameters:
      - description: A name used as an identifier. Can be of arbitrary (sensible)
          length.
        in: path
        name: name
        required: true
        schema:
          example: pathname
          pattern: '[a-zA-Z0-9][a-zA-Z0-9_-]+'
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordObject'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Show a password
      tags:
      - Passwords
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/objects/password/pathname\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/password/pathname\",\n    method=\"GET\",\n  \
          \  headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n    },\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/objects/password/pathname\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request GET\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/objects/password/pathname\")\n\n\
          resp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo \"\
          ${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
    put:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.passwords`: This permission is needed for the module <i>Passwords</i>.\n\
        \   * Optionally:\n     * `wato.edit_all_passwords`: Without this permission,\
        \ users can only edit passwords which are shared with a contact group they\
        \ are member of. This permission grants full access to all passwords.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.password.update_password
      parameters:
      - description: The value of the, to be modified, object's ETag header. You can
          get this value by displaying the object it individually. To update this
          object the currently stored ETag needs to be the same as the one sent. The
          content of the ETag can potentially be anything and should be treated as
          semantically opaque.
        in: header
        name: If-Match
        required: true
        schema:
          example: '"a20ceacf346041dc"'
          type: string
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      - description: A name used as an identifier. Can be of arbitrary (sensible)
          length.
        in: path
        name: name
        required: true
        schema:
          example: pathname
          pattern: '[a-zA-Z0-9][a-zA-Z0-9_-]+'
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePassword'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordObject'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
            ETag:
              allowEmptyValue: false
              description: The HTTP ETag header for this resource. It identifies the
                current state of the object and needs to be sent along in the "If-Match"
                request-header for subsequent modifications. Please note that the
                actual ETag returned by some endpoints may look different than the
                one shown in this example.
              example: '"a20ceacf346041dc"'
              required: false
              schema:
                type: string
        '412':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Precondition Failed: The value of the If-Match header doesn''t
            match the object''s ETag.'
        '428':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Precondition Required: The required If-Match header is missing.'
      summary: Update a password
      tags:
      - Passwords
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.put(\n    f\"{API_URL}/objects/password/pathname\"\
          ,\n    headers={\n        \"If-Match\": '\"a20ceacf346041dc\"',  # (required)\
          \ The value of the, to be modified, object's ETag header.\n        \"Content-Type\"\
          : 'application/json',  # (required) A header specifying which type of content\
          \ is in the request/response body.\n    },\n    json={\n        'title':\
          \ 'Kubernetes login',\n        'comment': 'Kommentar',\n        'documentation_url':\
          \ 'localhost',\n        'password': 'password',\n        'owner': 'admin',\n\
          \        'shared': ['all']\n    },\n)\nif resp.status_code == 200:\n   \
          \ pprint.pprint(resp.json())\nelif resp.status_code == 204:\n    print(\"\
          Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/password/pathname\",\n    method=\"PUT\",\n  \
          \  headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n        \"If-Match\": '\"\
          a20ceacf346041dc\"',  # (required) The value of the, to be modified, object's\
          \ ETag header.\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    data=json.dumps({\n        'title': 'Kubernetes login',\n \
          \       'comment': 'Kommentar',\n        'documentation_url': 'localhost',\n\
          \        'password': 'password',\n        'owner': 'admin',\n        'shared':\
          \ ['all']\n    }).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp PUT \"$API_URL/objects/password/pathname\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'If-Match:\"a20ceacf346041dc\"' \\\n    'Content-Type:application/json'\
          \ \\\n    title='Kubernetes login' \\\n    comment='Kommentar' \\\n    documentation_url='localhost'\
          \ \\\n    password='password' \\\n    owner='admin' \\\n    shared='['all']'\
          \ \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request PUT\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"If-Match: \"a20ceacf346041dc\"\"\
          \ \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\n\
          \          \"comment\": \"Kommentar\",\n          \"documentation_url\"\
          : \"localhost\",\n          \"owner\": \"admin\",\n          \"password\"\
          : \"password\",\n          \"shared\": [\n            \"all\"\n        \
          \  ],\n          \"title\": \"Kubernetes login\"\n        }' \\\n    \"\
          $API_URL/objects/password/pathname\")\n\nresp=$( echo \"${out}\" | grep\
          \ -v \"xxx-status_code\" )\ncode=$( echo \"${out}\" | awk -F\"=\" '/^xxx-status_code/\
          \ {print $2}')\n\n# For indentation, please install 'jq' (JSON query tool)\n\
          echo \"$resp\" | jq\n# echo \"$resp\"\n\nif [[ $code -lt 400 ]]; then\n\
          \    echo \"OK\"\n    exit 0\nelse\n    echo \"Request error\"\n    exit\
          \ 1\nfi"
  /domain-types/password/collections/all:
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.passwords`: This permission is needed for the module <i>Passwords</i>.\n\
        \   * Optionally:\n     * `wato.edit_all_passwords`: Without this permission,\
        \ users can only edit passwords which are shared with a contact group they\
        \ are member of. This permission grants full access to all passwords.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.password.list_passwords
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainObjectCollection'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Show all passwords
      tags:
      - Passwords
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/domain-types/password/collections/all\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/password/collections/all\",\n    method=\"\
          GET\",\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n    },\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/domain-types/password/collections/all\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request GET\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/domain-types/password/collections/all\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
    post:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.passwords`: This permission is needed for the module <i>Passwords</i>.\n\
        \   * Optionally:\n     * `wato.edit_all_passwords`: Without this permission,\
        \ users can only edit passwords which are shared with a contact group they\
        \ are member of. This permission grants full access to all passwords.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.password.create_password
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputPassword'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordObject'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
            ETag:
              allowEmptyValue: false
              description: The HTTP ETag header for this resource. It identifies the
                current state of the object and needs to be sent along in the "If-Match"
                request-header for subsequent modifications. Please note that the
                actual ETag returned by some endpoints may look different than the
                one shown in this example.
              example: '"a20ceacf346041dc"'
              required: false
              schema:
                type: string
      summary: Create a password
      tags:
      - Passwords
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/domain-types/password/collections/all\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={\n        'ident': 'pass',\n        'title': 'Kubernetes\
          \ login',\n        'comment': 'Kommentar',\n        'documentation_url':\
          \ 'localhost',\n        'password': 'password',\n        'owner': 'admin',\n\
          \        'shared': ['all']\n    },\n)\nif resp.status_code == 200:\n   \
          \ pprint.pprint(resp.json())\nelif resp.status_code == 204:\n    print(\"\
          Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/password/collections/all\",\n    method=\"\
          POST\",\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME}\
          \ {PASSWORD}\",\n        \"Accept\": \"application/json\",\n        \"Content-Type\"\
          : 'application/json',  # (required) A header specifying which type of content\
          \ is in the request/response body.\n    },\n    data=json.dumps({\n    \
          \    'ident': 'pass',\n        'title': 'Kubernetes login',\n        'comment':\
          \ 'Kommentar',\n        'documentation_url': 'localhost',\n        'password':\
          \ 'password',\n        'owner': 'admin',\n        'shared': ['all']\n  \
          \  }).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp POST \"$API_URL/domain-types/password/collections/all\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    ident='pass'\
          \ \\\n    title='Kubernetes login' \\\n    comment='Kommentar' \\\n    documentation_url='localhost'\
          \ \\\n    password='password' \\\n    owner='admin' \\\n    shared='['all']'\
          \ \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request POST\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"comment\": \"Kommentar\",\n          \"\
          documentation_url\": \"localhost\",\n          \"ident\": \"pass\",\n  \
          \        \"owner\": \"admin\",\n          \"password\": \"password\",\n\
          \          \"shared\": [\n            \"all\"\n          ],\n          \"\
          title\": \"Kubernetes login\"\n        }' \\\n    \"$API_URL/domain-types/password/collections/all\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/rule/collections/all:
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.rulesets`: Access to the module for managing Check_MK rules.\
        \ Please note that a user can only manage rules in folders he has permissions\
        \ to. \n   * Optionally:\n     * `wato.all_folders`: Without this permission,\
        \ operations on folders can only be done by users that are members of one\
        \ of the folders contact groups. This permission grants full access to all\
        \ folders and hosts.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.rule.list_rules
      parameters:
      - description: The name of the ruleset.
        in: query
        name: ruleset_name
        required: true
        schema:
          example: host_groups
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleCollection'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: List rules
      tags:
      - Rules
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/domain-types/rule/collections/all\"\
          ,\n    params={  # goes into query string\n        \"ruleset_name\": 'host_groups',\
          \  # (required) The name of the ruleset.\n    },\n)\nif resp.status_code\
          \ == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code == 204:\n\
          \    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.parse\nimport\
          \ urllib.request\n\nHOST_NAME = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL\
          \ = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\n\nUSERNAME = \"\
          automation\"\nPASSWORD = \"test123\"\n\nquery_string = urllib.parse.urlencode({\n\
          \    \"ruleset_name\": 'host_groups',  # (required) The name of the ruleset.\n\
          })\n\nrequest = urllib.request.Request(\n    f\"{API_URL}/domain-types/rule/collections/all?{query_string}\"\
          ,\n    method=\"GET\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \    },\n)\nresponse = urllib.request.urlopen(request)\nif response.status\
          \ == 200:\n    pprint.pprint(json.loads(response.read()))\nelif response.status\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/domain-types/rule/collections/all\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    ruleset_name=='host_groups' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    -G \\\n   \
          \ --request GET \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\\
          n\" \\\n    --header \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n\
          \    --header \"Accept: application/json\" \\\n    --data-urlencode 'ruleset_name=host_groups'\
          \ \\\n    \"$API_URL/domain-types/rule/collections/all\")\n\nresp=$( echo\
          \ \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo \"${out}\" |\
          \ awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation, please\
          \ install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"$resp\"\n\
          \nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n    echo\
          \ \"Request error\"\n    exit 1\nfi"
    post:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.rulesets`: Access to the module for managing Check_MK rules.\
        \ Please note that a user can only manage rules in folders he has permissions\
        \ to. \n   * Optionally:\n     * `wato.all_folders`: Without this permission,\
        \ operations on folders can only be done by users that are members of one\
        \ of the folders contact groups. This permission grants full access to all\
        \ folders and hosts.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.rule.create_rule
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputRuleObject'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleObject'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
            ETag:
              allowEmptyValue: false
              description: The HTTP ETag header for this resource. It identifies the
                current state of the object and needs to be sent along in the "If-Match"
                request-header for subsequent modifications. Please note that the
                actual ETag returned by some endpoints may look different than the
                one shown in this example.
              example: '"a20ceacf346041dc"'
              required: false
              schema:
                type: string
      summary: Create rule
      tags:
      - Rules
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/domain-types/rule/collections/all\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={\n        'ruleset': 'host_config',\n        'folder':\
          \ '~router',\n        'properties': {\n            'disabled': False\n \
          \       },\n        'value_raw': '{\"ignore_fs_types\": [\"tmpfs\"]}',\n\
          \        'conditions': {}\n    },\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\n\
          elif resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/rule/collections/all\",\n    method=\"POST\"\
          ,\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n        \"Content-Type\":\
          \ 'application/json',  # (required) A header specifying which type of content\
          \ is in the request/response body.\n    },\n    data=json.dumps({\n    \
          \    'ruleset': 'host_config',\n        'folder': '~router',\n        'properties':\
          \ {\n            'disabled': False\n        },\n        'value_raw': '{\"\
          ignore_fs_types\": [\"tmpfs\"]}',\n        'conditions': {}\n    }).encode('utf-8'),\n\
          )\nresponse = urllib.request.urlopen(request)\nif response.status == 200:\n\
          \    pprint.pprint(json.loads(response.read()))\nelif response.status ==\
          \ 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp POST \"$API_URL/domain-types/rule/collections/all\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    ruleset='host_config'\
          \ \\\n    folder='~router' \\\n    properties='{'disabled': False}' \\\n\
          \    value_raw='{\"ignore_fs_types\": [\"tmpfs\"]}' \\\n    conditions='{}'\
          \ \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request POST\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"conditions\": {},\n          \"folder\"\
          : \"~router\",\n          \"properties\": {\n            \"disabled\": false\n\
          \          },\n          \"ruleset\": \"host_config\",\n          \"value_raw\"\
          : \"{\\\"ignore_fs_types\\\": [\\\"tmpfs\\\"]}\"\n        }' \\\n    \"\
          $API_URL/domain-types/rule/collections/all\")\n\nresp=$( echo \"${out}\"\
          \ | grep -v \"xxx-status_code\" )\ncode=$( echo \"${out}\" | awk -F\"=\"\
          \ '/^xxx-status_code/ {print $2}')\n\n# For indentation, please install\
          \ 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"$resp\"\n\nif [[\
          \ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n    echo \"\
          Request error\"\n    exit 1\nfi"
  /objects/rule/{rule_id}:
    delete:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.rulesets`: Access to the module for managing Check_MK rules.\
        \ Please note that a user can only manage rules in folders he has permissions\
        \ to. \n   * Optionally:\n     * `wato.all_folders`: Without this permission,\
        \ operations on folders can only be done by users that are members of one\
        \ of the folders contact groups. This permission grants full access to all\
        \ folders and hosts.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.rule.delete_rule
      parameters:
      - description: The ID of the rule.
        in: path
        name: rule_id
        required: true
        schema:
          example: 0a168697-14a2-48d0-9c3c-ca65569a39e2
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The rule to be deleted was not found.'
        '204':
          content: {}
          description: 'No Content: Rule was deleted successfully.'
      summary: Delete a rule
      tags:
      - Rules
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.delete(\n    f\"{API_URL}/objects/rule/0a168697-14a2-48d0-9c3c-ca65569a39e2\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/rule/0a168697-14a2-48d0-9c3c-ca65569a39e2\",\n\
          \    method=\"DELETE\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \    },\n)\nresponse = urllib.request.urlopen(request)\nif response.status\
          \ == 200:\n    pprint.pprint(json.loads(response.read()))\nelif response.status\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp DELETE \"$API_URL/objects/rule/0a168697-14a2-48d0-9c3c-ca65569a39e2\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request DELETE\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/objects/rule/0a168697-14a2-48d0-9c3c-ca65569a39e2\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.rulesets`: Access to the module for managing Check_MK rules.\
        \ Please note that a user can only manage rules in folders he has permissions\
        \ to. \n   * Optionally:\n     * `wato.all_folders`: Without this permission,\
        \ operations on folders can only be done by users that are members of one\
        \ of the folders contact groups. This permission grants full access to all\
        \ folders and hosts.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.rule.show_rule
      parameters:
      - description: The ID of the rule.
        in: path
        name: rule_id
        required: true
        schema:
          example: 0a168697-14a2-48d0-9c3c-ca65569a39e2
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleObject'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Show a rule
      tags:
      - Rules
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/objects/rule/0a168697-14a2-48d0-9c3c-ca65569a39e2\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/rule/0a168697-14a2-48d0-9c3c-ca65569a39e2\",\n\
          \    method=\"GET\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \    },\n)\nresponse = urllib.request.urlopen(request)\nif response.status\
          \ == 200:\n    pprint.pprint(json.loads(response.read()))\nelif response.status\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/objects/rule/0a168697-14a2-48d0-9c3c-ca65569a39e2\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request GET\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/objects/rule/0a168697-14a2-48d0-9c3c-ca65569a39e2\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /objects/rule/{rule_id}/actions/move/invoke:
    post:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.rulesets`: Access to the module for managing Check_MK rules.\
        \ Please note that a user can only manage rules in folders he has permissions\
        \ to. \n   * Optionally:\n     * `wato.all_folders`: Without this permission,\
        \ operations on folders can only be done by users that are members of one\
        \ of the folders contact groups. This permission grants full access to all\
        \ folders and hosts.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.rule.move_rule_to
      parameters:
      - description: The value of the, to be modified, object's ETag header. You can
          get this value by displaying the object it individually. To update this
          object the currently stored ETag needs to be the same as the one sent. The
          content of the ETag can potentially be anything and should be treated as
          semantically opaque.
        in: header
        name: If-Match
        required: true
        schema:
          example: '"a20ceacf346041dc"'
          type: string
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      - description: The ID of the rule.
        in: path
        name: rule_id
        required: true
        schema:
          example: 0a168697-14a2-48d0-9c3c-ca65569a39e2
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveRuleTo'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleObject'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
        '412':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Precondition Failed: The value of the If-Match header doesn''t
            match the object''s ETag.'
        '428':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Precondition Required: The required If-Match header is missing.'
      summary: Move a rule to a specific location
      tags:
      - Rules
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/objects/rule/0a168697-14a2-48d0-9c3c-ca65569a39e2/actions/move/invoke\"\
          ,\n    headers={\n        \"If-Match\": '\"a20ceacf346041dc\"',  # (required)\
          \ The value of the, to be modified, object's ETag header.\n        \"Content-Type\"\
          : 'application/json',  # (required) A header specifying which type of content\
          \ is in the request/response body.\n    },\n    # This schema has multiple\
          \ variations. Please refer to\n    # the 'Payload' section for details.\n\
          \    json={'position': 'top_of_folder', 'folder': '/'},\n)\nif resp.status_code\
          \ == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code == 204:\n\
          \    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/rule/0a168697-14a2-48d0-9c3c-ca65569a39e2/actions/move/invoke\"\
          ,\n    method=\"POST\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \        \"If-Match\": '\"a20ceacf346041dc\"',  # (required) The value of\
          \ the, to be modified, object's ETag header.\n        \"Content-Type\":\
          \ 'application/json',  # (required) A header specifying which type of content\
          \ is in the request/response body.\n    },\n    # This schema has multiple\
          \ variations. Please refer to\n    # the 'Payload' section for details.\n\
          \    data=json.dumps({'position': 'top_of_folder', 'folder': '/'}).encode('utf-8'),\n\
          )\nresponse = urllib.request.urlopen(request)\nif response.status == 200:\n\
          \    pprint.pprint(json.loads(response.read()))\nelif response.status ==\
          \ 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\n# This schema has multiple variations. Please\
          \ refer to the\n# 'Payload' section for details.\nhttp POST \"$API_URL/objects/rule/0a168697-14a2-48d0-9c3c-ca65569a39e2/actions/move/invoke\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'If-Match:\"a20ceacf346041dc\"' \\\n    'Content-Type:application/json'\
          \ \\\n    position='top_of_folder' \\\n    folder='/' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\n# This schema has multiple variations.\
          \ Please refer to the\n# 'Payload' section for details.\nout=$(\n  curl\
          \ \\\n    --request POST \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\\
          n\" \\\n    --header \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n\
          \    --header \"Accept: application/json\" \\\n    --header \"If-Match:\
          \ \"a20ceacf346041dc\"\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"folder\": \"/\",\n          \"position\"\
          : \"top_of_folder\"\n        }' \\\n    \"$API_URL/objects/rule/0a168697-14a2-48d0-9c3c-ca65569a39e2/actions/move/invoke\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/ruleset/collections/all:
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * `wato.rulesets`:\
        \ Access to the module for managing Check_MK rules. Please note that a user\
        \ can only manage rules in folders he has permissions to. \n"
      operationId: cmk.gui.plugins.openapi.endpoints.ruleset.list_rulesets
      parameters:
      - description: Search all keys (like `name`, `title`, `help`, etc.) for this
          text. Regex allowed.
        in: query
        name: fulltext
        required: false
        schema:
          type: string
      - description: 'The folder in which to search for rules.


          Path delimiters can be either `~`, `/` or `\`. Please use the one most appropriate
          for your quoting/escaping needs. A good default choice is `~`.'
        in: query
        name: folder
        required: false
        schema:
          pattern: (?:(?:[~\\\/]|(?:[~\\\/][-_ a-zA-Z0-9.]+)+[~\\\/]?)|[0-9a-fA-F]{32})
          type: string
      - description: Also show deprecated rulesets. Defaults to False.
        in: query
        name: deprecated
        required: false
        schema:
          type: string
      - description: Only show used rulesets. Defaults to True.
        in: query
        name: used
        required: false
        schema:
          type: string
      - description: The specific group to search for rules in.
        in: query
        name: group
        required: false
        schema:
          type: string
      - description: A regex of the name.
        in: query
        name: name
        required: false
        schema:
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RulesetCollection'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Search rule sets
      tags:
      - Rulesets
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/domain-types/ruleset/collections/all\"\
          ,\n    params={  # goes into query string\n    },\n)\nif resp.status_code\
          \ == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code == 204:\n\
          \    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.parse\nimport\
          \ urllib.request\n\nHOST_NAME = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL\
          \ = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\n\nUSERNAME = \"\
          automation\"\nPASSWORD = \"test123\"\n\nquery_string = urllib.parse.urlencode({\n\
          })\n\nrequest = urllib.request.Request(\n    f\"{API_URL}/domain-types/ruleset/collections/all?{query_string}\"\
          ,\n    method=\"GET\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \    },\n)\nresponse = urllib.request.urlopen(request)\nif response.status\
          \ == 200:\n    pprint.pprint(json.loads(response.read()))\nelif response.status\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/domain-types/ruleset/collections/all\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    -G \\\n   \
          \ --request GET \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\\
          n\" \\\n    --header \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n\
          \    --header \"Accept: application/json\" \\\n    \"$API_URL/domain-types/ruleset/collections/all\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /objects/ruleset/{ruleset_name}:
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * `wato.rulesets`:\
        \ Access to the module for managing Check_MK rules. Please note that a user\
        \ can only manage rules in folders he has permissions to. \n"
      operationId: cmk.gui.plugins.openapi.endpoints.ruleset.show_ruleset
      parameters:
      - description: The name of the ruleset.
        in: path
        name: ruleset_name
        required: true
        schema:
          example: host_groups
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RulesetObject'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
            ETag:
              allowEmptyValue: false
              description: The HTTP ETag header for this resource. It identifies the
                current state of the object and needs to be sent along in the "If-Match"
                request-header for subsequent modifications. Please note that the
                actual ETag returned by some endpoints may look different than the
                one shown in this example.
              example: '"a20ceacf346041dc"'
              required: false
              schema:
                type: string
      summary: Show a ruleset
      tags:
      - Rulesets
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/objects/ruleset/host_groups\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/ruleset/host_groups\",\n    method=\"GET\",\n\
          \    headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n    },\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/objects/ruleset/host_groups\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request GET\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/objects/ruleset/host_groups\")\n\
          \nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /objects/host/{host_name}/actions/show_service/invoke:
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * Optionally:\n\
        \   * Any of:\n     * `general.see_all`: See all objects regardless of contacts\
        \ and contact groups. If combined with 'perform commands' then commands may\
        \ be done on all objects.\n     * `bi.see_all`: With this permission set,\
        \ the BI aggregation rules are applied to all hosts and services - not only\
        \ those the user is a contact for. If you remove this permissions then the\
        \ user will see incomplete aggregation trees with status based only on those\
        \ items.\n     * `mkeventd.seeall`: If a user lacks this permission then he/she\
        \ can see only those events that originate from a host that he/she is a contact\
        \ for.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.service.show_service
      parameters:
      - description: The service description of the selected host
        in: query
        name: service_description
        required: false
        schema:
          example: Filesystem %boot
          type: string
      - description: A hostname.
        in: path
        name: host_name
        required: true
        schema:
          example: example.com
          pattern: '[-0-9a-zA-Z_.]+'
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainObject'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Show the monitored service of a host
      tags:
      - Service status
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/objects/host/example.com/actions/show_service/invoke\"\
          ,\n    params={  # goes into query string\n        \"service_description\"\
          : 'Filesystem %boot',  # The service description of the selected host\n\
          \    },\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\n\
          elif resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.parse\nimport\
          \ urllib.request\n\nHOST_NAME = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL\
          \ = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\n\nUSERNAME = \"\
          automation\"\nPASSWORD = \"test123\"\n\nquery_string = urllib.parse.urlencode({\n\
          \    \"service_description\": 'Filesystem %boot',  # The service description\
          \ of the selected host\n})\n\nrequest = urllib.request.Request(\n    f\"\
          {API_URL}/objects/host/example.com/actions/show_service/invoke?{query_string}\"\
          ,\n    method=\"GET\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \    },\n)\nresponse = urllib.request.urlopen(request)\nif response.status\
          \ == 200:\n    pprint.pprint(json.loads(response.read()))\nelif response.status\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/objects/host/example.com/actions/show_service/invoke\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    service_description=='Filesystem %boot' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    -G \\\n   \
          \ --request GET \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\\
          n\" \\\n    --header \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n\
          \    --header \"Accept: application/json\" \\\n    --data-urlencode 'service_description=Filesystem\
          \ %boot' \\\n    \"$API_URL/objects/host/example.com/actions/show_service/invoke\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /objects/host/{host_name}/collections/services:
    get:
      description: "This list is filterable by various parameters.This endpoint requires\
        \ the following permissions: \n * Optionally:\n   * Any of:\n     * `general.see_all`:\
        \ See all objects regardless of contacts and contact groups. If combined with\
        \ 'perform commands' then commands may be done on all objects.\n     * `bi.see_all`:\
        \ With this permission set, the BI aggregation rules are applied to all hosts\
        \ and services - not only those the user is a contact for. If you remove this\
        \ permissions then the user will see incomplete aggregation trees with status\
        \ based only on those items.\n     * `mkeventd.seeall`: If a user lacks this\
        \ permission then he/she can see only those events that originate from a host\
        \ that he/she is a contact for.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.service._list_host_services
      parameters:
      - description: Restrict the query to this particular site.
        explode: true
        in: query
        name: sites
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: An query expression of the Livestatus 'services' table in nested
          dictionary form. If you want to use multiple expressions, nest them with
          the AND/OR operators.
        in: query
        name: query
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/Expr'
          example: '{"op": "=", "left": "host_name", "right": "example.com"}'
      - description: The desired columns of the `services` table. If left empty, a
          default set of columns is used.
        explode: true
        in: query
        name: columns
        required: false
        schema:
          default:
          - host_name
          - description
          example: &id019
          - host_name
          - description
          items:
            type: string
          type: array
        style: form
      - description: A hostname.
        in: path
        name: host_name
        required: true
        schema:
          example: example.com
          pattern: '[-0-9a-zA-Z_.]+'
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainObjectCollection'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Show the monitored services of a host
      tags:
      - Service status
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/objects/host/example.com/collections/services\"\
          ,\n    params={  # goes into query string\n        \"query\": '{\"op\":\
          \ \"=\", \"left\": \"host_name\", \"right\": \"example.com\"}',  # An query\
          \ expression of the Livestatus 'services' table in nested dictionary form.\n\
          \        \"columns\": ['host_name', 'description'],  # The desired columns\
          \ of the `services` table.\n    },\n)\nif resp.status_code == 200:\n   \
          \ pprint.pprint(resp.json())\nelif resp.status_code == 204:\n    print(\"\
          Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.parse\nimport\
          \ urllib.request\n\nHOST_NAME = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL\
          \ = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\n\nUSERNAME = \"\
          automation\"\nPASSWORD = \"test123\"\n\nquery_string = urllib.parse.urlencode({\n\
          \    \"query\": '{\"op\": \"=\", \"left\": \"host_name\", \"right\": \"\
          example.com\"}',  # An query expression of the Livestatus 'services' table\
          \ in nested dictionary form.\n    \"columns\": ['host_name', 'description'],\
          \  # The desired columns of the `services` table.\n})\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/host/example.com/collections/services?{query_string}\"\
          ,\n    method=\"GET\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \    },\n)\nresponse = urllib.request.urlopen(request)\nif response.status\
          \ == 200:\n    pprint.pprint(json.loads(response.read()))\nelif response.status\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/objects/host/example.com/collections/services\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    query=='{\"op\": \"=\", \"left\": \"host_name\"\
          , \"right\": \"example.com\"}' \\\n    columns=='['host_name', 'description']'\
          \ \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    -G \\\n   \
          \ --request GET \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\\
          n\" \\\n    --header \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n\
          \    --header \"Accept: application/json\" \\\n    --data-urlencode 'query={\"\
          op\": \"=\", \"left\": \"host_name\", \"right\": \"example.com\"}' \\\n\
          \    --data-urlencode 'columns=host_name' \\\n    --data-urlencode 'columns=description'\
          \ \\\n    \"$API_URL/objects/host/example.com/collections/services\")\n\n\
          resp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo \"\
          ${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/service/collections/all:
    get:
      description: "This list is filterable by various parameters.This endpoint requires\
        \ the following permissions: \n * Optionally:\n   * Any of:\n     * `general.see_all`:\
        \ See all objects regardless of contacts and contact groups. If combined with\
        \ 'perform commands' then commands may be done on all objects.\n     * `bi.see_all`:\
        \ With this permission set, the BI aggregation rules are applied to all hosts\
        \ and services - not only those the user is a contact for. If you remove this\
        \ permissions then the user will see incomplete aggregation trees with status\
        \ based only on those items.\n     * `mkeventd.seeall`: If a user lacks this\
        \ permission then he/she can see only those events that originate from a host\
        \ that he/she is a contact for.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.service._list_all_services
      parameters:
      - description: A hostname.
        in: query
        name: host_name
        required: false
        schema:
          example: example.com
          pattern: '[-0-9a-zA-Z_.]+'
          type: string
      - description: Restrict the query to this particular site.
        explode: true
        in: query
        name: sites
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: An query expression of the Livestatus 'services' table in nested
          dictionary form. If you want to use multiple expressions, nest them with
          the AND/OR operators.
        in: query
        name: query
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/Expr'
          example: '{"op": "=", "left": "host_name", "right": "example.com"}'
      - description: The desired columns of the `services` table. If left empty, a
          default set of columns is used.
        explode: true
        in: query
        name: columns
        required: false
        schema:
          default:
          - host_name
          - description
          example: *id019
          items:
            type: string
          type: array
        style: form
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainObjectCollection'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Show all monitored services
      tags:
      - Service status
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/domain-types/service/collections/all\"\
          ,\n    params={  # goes into query string\n        \"host_name\": 'example.com',\
          \  # A hostname.\n        \"query\": '{\"op\": \"=\", \"left\": \"host_name\"\
          , \"right\": \"example.com\"}',  # An query expression of the Livestatus\
          \ 'services' table in nested dictionary form.\n        \"columns\": ['host_name',\
          \ 'description'],  # The desired columns of the `services` table.\n    },\n\
          )\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.parse\nimport\
          \ urllib.request\n\nHOST_NAME = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL\
          \ = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\n\nUSERNAME = \"\
          automation\"\nPASSWORD = \"test123\"\n\nquery_string = urllib.parse.urlencode({\n\
          \    \"host_name\": 'example.com',  # A hostname.\n    \"query\": '{\"op\"\
          : \"=\", \"left\": \"host_name\", \"right\": \"example.com\"}',  # An query\
          \ expression of the Livestatus 'services' table in nested dictionary form.\n\
          \    \"columns\": ['host_name', 'description'],  # The desired columns of\
          \ the `services` table.\n})\n\nrequest = urllib.request.Request(\n    f\"\
          {API_URL}/domain-types/service/collections/all?{query_string}\",\n    method=\"\
          GET\",\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n    },\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/domain-types/service/collections/all\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    host_name=='example.com' \\\n    query=='{\"\
          op\": \"=\", \"left\": \"host_name\", \"right\": \"example.com\"}' \\\n\
          \    columns=='['host_name', 'description']' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    -G \\\n   \
          \ --request GET \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\\
          n\" \\\n    --header \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n\
          \    --header \"Accept: application/json\" \\\n    --data-urlencode 'host_name=example.com'\
          \ \\\n    --data-urlencode 'query={\"op\": \"=\", \"left\": \"host_name\"\
          , \"right\": \"example.com\"}' \\\n    --data-urlencode 'columns=host_name'\
          \ \\\n    --data-urlencode 'columns=description' \\\n    \"$API_URL/domain-types/service/collections/all\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /objects/service_discovery/{host_name}:
    get:
      description: ''
      operationId: cmk.gui.plugins.openapi.endpoints.service_discovery.show_service_discovery_result
      parameters:
      - description: The host of the service discovery result
        in: path
        name: host_name
        required: true
        schema:
          example: example.com
          pattern: '[-0-9a-zA-Z_.]+'
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainObject'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Show the current service discovery result
      tags:
      - Service discovery
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/objects/service_discovery/example.com\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/service_discovery/example.com\",\n    method=\"\
          GET\",\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n    },\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/objects/service_discovery/example.com\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request GET\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/objects/service_discovery/example.com\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/service/collections/services:
    get:
      deprecated: true
      description: '`WARNING`: This URL is deprecated, see [Werk 14537](https://checkmk.com/werk/14537)
        for more details.


        '
      operationId: cmk.gui.plugins.openapi.endpoints.service_discovery.show_services-14537
      parameters:
      - description: The host of the discovered services.
        in: query
        name: host_name
        required: true
        schema:
          example: example.com
          pattern: '[-0-9a-zA-Z_.]+'
          type: string
      - description: The discovery phase of the services.
        in: query
        name: discovery_phase
        required: true
        schema:
          enum:
          - active
          - active_ignored
          - clustered_ignored
          - clustered_monitored
          - clustered_undecided
          - clustered_vanished
          - custom
          - custom_ignored
          - ignored
          - legacy
          - legacy_ignored
          - manual
          - monitored
          - removed
          - undecided
          - vanished
          example: monitored
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainObject'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Show all services of specific phase
      tags:
      - Service discovery
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/domain-types/service/collections/services\"\
          ,\n    params={  # goes into query string\n        \"host_name\": 'example.com',\
          \  # (required) The host of the discovered services.\n        \"discovery_phase\"\
          : 'monitored',  # (required) The discovery phase of the services.\n    },\n\
          )\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.parse\nimport\
          \ urllib.request\n\nHOST_NAME = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL\
          \ = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\n\nUSERNAME = \"\
          automation\"\nPASSWORD = \"test123\"\n\nquery_string = urllib.parse.urlencode({\n\
          \    \"host_name\": 'example.com',  # (required) The host of the discovered\
          \ services.\n    \"discovery_phase\": 'monitored',  # (required) The discovery\
          \ phase of the services.\n})\n\nrequest = urllib.request.Request(\n    f\"\
          {API_URL}/domain-types/service/collections/services?{query_string}\",\n\
          \    method=\"GET\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \    },\n)\nresponse = urllib.request.urlopen(request)\nif response.status\
          \ == 200:\n    pprint.pprint(json.loads(response.read()))\nelif response.status\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/domain-types/service/collections/services\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    host_name=='example.com' \\\n    discovery_phase=='monitored'\
          \ \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    -G \\\n   \
          \ --request GET \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\\
          n\" \\\n    --header \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n\
          \    --header \"Accept: application/json\" \\\n    --data-urlencode 'host_name=example.com'\
          \ \\\n    --data-urlencode 'discovery_phase=monitored' \\\n    \"$API_URL/domain-types/service/collections/services\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /objects/service_discovery_run/{host_name}:
    get:
      description: ''
      operationId: cmk.gui.plugins.openapi.endpoints.service_discovery.show_service_discovery_run
      parameters:
      - description: A hostname.
        in: path
        name: host_name
        required: true
        schema:
          example: example.com
          pattern: '[-0-9a-zA-Z_.]+'
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainObject'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Show the last service discovery background job on a host
      tags:
      - Service discovery
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/objects/service_discovery_run/example.com\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/service_discovery_run/example.com\",\n    method=\"\
          GET\",\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n    },\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/objects/service_discovery_run/example.com\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request GET\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/objects/service_discovery_run/example.com\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /objects/discovery_run/{job_id}:
    get:
      description: ''
      operationId: cmk.gui.plugins.openapi.endpoints.service_discovery.show_bulk_discovery_status
      parameters:
      - description: The unique identifier of the background job executing the bulk
          discovery
        in: path
        name: job_id
        required: true
        schema:
          example: bulk_discovery
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: There is no running background job with this job_id.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoveryBackgroundJobStatusObject'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Show the status of a bulk discovery job
      tags:
      - Service discovery
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/objects/discovery_run/bulk_discovery\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/discovery_run/bulk_discovery\",\n    method=\"\
          GET\",\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n    },\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/objects/discovery_run/bulk_discovery\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request GET\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/objects/discovery_run/bulk_discovery\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /objects/host/{host_name}/actions/update_discovery_phase/invoke:
    put:
      description: "\n\nThis endpoint requires the following permissions: \n * Optionally:\n\
        \   * Any of:\n     * `wato.service_discovery_to_monitored`: Service discovery:\
        \ Move to monitored services\n     * `wato.service_discovery_to_ignored`:\
        \ Service discovery: Disabled services\n     * `wato.service_discovery_to_undecided`:\
        \ Service discovery: Move to undecided services\n     * `wato.service_discovery_to_removed`:\
        \ Service discovery: Remove services\n"
      operationId: cmk.gui.plugins.openapi.endpoints.service_discovery.update_service_phase
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      - description: The host of the service which shall be updated.
        in: path
        name: host_name
        required: true
        schema:
          example: example.com
          pattern: '[-0-9a-zA-Z_.]+'
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDiscoveryPhase'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: Host could not be found'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '204':
          content: {}
          description: 'No Content: Operation done successfully. No further output.'
      summary: Update the phase of a service
      tags:
      - Service discovery
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.put(\n    f\"{API_URL}/objects/host/example.com/actions/update_discovery_phase/invoke\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={\n        'check_type': 'df',\n        'service_item':\
          \ '/home',\n        'target_phase': 'monitored'\n    },\n)\nif resp.status_code\
          \ == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code == 204:\n\
          \    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/host/example.com/actions/update_discovery_phase/invoke\"\
          ,\n    method=\"PUT\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \        \"Content-Type\": 'application/json',  # (required) A header specifying\
          \ which type of content is in the request/response body.\n    },\n    data=json.dumps({\n\
          \        'check_type': 'df',\n        'service_item': '/home',\n       \
          \ 'target_phase': 'monitored'\n    }).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp PUT \"$API_URL/objects/host/example.com/actions/update_discovery_phase/invoke\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    check_type='df'\
          \ \\\n    service_item='/home' \\\n    target_phase='monitored' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request PUT\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"check_type\": \"df\",\n          \"service_item\"\
          : \"/home\",\n          \"target_phase\": \"monitored\"\n        }' \\\n\
          \    \"$API_URL/objects/host/example.com/actions/update_discovery_phase/invoke\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/service_discovery_run/actions/start/invoke:
    post:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * Optionally:\n     * `wato.service_discovery_to_undecided`: Service\
        \ discovery: Move to undecided services\n   * Optionally:\n     * `wato.service_discovery_to_monitored`:\
        \ Service discovery: Move to monitored services\n   * Optionally:\n     *\
        \ `wato.service_discovery_to_ignored`: Service discovery: Disabled services\n\
        \   * Optionally:\n     * `wato.service_discovery_to_removed`: Service discovery:\
        \ Remove services\n   * Optionally:\n     * `wato.services`: Do inventory\
        \ and service configuration on existing hosts.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.service_discovery.execute_service_discovery
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscoverServices'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '409':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Conflict: A service discovery background job is currently
            running'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '302':
          content: {}
          description: 'Found: The service discovery background job has been initialized.
            Redirecting to the ''Show discovery service background job'' endpoint.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainObject'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Execute a service discovery on a host
      tags:
      - Service discovery
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/domain-types/service_discovery_run/actions/start/invoke\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={'host_name': 'example.com', 'mode': 'refresh'},\n   \
          \ allow_redirects=True,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\n\
          elif resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/service_discovery_run/actions/start/invoke\"\
          ,\n    method=\"POST\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \        \"Content-Type\": 'application/json',  # (required) A header specifying\
          \ which type of content is in the request/response body.\n    },\n    data=json.dumps({'host_name':\
          \ 'example.com', 'mode': 'refresh'}).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp POST \"$API_URL/domain-types/service_discovery_run/actions/start/invoke\"\
          \ \\\n    --follow \\\n    --all \\\n    \"Authorization: Bearer $USERNAME\
          \ $PASSWORD\" \\\n    \"Accept: application/json\" \\\n    'Content-Type:application/json'\
          \ \\\n    host_name='example.com' \\\n    mode='refresh' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request POST\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"host_name\": \"example.com\",\n       \
          \   \"mode\": \"refresh\"\n        }' \\\n    \"$API_URL/domain-types/service_discovery_run/actions/start/invoke\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /objects/host/{host_name}/actions/discover_services/invoke:
    post:
      deprecated: true
      description: "`WARNING`: This URL is deprecated, see [Werk 14538](https://checkmk.com/werk/14538)\
        \ for more details.\n\nThis endpoint requires the following permissions: \n\
        \ * All of:\n   * `wato.edit`: This permission is needed in order to make\
        \ any changes or perform any actions at all. Without this permission, the\
        \ user is only able to view data, and that only in modules he has explicit\
        \ permissions for.\n   * Optionally:\n     * `wato.service_discovery_to_undecided`:\
        \ Service discovery: Move to undecided services\n   * Optionally:\n     *\
        \ `wato.service_discovery_to_monitored`: Service discovery: Move to monitored\
        \ services\n   * Optionally:\n     * `wato.service_discovery_to_ignored`:\
        \ Service discovery: Disabled services\n   * Optionally:\n     * `wato.service_discovery_to_removed`:\
        \ Service discovery: Remove services\n   * Optionally:\n     * `wato.services`:\
        \ Do inventory and service configuration on existing hosts.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.service_discovery.execute-14538
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      - description: A hostname.
        in: path
        name: host_name
        required: true
        schema:
          example: example.com
          pattern: '[-0-9a-zA-Z_.]+'
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscoverServicesDeprecated'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: Host could not be found'
        '409':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Conflict: A service discovery background job is currently
            running'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '302':
          content: {}
          description: 'Found: The service discovery background job has been initialized.
            Redirecting to the ''Show discovery service background job'' endpoint.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainObject'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Execute a service discovery on a host
      tags:
      - Service discovery
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/objects/host/example.com/actions/discover_services/invoke\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={'mode': 'refresh'},\n    allow_redirects=True,\n)\nif\
          \ resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/host/example.com/actions/discover_services/invoke\"\
          ,\n    method=\"POST\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \        \"Content-Type\": 'application/json',  # (required) A header specifying\
          \ which type of content is in the request/response body.\n    },\n    data=json.dumps({'mode':\
          \ 'refresh'}).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp POST \"$API_URL/objects/host/example.com/actions/discover_services/invoke\"\
          \ \\\n    --follow \\\n    --all \\\n    \"Authorization: Bearer $USERNAME\
          \ $PASSWORD\" \\\n    \"Accept: application/json\" \\\n    'Content-Type:application/json'\
          \ \\\n    mode='refresh' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request POST\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"mode\": \"refresh\"\n        }' \\\n  \
          \  \"$API_URL/objects/host/example.com/actions/discover_services/invoke\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/discovery_run/actions/bulk-discovery-start/invoke:
    post:
      description: ''
      operationId: cmk.gui.plugins.openapi.endpoints.service_discovery.execute_bulk_discovery
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkDiscovery'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '409':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Conflict: A bulk discovery job is already active'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoveryBackgroundJobStatusObject'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Start a bulk discovery job
      tags:
      - Service discovery
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/domain-types/discovery_run/actions/bulk-discovery-start/invoke\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={\n        'hostnames': ['example', 'sample'],\n     \
          \   'mode': 'refresh',\n        'do_full_scan': True,\n        'bulk_size':\
          \ 10,\n        'ignore_errors': True\n    },\n)\nif resp.status_code ==\
          \ 200:\n    pprint.pprint(resp.json())\nelif resp.status_code == 204:\n\
          \    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/discovery_run/actions/bulk-discovery-start/invoke\"\
          ,\n    method=\"POST\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \        \"Content-Type\": 'application/json',  # (required) A header specifying\
          \ which type of content is in the request/response body.\n    },\n    data=json.dumps({\n\
          \        'hostnames': ['example', 'sample'],\n        'mode': 'refresh',\n\
          \        'do_full_scan': True,\n        'bulk_size': 10,\n        'ignore_errors':\
          \ True\n    }).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp POST \"$API_URL/domain-types/discovery_run/actions/bulk-discovery-start/invoke\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    hostnames='['example',\
          \ 'sample']' \\\n    mode='refresh' \\\n    do_full_scan='True' \\\n   \
          \ bulk_size='10' \\\n    ignore_errors='True' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request POST\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"bulk_size\": 10,\n          \"do_full_scan\"\
          : true,\n          \"hostnames\": [\n            \"example\",\n        \
          \    \"sample\"\n          ],\n          \"ignore_errors\": true,\n    \
          \      \"mode\": \"refresh\"\n        }' \\\n    \"$API_URL/domain-types/discovery_run/actions/bulk-discovery-start/invoke\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/service_group_config/collections/all:
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * `wato.groups`:\
        \ Access to the modules for managing host and service groups.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.service_group_config.list_groups
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkedValueDomainObjectCollection'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Show all service groups
      tags:
      - Service groups
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/domain-types/service_group_config/collections/all\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/service_group_config/collections/all\",\n\
          \    method=\"GET\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \    },\n)\nresponse = urllib.request.urlopen(request)\nif response.status\
          \ == 200:\n    pprint.pprint(json.loads(response.read()))\nelif response.status\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/domain-types/service_group_config/collections/all\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request GET\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/domain-types/service_group_config/collections/all\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
    post:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.groups`: Access to the modules for managing host and service\
        \ groups.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.service_group_config.create
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputServiceGroup'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainObject'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
            ETag:
              allowEmptyValue: false
              description: The HTTP ETag header for this resource. It identifies the
                current state of the object and needs to be sent along in the "If-Match"
                request-header for subsequent modifications. Please note that the
                actual ETag returned by some endpoints may look different than the
                one shown in this example.
              example: '"a20ceacf346041dc"'
              required: false
              schema:
                type: string
      summary: Create a service group
      tags:
      - Service groups
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/domain-types/service_group_config/collections/all\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={\n        'name': 'windows',\n        'alias': 'Environment\
          \ Sensors'\n    },\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\n\
          elif resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/service_group_config/collections/all\",\n\
          \    method=\"POST\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \        \"Content-Type\": 'application/json',  # (required) A header specifying\
          \ which type of content is in the request/response body.\n    },\n    data=json.dumps({\n\
          \        'name': 'windows',\n        'alias': 'Environment Sensors'\n  \
          \  }).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp POST \"$API_URL/domain-types/service_group_config/collections/all\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    name='windows'\
          \ \\\n    alias='Environment Sensors' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request POST\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"alias\": \"Environment Sensors\",\n   \
          \       \"name\": \"windows\"\n        }' \\\n    \"$API_URL/domain-types/service_group_config/collections/all\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /objects/service_group_config/{name}:
    delete:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.groups`: Access to the modules for managing host and service\
        \ groups.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.service_group_config.delete
      parameters:
      - description: A name used as an identifier. Can be of arbitrary (sensible)
          length.
        in: path
        name: name
        required: true
        schema:
          example: pathname
          pattern: '[a-zA-Z0-9][a-zA-Z0-9_-]+'
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '204':
          content: {}
          description: 'No Content: Operation done successfully. No further output.'
      summary: Delete a service group
      tags:
      - Service groups
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.delete(\n    f\"{API_URL}/objects/service_group_config/pathname\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/service_group_config/pathname\",\n    method=\"\
          DELETE\",\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME}\
          \ {PASSWORD}\",\n        \"Accept\": \"application/json\",\n    },\n)\n\
          response = urllib.request.urlopen(request)\nif response.status == 200:\n\
          \    pprint.pprint(json.loads(response.read()))\nelif response.status ==\
          \ 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp DELETE \"$API_URL/objects/service_group_config/pathname\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request DELETE\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/objects/service_group_config/pathname\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * `wato.groups`:\
        \ Access to the modules for managing host and service groups.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.service_group_config.show_group
      parameters:
      - description: A name used as an identifier. Can be of arbitrary (sensible)
          length.
        in: path
        name: name
        required: true
        schema:
          example: pathname
          pattern: '[a-zA-Z0-9][a-zA-Z0-9_-]+'
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceGroup'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
            ETag:
              allowEmptyValue: false
              description: The HTTP ETag header for this resource. It identifies the
                current state of the object and needs to be sent along in the "If-Match"
                request-header for subsequent modifications. Please note that the
                actual ETag returned by some endpoints may look different than the
                one shown in this example.
              example: '"a20ceacf346041dc"'
              required: false
              schema:
                type: string
      summary: Show a service group
      tags:
      - Service groups
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/objects/service_group_config/pathname\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/service_group_config/pathname\",\n    method=\"\
          GET\",\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n    },\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/objects/service_group_config/pathname\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request GET\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/objects/service_group_config/pathname\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
    put:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.groups`: Access to the modules for managing host and service\
        \ groups.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.service_group_config.update
      parameters:
      - description: The value of the, to be modified, object's ETag header. You can
          get this value by displaying the object it individually. To update this
          object the currently stored ETag needs to be the same as the one sent. The
          content of the ETag can potentially be anything and should be treated as
          semantically opaque.
        in: header
        name: If-Match
        required: true
        schema:
          example: '"a20ceacf346041dc"'
          type: string
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      - description: A name used as an identifier. Can be of arbitrary (sensible)
          length.
        in: path
        name: name
        required: true
        schema:
          example: pathname
          pattern: '[a-zA-Z0-9][a-zA-Z0-9_-]+'
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroup'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceGroup'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
            ETag:
              allowEmptyValue: false
              description: The HTTP ETag header for this resource. It identifies the
                current state of the object and needs to be sent along in the "If-Match"
                request-header for subsequent modifications. Please note that the
                actual ETag returned by some endpoints may look different than the
                one shown in this example.
              example: '"a20ceacf346041dc"'
              required: false
              schema:
                type: string
        '412':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Precondition Failed: The value of the If-Match header doesn''t
            match the object''s ETag.'
        '428':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Precondition Required: The required If-Match header is missing.'
      summary: Update a service group
      tags:
      - Service groups
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.put(\n    f\"{API_URL}/objects/service_group_config/pathname\"\
          ,\n    headers={\n        \"If-Match\": '\"a20ceacf346041dc\"',  # (required)\
          \ The value of the, to be modified, object's ETag header.\n        \"Content-Type\"\
          : 'application/json',  # (required) A header specifying which type of content\
          \ is in the request/response body.\n    },\n    json={'alias': 'Example\
          \ Group'},\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\n\
          elif resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/service_group_config/pathname\",\n    method=\"\
          PUT\",\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n        \"If-Match\": '\"\
          a20ceacf346041dc\"',  # (required) The value of the, to be modified, object's\
          \ ETag header.\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    data=json.dumps({'alias': 'Example Group'}).encode('utf-8'),\n\
          )\nresponse = urllib.request.urlopen(request)\nif response.status == 200:\n\
          \    pprint.pprint(json.loads(response.read()))\nelif response.status ==\
          \ 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp PUT \"$API_URL/objects/service_group_config/pathname\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'If-Match:\"a20ceacf346041dc\"' \\\n    'Content-Type:application/json'\
          \ \\\n    alias='Example Group' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request PUT\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"If-Match: \"a20ceacf346041dc\"\"\
          \ \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\n\
          \          \"alias\": \"Example Group\"\n        }' \\\n    \"$API_URL/objects/service_group_config/pathname\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/service_group_config/actions/bulk-update/invoke:
    put:
      description: "Please be aware that when doing bulk updates, it is not possible\
        \ to prevent the\n[Updating Values](\"lost update problem\"), which is normally\
        \ prevented by the ETag locking\nmechanism. Use at your own risk.This endpoint\
        \ requires the following permissions: \n * All of:\n   * `wato.edit`: This\
        \ permission is needed in order to make any changes or perform any actions\
        \ at all. Without this permission, the user is only able to view data, and\
        \ that only in modules he has explicit permissions for.\n   * `wato.groups`:\
        \ Access to the modules for managing host and service groups.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.service_group_config.bulk_update
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkUpdateServiceGroup'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainObjectCollection'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Bulk update service groups
      tags:
      - Service groups
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.put(\n    f\"{API_URL}/domain-types/service_group_config/actions/bulk-update/invoke\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={\n        'entries': [{\n            'name': 'windows',\n\
          \            'attributes': {\n                'alias': 'Windows Servers'\n\
          \            }\n        }]\n    },\n)\nif resp.status_code == 200:\n   \
          \ pprint.pprint(resp.json())\nelif resp.status_code == 204:\n    print(\"\
          Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/service_group_config/actions/bulk-update/invoke\"\
          ,\n    method=\"PUT\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \        \"Content-Type\": 'application/json',  # (required) A header specifying\
          \ which type of content is in the request/response body.\n    },\n    data=json.dumps({\n\
          \        'entries': [{\n            'name': 'windows',\n            'attributes':\
          \ {\n                'alias': 'Windows Servers'\n            }\n       \
          \ }]\n    }).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp PUT \"$API_URL/domain-types/service_group_config/actions/bulk-update/invoke\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    entries='[{'name':\
          \ 'windows', 'attributes': {'alias': 'Windows Servers'}}]' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request PUT\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"entries\": [\n            {\n         \
          \     \"attributes\": {\n                \"alias\": \"Windows Servers\"\n\
          \              },\n              \"name\": \"windows\"\n            }\n\
          \          ]\n        }' \\\n    \"$API_URL/domain-types/service_group_config/actions/bulk-update/invoke\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/service_group_config/actions/bulk-create/invoke:
    post:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.groups`: Access to the modules for managing host and service\
        \ groups.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.service_group_config.bulk_create
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkInputServiceGroup'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainObjectCollection'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Bulk create service groups
      tags:
      - Service groups
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/domain-types/service_group_config/actions/bulk-create/invoke\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={\n        'entries': [{\n            'name': 'environment',\n\
          \            'alias': 'Environment Sensors'\n        }]\n    },\n)\nif resp.status_code\
          \ == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code == 204:\n\
          \    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/service_group_config/actions/bulk-create/invoke\"\
          ,\n    method=\"POST\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \        \"Content-Type\": 'application/json',  # (required) A header specifying\
          \ which type of content is in the request/response body.\n    },\n    data=json.dumps({\n\
          \        'entries': [{\n            'name': 'environment',\n           \
          \ 'alias': 'Environment Sensors'\n        }]\n    }).encode('utf-8'),\n\
          )\nresponse = urllib.request.urlopen(request)\nif response.status == 200:\n\
          \    pprint.pprint(json.loads(response.read()))\nelif response.status ==\
          \ 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp POST \"$API_URL/domain-types/service_group_config/actions/bulk-create/invoke\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    entries='[{'name':\
          \ 'environment', 'alias': 'Environment Sensors'}]' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request POST\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"entries\": [\n            {\n         \
          \     \"alias\": \"Environment Sensors\",\n              \"name\": \"environment\"\
          \n            }\n          ]\n        }' \\\n    \"$API_URL/domain-types/service_group_config/actions/bulk-create/invoke\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/service_group_config/actions/bulk-delete/invoke:
    post:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.groups`: Access to the modules for managing host and service\
        \ groups.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.service_group_config.bulk_delete
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkDeleteServiceGroup'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '204':
          content: {}
          description: 'No Content: Operation done successfully. No further output.'
      summary: Bulk delete service groups
      tags:
      - Service groups
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/domain-types/service_group_config/actions/bulk-delete/invoke\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={'entries': ['windows', 'panels']},\n)\nif resp.status_code\
          \ == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code == 204:\n\
          \    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/service_group_config/actions/bulk-delete/invoke\"\
          ,\n    method=\"POST\",\n    headers={\n        \"Authorization\": f\"Bearer\
          \ {USERNAME} {PASSWORD}\",\n        \"Accept\": \"application/json\",\n\
          \        \"Content-Type\": 'application/json',  # (required) A header specifying\
          \ which type of content is in the request/response body.\n    },\n    data=json.dumps({'entries':\
          \ ['windows', 'panels']}).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp POST \"$API_URL/domain-types/service_group_config/actions/bulk-delete/invoke\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    entries='['windows',\
          \ 'panels']' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request POST\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"entries\": [\n            \"windows\",\n\
          \            \"panels\"\n          ]\n        }' \\\n    \"$API_URL/domain-types/service_group_config/actions/bulk-delete/invoke\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /objects/time_period/{name}:
    delete:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.timeperiods`: Access to the module <i>Timeperiods</i>\n"
      operationId: cmk.gui.plugins.openapi.endpoints.time_period.delete
      parameters:
      - description: The value of the, to be modified, object's ETag header. You can
          get this value by displaying the object it individually. To update this
          object the currently stored ETag needs to be the same as the one sent. The
          content of the ETag can potentially be anything and should be treated as
          semantically opaque.
        in: header
        name: If-Match
        required: true
        schema:
          example: '"a20ceacf346041dc"'
          type: string
      - description: A name used as an identifier. Can be of arbitrary (sensible)
          length.
        in: path
        name: name
        required: true
        schema:
          example: pathname
          pattern: '[a-zA-Z0-9][a-zA-Z0-9_-]+'
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '204':
          content: {}
          description: 'No Content: Operation done successfully. No further output.'
        '412':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Precondition Failed: The value of the If-Match header doesn''t
            match the object''s ETag.'
        '428':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Precondition Required: The required If-Match header is missing.'
      summary: Delete a time period
      tags:
      - Time periods
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.delete(\n    f\"{API_URL}/objects/time_period/pathname\"\
          ,\n    headers={\n        \"If-Match\": '\"a20ceacf346041dc\"',  # (required)\
          \ The value of the, to be modified, object's ETag header.\n    },\n)\nif\
          \ resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code\
          \ == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/time_period/pathname\",\n    method=\"DELETE\"\
          ,\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n        \"If-Match\": '\"\
          a20ceacf346041dc\"',  # (required) The value of the, to be modified, object's\
          \ ETag header.\n    },\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp DELETE \"$API_URL/objects/time_period/pathname\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'If-Match:\"a20ceacf346041dc\"' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request DELETE\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"If-Match: \"a20ceacf346041dc\"\"\
          \ \\\n    \"$API_URL/objects/time_period/pathname\")\n\nresp=$( echo \"\
          ${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo \"${out}\" | awk\
          \ -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation, please\
          \ install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"$resp\"\n\
          \nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n    echo\
          \ \"Request error\"\n    exit 1\nfi"
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * `wato.timeperiods`:\
        \ Access to the module <i>Timeperiods</i>\n"
      operationId: cmk.gui.plugins.openapi.endpoints.time_period.show_time_period
      parameters:
      - description: A name used as an identifier. Can be of arbitrary (sensible)
          length.
        in: path
        name: name
        required: true
        schema:
          example: pathname
          pattern: '[a-zA-Z0-9][a-zA-Z0-9_-]+'
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcreteTimePeriod'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Show a time period
      tags:
      - Time periods
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/objects/time_period/pathname\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/time_period/pathname\",\n    method=\"GET\",\n\
          \    headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n    },\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/objects/time_period/pathname\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request GET\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/objects/time_period/pathname\")\n\
          \nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
    put:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.timeperiods`: Access to the module <i>Timeperiods</i>\n"
      operationId: cmk.gui.plugins.openapi.endpoints.time_period.update_timeperiod
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      - description: A name used as an identifier. Can be of arbitrary (sensible)
          length.
        in: path
        name: name
        required: true
        schema:
          example: pathname
          pattern: '[a-zA-Z0-9][a-zA-Z0-9_-]+'
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTimePeriod'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '405':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Method Not Allowed: Method not allowed: This request is only
            allowed with other HTTP methods'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '204':
          content: {}
          description: 'No Content: Operation done successfully. No further output.'
      summary: Update a time period
      tags:
      - Time periods
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.put(\n    f\"{API_URL}/objects/time_period/pathname\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={\n        'alias': 'alias',\n        'active_time_ranges':\
          \ [{\n            'day': 'monday',\n            'time_ranges': [{\n    \
          \            'start': '12:00',\n                'end': '14:00'\n       \
          \     }]\n        }],\n        'exceptions': [{\n            'date': '2020-01-01',\n\
          \            'time_ranges': [{\n                'start': '14:00',\n    \
          \            'end': '18:00'\n            }]\n        }]\n    },\n)\nif resp.status_code\
          \ == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code == 204:\n\
          \    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/time_period/pathname\",\n    method=\"PUT\",\n\
          \    headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n        \"Content-Type\":\
          \ 'application/json',  # (required) A header specifying which type of content\
          \ is in the request/response body.\n    },\n    data=json.dumps({\n    \
          \    'alias': 'alias',\n        'active_time_ranges': [{\n            'day':\
          \ 'monday',\n            'time_ranges': [{\n                'start': '12:00',\n\
          \                'end': '14:00'\n            }]\n        }],\n        'exceptions':\
          \ [{\n            'date': '2020-01-01',\n            'time_ranges': [{\n\
          \                'start': '14:00',\n                'end': '18:00'\n   \
          \         }]\n        }]\n    }).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp PUT \"$API_URL/objects/time_period/pathname\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    alias='alias'\
          \ \\\n    active_time_ranges='[{'day': 'monday', 'time_ranges': [{'start':\
          \ '12:00', 'end': '14:00'}]}]' \\\n    exceptions='[{'date': '2020-01-01',\
          \ 'time_ranges': [{'start': '14:00', 'end': '18:00'}]}]' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request PUT\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"active_time_ranges\": [\n            {\n\
          \              \"day\": \"monday\",\n              \"time_ranges\": [\n\
          \                {\n                  \"end\": \"14:00\",\n            \
          \      \"start\": \"12:00\"\n                }\n              ]\n      \
          \      }\n          ],\n          \"alias\": \"alias\",\n          \"exceptions\"\
          : [\n            {\n              \"date\": \"2020-01-01\",\n          \
          \    \"time_ranges\": [\n                {\n                  \"end\": \"\
          18:00\",\n                  \"start\": \"14:00\"\n                }\n  \
          \            ]\n            }\n          ]\n        }' \\\n    \"$API_URL/objects/time_period/pathname\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/time_period/collections/all:
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * `wato.timeperiods`:\
        \ Access to the module <i>Timeperiods</i>\n"
      operationId: cmk.gui.plugins.openapi.endpoints.time_period.list_time_periods
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainObjectCollection'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Show all time periods
      tags:
      - Time periods
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/domain-types/time_period/collections/all\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/time_period/collections/all\",\n    method=\"\
          GET\",\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n    },\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/domain-types/time_period/collections/all\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request GET\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/domain-types/time_period/collections/all\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
    post:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.timeperiods`: Access to the module <i>Timeperiods</i>\n"
      operationId: cmk.gui.plugins.openapi.endpoints.time_period.create_timeperiod
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputTimePeriod'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainObject'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
            ETag:
              allowEmptyValue: false
              description: The HTTP ETag header for this resource. It identifies the
                current state of the object and needs to be sent along in the "If-Match"
                request-header for subsequent modifications. Please note that the
                actual ETag returned by some endpoints may look different than the
                one shown in this example.
              example: '"a20ceacf346041dc"'
              required: false
              schema:
                type: string
      summary: Create a time period
      tags:
      - Time periods
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/domain-types/time_period/collections/all\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={\n        'name': 'first',\n        'alias': 'alias',\n\
          \        'active_time_ranges': [{\n            'day': 'monday',\n      \
          \      'time_ranges': [{\n                'start': '12:00',\n          \
          \      'end': '14:00'\n            }]\n        }],\n        'exceptions':\
          \ [{\n            'date': '2020-01-01',\n            'time_ranges': [{\n\
          \                'start': '14:00',\n                'end': '18:00'\n   \
          \         }]\n        }],\n        'exclude': ['alias']\n    },\n)\nif resp.status_code\
          \ == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code == 204:\n\
          \    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/time_period/collections/all\",\n    method=\"\
          POST\",\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME}\
          \ {PASSWORD}\",\n        \"Accept\": \"application/json\",\n        \"Content-Type\"\
          : 'application/json',  # (required) A header specifying which type of content\
          \ is in the request/response body.\n    },\n    data=json.dumps({\n    \
          \    'name': 'first',\n        'alias': 'alias',\n        'active_time_ranges':\
          \ [{\n            'day': 'monday',\n            'time_ranges': [{\n    \
          \            'start': '12:00',\n                'end': '14:00'\n       \
          \     }]\n        }],\n        'exceptions': [{\n            'date': '2020-01-01',\n\
          \            'time_ranges': [{\n                'start': '14:00',\n    \
          \            'end': '18:00'\n            }]\n        }],\n        'exclude':\
          \ ['alias']\n    }).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp POST \"$API_URL/domain-types/time_period/collections/all\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    name='first'\
          \ \\\n    alias='alias' \\\n    active_time_ranges='[{'day': 'monday', 'time_ranges':\
          \ [{'start': '12:00', 'end': '14:00'}]}]' \\\n    exceptions='[{'date':\
          \ '2020-01-01', 'time_ranges': [{'start': '14:00', 'end': '18:00'}]}]' \\\
          \n    exclude='['alias']' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request POST\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"active_time_ranges\": [\n            {\n\
          \              \"day\": \"monday\",\n              \"time_ranges\": [\n\
          \                {\n                  \"end\": \"14:00\",\n            \
          \      \"start\": \"12:00\"\n                }\n              ]\n      \
          \      }\n          ],\n          \"alias\": \"alias\",\n          \"exceptions\"\
          : [\n            {\n              \"date\": \"2020-01-01\",\n          \
          \    \"time_ranges\": [\n                {\n                  \"end\": \"\
          18:00\",\n                  \"start\": \"14:00\"\n                }\n  \
          \            ]\n            }\n          ],\n          \"exclude\": [\n\
          \            \"alias\"\n          ],\n          \"name\": \"first\"\n  \
          \      }' \\\n    \"$API_URL/domain-types/time_period/collections/all\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /objects/user_config/{username}:
    delete:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.users`: This permission is needed for the modules <b>Users</b>,\
        \ <b>Roles</b> and <b>Contact Groups</b>\n"
      operationId: cmk.gui.plugins.openapi.endpoints.user_config.delete_user
      parameters:
      - description: A username.
        in: path
        name: username
        required: true
        schema:
          example: user
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '204':
          content: {}
          description: 'No Content: Operation done successfully. No further output.'
      summary: Delete a user
      tags:
      - Users
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.delete(\n    f\"{API_URL}/objects/user_config/user\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/user_config/user\",\n    method=\"DELETE\",\n\
          \    headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n    },\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp DELETE \"$API_URL/objects/user_config/user\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request DELETE\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/objects/user_config/user\")\n\n\
          resp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo \"\
          ${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * `wato.users`:\
        \ This permission is needed for the modules <b>Users</b>, <b>Roles</b> and\
        \ <b>Contact Groups</b>\n"
      operationId: cmk.gui.plugins.openapi.endpoints.user_config.show_user
      parameters:
      - description: A username.
        in: path
        name: username
        required: true
        schema:
          example: user
          type: string
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserObject'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
            ETag:
              allowEmptyValue: false
              description: The HTTP ETag header for this resource. It identifies the
                current state of the object and needs to be sent along in the "If-Match"
                request-header for subsequent modifications. Please note that the
                actual ETag returned by some endpoints may look different than the
                one shown in this example.
              example: '"a20ceacf346041dc"'
              required: false
              schema:
                type: string
      summary: Show an user
      tags:
      - Users
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/objects/user_config/user\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/user_config/user\",\n    method=\"GET\",\n   \
          \ headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n    },\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/objects/user_config/user\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request GET\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/objects/user_config/user\")\n\n\
          resp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo \"\
          ${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
    put:
      description: "\n\nThis endpoint requires the following permissions: \n * All\
        \ of:\n   * `wato.edit`: This permission is needed in order to make any changes\
        \ or perform any actions at all. Without this permission, the user is only\
        \ able to view data, and that only in modules he has explicit permissions\
        \ for.\n   * `wato.users`: This permission is needed for the modules <b>Users</b>,\
        \ <b>Roles</b> and <b>Contact Groups</b>\n"
      operationId: cmk.gui.plugins.openapi.endpoints.user_config.edit_user
      parameters:
      - description: The value of the, to be modified, object's ETag header. You can
          get this value by displaying the object it individually. To update this
          object the currently stored ETag needs to be the same as the one sent. The
          content of the ETag can potentially be anything and should be treated as
          semantically opaque.
        in: header
        name: If-Match
        required: true
        schema:
          example: '"a20ceacf346041dc"'
          type: string
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      - description: A username.
        in: path
        name: username
        required: true
        schema:
          example: user
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Found: The requested object has not been found.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserObject'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
            ETag:
              allowEmptyValue: false
              description: The HTTP ETag header for this resource. It identifies the
                current state of the object and needs to be sent along in the "If-Match"
                request-header for subsequent modifications. Please note that the
                actual ETag returned by some endpoints may look different than the
                one shown in this example.
              example: '"a20ceacf346041dc"'
              required: false
              schema:
                type: string
        '412':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Precondition Failed: The value of the If-Match header doesn''t
            match the object''s ETag.'
        '428':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Precondition Required: The required If-Match header is missing.'
      summary: Edit an user
      tags:
      - Users
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.put(\n    f\"{API_URL}/objects/user_config/user\"\
          ,\n    headers={\n        \"If-Match\": '\"a20ceacf346041dc\"',  # (required)\
          \ The value of the, to be modified, object's ETag header.\n        \"Content-Type\"\
          : 'application/json',  # (required) A header specifying which type of content\
          \ is in the request/response body.\n    },\n    json={\n        'fullname':\
          \ 'Mathias Kettner',\n        'auth_option': {\n            'auth_type':\
          \ 'password',\n            'password': 'password'\n        },\n        'disable_login':\
          \ False,\n        'contact_options': {\n            'email': 'user@example.com'\n\
          \        },\n        'pager_address': '',\n        'idle_timeout': {},\n\
          \        'roles': ['user'],\n        'authorized_sites': ['heute'],\n  \
          \      'contactgroups': ['all'],\n        'disable_notifications': {\n \
          \           'disabled': False\n        },\n        'language': 'en',\n \
          \       'interface_options': {\n            'interface_theme': 'dark'\n\
          \        }\n    },\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\n\
          elif resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/objects/user_config/user\",\n    method=\"PUT\",\n   \
          \ headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n        \"If-Match\": '\"\
          a20ceacf346041dc\"',  # (required) The value of the, to be modified, object's\
          \ ETag header.\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    data=json.dumps({\n        'fullname': 'Mathias Kettner',\n\
          \        'auth_option': {\n            'auth_type': 'password',\n      \
          \      'password': 'password'\n        },\n        'disable_login': False,\n\
          \        'contact_options': {\n            'email': 'user@example.com'\n\
          \        },\n        'pager_address': '',\n        'idle_timeout': {},\n\
          \        'roles': ['user'],\n        'authorized_sites': ['heute'],\n  \
          \      'contactgroups': ['all'],\n        'disable_notifications': {\n \
          \           'disabled': False\n        },\n        'language': 'en',\n \
          \       'interface_options': {\n            'interface_theme': 'dark'\n\
          \        }\n    }).encode('utf-8'),\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp PUT \"$API_URL/objects/user_config/user\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'If-Match:\"a20ceacf346041dc\"' \\\n    'Content-Type:application/json'\
          \ \\\n    fullname='Mathias Kettner' \\\n    auth_option='{'auth_type':\
          \ 'password', 'password': 'password'}' \\\n    disable_login='False' \\\n\
          \    contact_options='{'email': 'user@example.com'}' \\\n    pager_address=''\
          \ \\\n    idle_timeout='{}' \\\n    roles='['user']' \\\n    authorized_sites='['heute']'\
          \ \\\n    contactgroups='['all']' \\\n    disable_notifications='{'disabled':\
          \ False}' \\\n    language='en' \\\n    interface_options='{'interface_theme':\
          \ 'dark'}' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request PUT\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"If-Match: \"a20ceacf346041dc\"\"\
          \ \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\n\
          \          \"auth_option\": {\n            \"auth_type\": \"password\",\n\
          \            \"password\": \"password\"\n          },\n          \"authorized_sites\"\
          : [\n            \"heute\"\n          ],\n          \"contact_options\"\
          : {\n            \"email\": \"user@example.com\"\n          },\n       \
          \   \"contactgroups\": [\n            \"all\"\n          ],\n          \"\
          disable_login\": false,\n          \"disable_notifications\": {\n      \
          \      \"disabled\": false\n          },\n          \"fullname\": \"Mathias\
          \ Kettner\",\n          \"idle_timeout\": {},\n          \"interface_options\"\
          : {\n            \"interface_theme\": \"dark\"\n          },\n         \
          \ \"language\": \"en\",\n          \"pager_address\": \"\",\n          \"\
          roles\": [\n            \"user\"\n          ]\n        }' \\\n    \"$API_URL/objects/user_config/user\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /domain-types/user_config/collections/all:
    get:
      description: "\n\nThis endpoint requires the following permissions: \n * `wato.users`:\
        \ This permission is needed for the modules <b>Users</b>, <b>Roles</b> and\
        \ <b>Contact Groups</b>\n"
      operationId: cmk.gui.plugins.openapi.endpoints.user_config.list_users
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCollection'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Show all users
      tags:
      - Users
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/domain-types/user_config/collections/all\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/user_config/collections/all\",\n    method=\"\
          GET\",\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\"\
          ,\n        \"Accept\": \"application/json\",\n    },\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/domain-types/user_config/collections/all\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request GET\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/domain-types/user_config/collections/all\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
    post:
      description: "You can pass custom attributes you defined directly in the top\
        \ level JSON object of the request.This endpoint requires the following permissions:\
        \ \n * All of:\n   * `wato.edit`: This permission is needed in order to make\
        \ any changes or perform any actions at all. Without this permission, the\
        \ user is only able to view data, and that only in modules he has explicit\
        \ permissions for.\n   * `wato.users`: This permission is needed for the modules\
        \ <b>Users</b>, <b>Roles</b> and <b>Contact Groups</b>\n   * Optionally:\n\
        \     * `wato.groups`: Access to the modules for managing host and service\
        \ groups.\n"
      operationId: cmk.gui.plugins.openapi.endpoints.user_config.create_user
      parameters:
      - description: A header specifying which type of content is in the request/response
          body. This is required when sending encoded data in a POST/PUT body. When
          the request body is empty, this header should not be sent.
        in: header
        name: Content-Type
        required: true
        schema:
          example: application/json
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
        required: true
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Forbidden: Configuration via WATO is disabled.'
        '415':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Unsupported Media Type: The submitted content-type is not
            supported.'
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Bad Request: Parameter or validation failure.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserObject'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
            ETag:
              allowEmptyValue: false
              description: The HTTP ETag header for this resource. It identifies the
                current state of the object and needs to be sent along in the "If-Match"
                request-header for subsequent modifications. Please note that the
                actual ETag returned by some endpoints may look different than the
                one shown in this example.
              example: '"a20ceacf346041dc"'
              required: false
              schema:
                type: string
      summary: Create a user
      tags:
      - Users
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.post(\n    f\"{API_URL}/domain-types/user_config/collections/all\"\
          ,\n    headers={\n        \"Content-Type\": 'application/json',  # (required)\
          \ A header specifying which type of content is in the request/response body.\n\
          \    },\n    json={\n        'username': 'cmkuser',\n        'fullname':\
          \ 'Mathias Kettner',\n        'auth_option': {\n            'auth_type':\
          \ 'password',\n            'password': 'password'\n        },\n        'disable_login':\
          \ False,\n        'contact_options': {\n            'email': 'user@example.com'\n\
          \        },\n        'pager_address': '',\n        'idle_timeout': {\n \
          \           'option': 'global'\n        },\n        'roles': ['user'],\n\
          \        'authorized_sites': ['heute'],\n        'contactgroups': ['all'],\n\
          \        'disable_notifications': {\n            'disable': False\n    \
          \    },\n        'language': 'en',\n        'interface_options': {\n   \
          \         'interface_theme': 'dark'\n        }\n    },\n)\nif resp.status_code\
          \ == 200:\n    pprint.pprint(resp.json())\nelif resp.status_code == 204:\n\
          \    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/domain-types/user_config/collections/all\",\n    method=\"\
          POST\",\n    headers={\n        \"Authorization\": f\"Bearer {USERNAME}\
          \ {PASSWORD}\",\n        \"Accept\": \"application/json\",\n        \"Content-Type\"\
          : 'application/json',  # (required) A header specifying which type of content\
          \ is in the request/response body.\n    },\n    data=json.dumps({\n    \
          \    'username': 'cmkuser',\n        'fullname': 'Mathias Kettner',\n  \
          \      'auth_option': {\n            'auth_type': 'password',\n        \
          \    'password': 'password'\n        },\n        'disable_login': False,\n\
          \        'contact_options': {\n            'email': 'user@example.com'\n\
          \        },\n        'pager_address': '',\n        'idle_timeout': {\n \
          \           'option': 'global'\n        },\n        'roles': ['user'],\n\
          \        'authorized_sites': ['heute'],\n        'contactgroups': ['all'],\n\
          \        'disable_notifications': {\n            'disable': False\n    \
          \    },\n        'language': 'en',\n        'interface_options': {\n   \
          \         'interface_theme': 'dark'\n        }\n    }).encode('utf-8'),\n\
          )\nresponse = urllib.request.urlopen(request)\nif response.status == 200:\n\
          \    pprint.pprint(json.loads(response.read()))\nelif response.status ==\
          \ 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp POST \"$API_URL/domain-types/user_config/collections/all\"\
          \ \\\n    \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    \"Accept:\
          \ application/json\" \\\n    'Content-Type:application/json' \\\n    username='cmkuser'\
          \ \\\n    fullname='Mathias Kettner' \\\n    auth_option='{'auth_type':\
          \ 'password', 'password': 'password'}' \\\n    disable_login='False' \\\n\
          \    contact_options='{'email': 'user@example.com'}' \\\n    pager_address=''\
          \ \\\n    idle_timeout='{'option': 'global'}' \\\n    roles='['user']' \\\
          \n    authorized_sites='['heute']' \\\n    contactgroups='['all']' \\\n\
          \    disable_notifications='{'disable': False}' \\\n    language='en' \\\
          \n    interface_options='{'interface_theme': 'dark'}' \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request POST\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    --header \"Content-Type: application/json\"\
          \ \\\n    --data '{\n          \"auth_option\": {\n            \"auth_type\"\
          : \"password\",\n            \"password\": \"password\"\n          },\n\
          \          \"authorized_sites\": [\n            \"heute\"\n          ],\n\
          \          \"contact_options\": {\n            \"email\": \"user@example.com\"\
          \n          },\n          \"contactgroups\": [\n            \"all\"\n  \
          \        ],\n          \"disable_login\": false,\n          \"disable_notifications\"\
          : {\n            \"disable\": false\n          },\n          \"fullname\"\
          : \"Mathias Kettner\",\n          \"idle_timeout\": {\n            \"option\"\
          : \"global\"\n          },\n          \"interface_options\": {\n       \
          \     \"interface_theme\": \"dark\"\n          },\n          \"language\"\
          : \"en\",\n          \"pager_address\": \"\",\n          \"roles\": [\n\
          \            \"user\"\n          ],\n          \"username\": \"cmkuser\"\
          \n        }' \\\n    \"$API_URL/domain-types/user_config/collections/all\"\
          )\n\nresp=$( echo \"${out}\" | grep -v \"xxx-status_code\" )\ncode=$( echo\
          \ \"${out}\" | awk -F\"=\" '/^xxx-status_code/ {print $2}')\n\n# For indentation,\
          \ please install 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"\
          $resp\"\n\nif [[ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n\
          \    echo \"Request error\"\n    exit 1\nfi"
  /version:
    get:
      description: ''
      operationId: cmk.gui.plugins.openapi.endpoints.version.search
      responses:
        '406':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: 'Not Acceptable: The requests accept headers can not be satisfied.'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstalledVersions'
          description: 'OK: The operation was done successfully.'
          headers:
            Content-Type:
              allowEmptyValue: false
              description: A header specifying which type of content is in the request/response
                body. This is required when sending encoded data in a POST/PUT body.
                When the request body is empty, this header should not be sent.
              example: application/json
              required: true
              schema:
                type: string
      summary: Display some version information
      tags:
      - Miscellaneous
      x-codeSamples:
      - label: requests
        lang: python
        source: "#!/usr/bin/env python3\nimport pprint\nimport requests\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nsession = requests.session()\n\
          session.headers['Authorization'] = f\"Bearer {USERNAME} {PASSWORD}\"\nsession.headers['Accept']\
          \ = 'application/json'\n\nresp = session.get(\n    f\"{API_URL}/version\"\
          ,\n)\nif resp.status_code == 200:\n    pprint.pprint(resp.json())\nelif\
          \ resp.status_code == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(pprint.pformat(resp.json()))"
      - label: urllib
        lang: python
        source: "#!/usr/bin/env python3\nimport json\nimport urllib.request\n\nHOST_NAME\
          \ = \"localhost\"\nSITE_NAME = \"cmk\"\nAPI_URL = f\"http://{HOST_NAME}/{SITE_NAME}/check_mk/api/1.0\"\
          \n\nUSERNAME = \"automation\"\nPASSWORD = \"test123\"\n\nrequest = urllib.request.Request(\n\
          \    f\"{API_URL}/version\",\n    method=\"GET\",\n    headers={\n     \
          \   \"Authorization\": f\"Bearer {USERNAME} {PASSWORD}\",\n        \"Accept\"\
          : \"application/json\",\n    },\n)\nresponse = urllib.request.urlopen(request)\n\
          if response.status == 200:\n    pprint.pprint(json.loads(response.read()))\n\
          elif response.status == 204:\n    print(\"Done\")\nelse:\n    raise RuntimeError(response.read())"
      - label: httpie
        lang: bash
        source: "#!/bin/bash\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\nAPI_URL=\"\
          http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"automation\"\
          \nPASSWORD=\"test123\"\n\nhttp GET \"$API_URL/version\" \\\n    \"Authorization:\
          \ Bearer $USERNAME $PASSWORD\" \\\n    \"Accept: application/json\" \\"
      - label: curl
        lang: bash
        source: "#!/bin/bash\n\n# NOTE: We recommend all shell users to use the \"\
          httpie\" examples instead.\n\nHOST_NAME=\"localhost\"\nSITE_NAME=\"cmk\"\
          \nAPI_URL=\"http://$HOST_NAME/$SITE_NAME/check_mk/api/1.0\"\n\nUSERNAME=\"\
          automation\"\nPASSWORD=\"test123\"\n\nout=$(\n  curl \\\n    --request GET\
          \ \\\n    --write-out \"\\nxxx-status_code=%{http_code}\\n\" \\\n    --header\
          \ \"Authorization: Bearer $USERNAME $PASSWORD\" \\\n    --header \"Accept:\
          \ application/json\" \\\n    \"$API_URL/version\")\n\nresp=$( echo \"${out}\"\
          \ | grep -v \"xxx-status_code\" )\ncode=$( echo \"${out}\" | awk -F\"=\"\
          \ '/^xxx-status_code/ {print $2}')\n\n# For indentation, please install\
          \ 'jq' (JSON query tool)\necho \"$resp\" | jq\n# echo \"$resp\"\n\nif [[\
          \ $code -lt 400 ]]; then\n    echo \"OK\"\n    exit 0\nelse\n    echo \"\
          Request error\"\n    exit 1\nfi"
security:
- headerAuth: []
- webserverAuth: []
- cookieAuth: []
servers:
- description: 'Site: cmk'
  url: //localhost:8080/cmk/check_mk/api/v0
tags:
- description: 'A problem occurs if a host is not UP or a service ist not OK.

    The acknowledgement of the problem is the indication that the reported issue is
    known and that

    somebody is attending to it.


    You can find an introduction to the acknowledgement of problems in the

    [Checkmk guide](https://docs.checkmk.com/latest/en/basics_ackn.html).'
  name: Acknowledge problems
  x-displayName: Acknowledge problems
- description: 'When changes are activated, Checkmk transfers the current configuration
    status to the ongoing

    monitoring.


    Changes in the configuration - adding a new host, for example - will initially
    have no effect

    on the monitoring. Changes must first be activated, which will bring all changes
    that you have

    accumulated since the last activation as a "bundle" into the operational monitoring.


    You can find an introduction to the configuration of Checkmk including activation
    of changes in the

    [Checkmk guide](https://docs.checkmk.com/latest/en/wato.html).'
  name: Activate changes
  x-displayName: Activate changes
- description: 'An agent is a small program that is installed on a host in order for
    Checkmk to be able query

    data from the host.


    An introduction to agents can be found in the

    [Checkmk guide](https://docs.checkmk.com/latest/en/wato_monitoringagents.html).


    You can find more about the agent bakery and automatic agent updates of checkmk
    enterprise

    in [Agent Deployment](https://docs.checkmk.com/latest/en/agent_deployment.html).'
  name: Agents
  x-displayName: Agents
- description: 'BI is used in Checkmk to set up a tree based on the status of hosts
    and services as branches and to

    extend with higher level nodes summarizing (or aggregating) the status of the
    contained objects.

    A BI pack contains the configuration data by means of BI aggregations and BI rules.

    A BI aggregation is a tree of nodes and a BI rule is used to define a node and
    its status.


    You can find an introduction to BI in the

    [Checkmk guide](https://docs.checkmk.com/latest/en/bi.html).'
  name: Business intelligence (BI)
  x-displayName: Business intelligence (BI)
- description: 'WARNING: Use at your own risk, not supported.


    Checkmk uses SSL certificates to verify push hosts.'
  name: Certificates
  x-displayName: Certificates
- description: "Contact groups are the link between hosts and services on one side\
    \ and users on the other.\nEvery contact group represents a responsibility for\
    \ a specific area in the IT landscape.\n\nYou can find an introduction to user\
    \ management including contact groups in the\n[Checkmk guide](https://docs.checkmk.com/latest/en/wato_user.html).\n\
    \n### Relations\n\nA contact group object can have the following relations present\
    \ in `links`:\n\n * `self` - The contact group itself.\n * `urn:org.restfulobject/rels:update`\
    \ - An endpoint to change this contact group.\n * `urn:org.restfulobject/rels:delete`\
    \ - An endpoint to delete this contact group."
  name: Contact groups
  x-displayName: Contact groups
- description: "A (scheduled) downtime is a planned maintenance period.\nHosts and\
    \ services are handled differently by Checkmk during a downtime, for example,\n\
    notifications are disabled.\n\n### Related documentation\n\nHow to use the query\
    \ DSL used in the `query` parameters of these endpoints, have a look at the\n\
    [Querying Status Data](#section/Querying-Status-Data) section of this documentation.\n\
    \nThese endpoints support all [Livestatus filter operators](https://docs.checkmk.com/latest/en/livestatus_references.html#heading_filter),\n\
    which you can look up in the Checkmk documentation.\n\nFor a detailed list of\
    \ columns, please take a look at the [downtimes table](https://github.com/tribe29/checkmk/blob/master/cmk/gui/plugins/openapi/livestatus_helpers/tables/downtimes.py)\n\
    definition on GitHub.\n\n### Relations\n\nDowntime object can have the following\
    \ relations:\n\n * `self` - The downtime itself.\n * `urn:com.checkmk:rels/host_config`\
    \ - The host the downtime applies to.\n * `urn:org.restfulobjects/delete` - The\
    \ endpoint to delete downtimes."
  name: Downtimes
  x-displayName: Downtimes
- description: "Folders are used in Checkmk to organize the hosts in a tree structure.\n\
    The root (or main) folder is always existing, other folders can be created manually.\n\
    If you build the tree cleverly you can use it to pass on attributes in a meaningful\
    \ manner.\n\nYou can find an introduction to hosts including folders in the\n\
    [Checkmk guide](https://docs.checkmk.com/latest/en/wato_hosts.html).\n\nDue to\
    \ HTTP escaping folders are represented with the tilde character (`~`) as the\
    \ path separator.\n\n### Host and Folder attributes\n\nEvery host and folder can\
    \ have \"attributes\" set, which determine the behavior of Checkmk. Each\nhost\
    \ inherits all attributes of its folder and the folder's parent folders. So setting\
    \ an SNMP\ncommunity in a folder is equivalent to setting the same on all hosts\
    \ in said folder.\n\nSome host endpoints allow one to view the \"effective attributes\"\
    , which is an aggregation of all\nattributes up to the root.\n\n### Relations\n\
    \nA folder_config object can have the following relations present in `links`:\n\
    \n * `self` - The folder itself.\n * `urn:org.restfulobjects:rels/update` - The\
    \ endpoint to update this folder.\n * `urn:org.restfulobjects:rels/delete` - The\
    \ endpoint to delete this folder."
  name: Folders
  x-displayName: Folders
- description: "The host status provides the host's \"health\" information.\n\n###\
    \ Related documentation\n\nHow to use the query DSL used in the `query` parameters\
    \ of these endpoints, have a look at the\n[Querying Status Data](#section/Querying-Status-Data)\
    \ section of this documentation.\n\nThese endpoints support all [Livestatus filter\
    \ operators](https://docs.checkmk.com/latest/en/livestatus_references.html#heading_filter),\n\
    which you can look up in the Checkmk documentation.\n\nFor a detailed list of\
    \ columns, please take a look at the [hosts table](https://github.com/tribe29/checkmk/blob/master/cmk/gui/plugins/openapi/livestatus_helpers/tables/hosts.py)\n\
    definition on GitHub.\n\n### Examples\n\nThe query expression for all non-OK hosts\
    \ would be:\n\n    {'op': '!=', 'left': 'state', 'right': '0'}\n\nTo search for\
    \ unreachable hosts:\n\n    {'op': '=', 'left': 'state', 'right': '2'}\n\nTo search\
    \ for all hosts with their host name or alias starting with 'location1-':\n\n\
    \    {'op': '~', 'left': 'name', 'right': 'location1-.*'}\n\n    {'op': '~', 'left':\
    \ 'alias', 'right': 'location1-.*'}\n\nTo search for hosts with specific tags\
    \ set on them:\n\n    {'op': '~', 'left': 'tag_names', 'right': 'windows'}"
  name: Host status
  x-displayName: Host status
- description: "A host is an object that is monitored by Checkmk, for example, a server\
    \ or a network device.\nA host belongs to a certain folder, is usually connected\
    \ to a data source (agent or SNMP) and\nprovides one or more services.\n\nA cluster\
    \ host is a special host type containing the nodes the cluster consists of and\
    \ having\nthe services assigned that are provided by the cluster.\n\nYou can find\
    \ an introduction to hosts in the\n[Checkmk guide](https://docs.checkmk.com/latest/en/wato_hosts.html).\n\
    \nPlease note that every host always resides in a folder. The folder is included\
    \ twice\nin the host's links: Once based upon the canonical path and once based\
    \ upon the folder's\nunique id. You can never remove a host from a folder, just\
    \ move it to a different one.\n\n### Host and Folder attributes\n\nEvery host\
    \ and folder can have \"attributes\" set, which determine the behavior of Checkmk.\
    \ Each\nhost inherits all attributes of its folder and the folder's parent folders.\
    \ So setting an SNMP\ncommunity in a folder is equivalent to setting the same\
    \ on all hosts in said folder.\n\nSome host endpoints allow one to view the \"\
    effective attributes\", which is an aggregation of all\nattributes up to the root.\n\
    \n### Relations\n\nA host_config object can have the following relations present\
    \ in `links`:\n\n * `self` - The host itself.\n * `urn:com.checkmk:rels/folder_config`\
    \ - The folder object this host resides in.\n * `urn:org.restfulobjects:rels/update`\
    \ - The endpoint to update this host.\n * `urn:org.restfulobjects:rels/delete`\
    \ - The endpoint to delete this host."
  name: Hosts
  x-displayName: Hosts
- description: "Host groups are a way to organize hosts in Checkmk for monitoring.\n\
    By using a host group you can generate suitable views for overview and/or analysis.\n\
    \nYou can find an introduction to hosts including host groups in the\n[Checkmk\
    \ guide](https://docs.checkmk.com/latest/en/wato_hosts.html).\n\nA host group\
    \ object can have the following relations present in `links`:\n\n * `self` - The\
    \ host group itself.\n * `urn:org.restfulobject/rels:update` - An endpoint to\
    \ change this host group.\n * `urn:org.restfulobject/rels:delete` - An endpoint\
    \ to delete this host group."
  name: Host groups
  x-displayName: Host groups
- description: 'WARNING: Use at your own risk, not supported.'
  name: Hosts (internal)
  x-displayName: Hosts (internal)
- description: 'Host tag groups are, besides the static folder structure, another
    more flexible way to

    organize hosts in Checkmk for configuration.

    A host tag group is a collection of different host tags, with each host receiving
    exactly one

    tag from the group.


    You can find an introduction to hosts including host tags and host tag groups
    in the

    [Checkmk guide](https://docs.checkmk.com/latest/en/wato_hosts.html).'
  name: Host tag groups
  x-displayName: Host tag groups
- description: 'Passwords intended for authentication of certain checks can be stored
    in the Checkmk

    password store. You can use in a rule a password stored in the password store
    without knowing or

    entering the password.'
  name: Passwords
  x-displayName: Passwords
- name: Rules
  x-displayName: Rules
- name: Rulesets
  x-displayName: Rulesets
- description: 'The service status provides the service''s "health" information.


    A service (for example, a file system or a process) is a property of a certain
    host that

    is monitored by Checkmk.


    ### Related documentation


    How to use the query DSL used in the `query` parameters of these endpoints, have
    a look at the

    [Querying Status Data](#section/Querying-Status-Data) section of this documentation.


    These endpoints support all [Livestatus filter operators](https://docs.checkmk.com/latest/en/livestatus_references.html#heading_filter),

    which you can look up in the Checkmk documentation.


    For a detailed list of columns have a look at the [services table](https://github.com/tribe29/checkmk/blob/master/cmk/gui/plugins/openapi/livestatus_helpers/tables/services.py)

    definition on GitHub.'
  name: Service status
  x-displayName: Service status
- description: 'A service discovery is the automatic and reliable detection of all
    services to be monitored on

    a host.


    You can find an introduction to services including service discovery in the

    [Checkmk guide](https://docs.checkmk.com/latest/en/wato_services.html).'
  name: Service discovery
  x-displayName: Service discovery
- description: "Service groups are a way to organize services in Checkmk for monitoring.\n\
    By using a service group you can generate suitable views for overview and/or analysis,\n\
    for example, file system services of multiple hosts.\n\nYou can find an introduction\
    \ to services including service groups in the\n[Checkmk guide](https://docs.checkmk.com/latest/en/wato_services.html).\n\
    \nA service group object can have the following relations present in `links`:\n\
    \n * `self` - The service group itself.\n * `urn:org.restfulobject/rels:update`\
    \ - An endpoint to change this service group.\n * `urn:org.restfulobject/rels:delete`\
    \ - An endpoint to delete this service group."
  name: Service groups
  x-displayName: Service groups
- description: 'With time periods the monitoring with Checkmk can be adapted to recurring
    conditions, for

    example, to avoid senseless notifications.


    You can find an introduction to time periods in the

    [Checkmk guide](https://docs.checkmk.com/latest/en/timeperiods.html).'
  name: Time periods
  x-displayName: Time periods
- name: Users
  x-displayName: Users
- description: This folder collects individual endpoints not fitting into the other
    endpoint folders.
  name: Miscellaneous
  x-displayName: Miscellaneous
x-ignoredHeaderParameters:
- User-Agent
- X-Test-Header
x-logo:
  altText: Checkmk
  url: https://checkmk.com/bilder/brand-assets/checkmk_logo_main.png
x-tagGroups:
- name: Monitoring
  tags:
  - Acknowledge problems
  - Downtimes
  - Host status
  - Service status
  - Miscellaneous
- name: Setup
  tags:
  - Activate changes
  - Agents
  - Business intelligence (BI)
  - Contact groups
  - Folders
  - Hosts
  - Host groups
  - Host tag groups
  - Passwords
  - Rules
  - Rulesets
  - Service discovery
  - Service groups
  - Time periods
  - Users
- name: Checkmk Internal
  tags:
  - Certificates
  - Hosts (internal)
